# -*- coding: utf-8 -*-
"""
/***************************************************************************
 ConquestGeoDialog
                                 A QGIS plugin
 This plugin connects to your Conquest assets
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2021-12-10
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Conquest Software Pty Ltd.
        email                : support@conquestsoftware.com.au
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from swagger_client.models.conquest_api_object_key import ConquestApiObjectKey

from  ui.hierarchy import ConquestObject
from  ui.hierarchy_selector import HierarchySelector

# from qgis.PyQt.QtCore import QSettings
from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from qgis.PyQt.QtWidgets import QLabel, QLineEdit, QFormLayout, QMessageBox
from ui.client import client, settings
from  ui.conquest_geo_dialog import ConquestGeoDialog
from swagger_client.models.conquest_api_object_type import ConquestApiObjectType
from collections import defaultdict

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'conquest_geo_dialog_asset.ui'))


class ConquestGeoDialogAsset(QtWidgets.QDialog, FORM_CLASS):
    ASSET_DESCRIPTION = 'Asset Description'

    def __init__(self, parent=None):
        """Constructor."""
        self.selection = defaultdict(str)
        super(ConquestGeoDialogAsset, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.accepted.connect(self._submit_form)

        # asset selector
        self.selectAsset.clicked.connect(self.select_asset)

        # type selector
        self.selectType.clicked.connect(self.select_type)

        self.reset_form()

        # update form
        self.update_form()

        # confirm token is working
        self.check_token()

    def check_token(self):
        if not client.is_valid:
            dialog = ConquestGeoDialog(self)
            dialog.show()

    def select_asset(self):
        context = ConquestApiObjectType.ASSET
        self.asset_dlg = HierarchySelector(context, self)
        dlg = self.asset_dlg
        dlg.setWindowTitle('Select parent asset')
        dlg.show()
        result = dlg.exec()
        # See if asset was selected
        if result:
            self.selection[context] = dlg.selection[context]
            self.update_form()

    def select_type(self):
        context = ConquestApiObjectType.ASSETTYPE
        self.asset_dlg = HierarchySelector(context, self)
        dlg = self.asset_dlg
        dlg.setWindowTitle('Select asset type')
        dlg.show()
        result = dlg.exec()
        # See if type was selected
        if result:
            self.selection[context] = dlg.selection[context]
            self.update_form()

    def insert_row(self, field1: str = '', field2: str = '', edit: bool = True, format: str = 'str') -> None:
        f1 = QLabel()
        f1.setText(field1)
        f2 = QLineEdit() if edit else QLabel()
        f2.setText('%.70s' % field2)  # temporary trimming for ui purposes
        print(field2)
        # tst2.setText(str(feature.geometry().asWkt()))
        # print(dir(feature.geometry()))
        print(self.formLayout.rowCount())
        for i in range(self.formLayout.rowCount()):
            # print(f'looking for item at {i}')
            f = self.formLayout.itemAt(i, QFormLayout.ItemRole.LabelRole)
            # print(str(str(f.widget().text())))
            if str(f.widget().text()) == field1:
                break
        else:
            if not f2.text():
                f2.setText(settings.get_setting(field1))
            self.formLayout.addRow(f1, f2)
            if edit:
                f2.textChanged.connect(self.update_form)

    def update_form(self):
        for i in range(self.formLayout.rowCount()):
            # print(f'looking for item at {i}')
            k = self.formLayout.itemAt(
                i, QFormLayout.ItemRole.LabelRole).widget().text()
            v = self.formLayout.itemAt(
                i, QFormLayout.ItemRole.FieldRole).widget().text()
            self.selection[k] = v

            print(k, v)
            # print(str(str(f.widget().text())))
            # if str(f.widget().text()) == field1: break
        asset = self.selection[ConquestApiObjectType.ASSET] or settings.get_setting(
            ConquestApiObjectType.ASSET)
        if isinstance(asset, ConquestObject):
            asset = asset.object_name
        print(asset)
        type = self.selection[ConquestApiObjectType.ASSETTYPE] or settings.get_setting(
            ConquestApiObjectType.ASSETTYPE)
        if isinstance(type, ConquestObject):
            type = type.object_name
        print(type)
        asset_description = self.ASSET_DESCRIPTION
        description = self.selection[asset_description] or settings.get_setting(
            asset_description)

        self.selectAsset.setText(
            f'Parent Asset: {str(asset)}' if asset else 'Select Parent Asset')
        self.selectType.setText(
            f'Asset Type: {str(type)}' if type else 'Select Asset Type')

        if asset and type:
            self.insert_row(self.ASSET_DESCRIPTION)

        self.button_box.setEnabled(
            True if asset and type and description else False)

    def validate_form(self):
        asset = self.selection[ConquestApiObjectType.ASSET] or settings.get_setting(
            ConquestApiObjectType.ASSET)
        print(asset)
        type = self.selection[ConquestApiObjectType.ASSETTYPE] or settings.get_setting(
            ConquestApiObjectType.ASSETTYPE)
        print(type)
        description = self.selection[self.ASSET_DESCRIPTION]

        self.selectAsset.setText(
            f'Parent Asset: {str(asset)}' if asset else 'Select Parent Asset')
        self.selectType.setText(
            f'Asset Type: {str(type)}' if type else 'Select Asset Type')

    def reset_form(self):
        c = self.formLayout.rowCount()
        for _ in range(c):
            self.formLayout.removeRow(0)

    def _print_api(self):
        print(str(self.url_input.text()))

    def _submit_form(self):
        # as a test it cleans up the connection config
        # del client.token
        description = self.selection[self.ASSET_DESCRIPTION]
        target_key = ConquestApiObjectKey(
                0, 
                self.selection[ConquestApiObjectType.ASSETTYPE].object_key.int32_value
            )
        parent_key = self.selection[ConquestApiObjectType.ASSET].object_key
        geography = self.selection['Geometry']
        self.target_asset = ConquestObject(
            description, 
            target_key, 
            parent_key, 
            geography)
