# coding: utf-8

"""
    Conquest API v2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


# from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from ..api_client import ApiClient
from ..rest import ApiException
import requests


class CsvImportServiceApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def csv_import_service_add_csv_import(self, import_type, file, **kwargs):  # noqa: E501
        """csv_import_service_add_csv_import  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.csv_import_service_add_csv_import(import_type, file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str import_type: Action, Asset, Defect, Request, AssetInspection, RiskEvent, LogBook (required)
        :param file file: CSV file data (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.csv_import_service_add_csv_import_with_http_info(import_type, file, **kwargs)  # noqa: E501
        else:
            (data) = self.csv_import_service_add_csv_import_with_http_info(import_type, file, **kwargs)  # noqa: E501
            return data

    def csv_import_service_add_csv_import_with_http_info(self, import_type, file, **kwargs):  # noqa: E501
        """csv_import_service_add_csv_import  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.csv_import_service_add_csv_import_with_http_info(import_type, file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str import_type: Action, Asset, Defect, Request, AssetInspection, RiskEvent, LogBook (required)
        :param file file: CSV file data (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['import_type', 'file']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method csv_import_service_add_csv_import" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'import_type' is set
        if self.api_client.client_side_validation and ('import_type' not in params or
                                                       params['import_type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `import_type` when calling `csv_import_service_add_csv_import`")  # noqa: E501
        # verify the required parameter 'file' is set
        if self.api_client.client_side_validation and ('file' not in params or
                                                       params['file'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `file` when calling `csv_import_service_add_csv_import`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'import_type' in params:
            path_params['ImportType'] = params['import_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'file' in params:
            local_var_files['file'] = params['file']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Api Key from App']  # noqa: E501

        self.api_client.update_params_for_auth(header_params, (), auth_settings)

        if params.get('async_req'):
            raise ApiException('CSV imports are async by default. Do not use this option here')

        # response = self.api_client.call_api(
        #     '/api/import/add/{ImportType}', 'POST',
        #     path_params,
        #     query_params,
        #     header_params,
        #     body=body_params,
        #     post_params=form_params,
        #     files=local_var_files,
        #     response_type='str',  # noqa: E501
        #     auth_settings=auth_settings,
        #     async_req=params.get('async_req'),
        #     _return_http_data_only=params.get('_return_http_data_only'),
        #     _preload_content=params.get('_preload_content', True),
        #     _request_timeout=params.get('_request_timeout'),
        #     collection_formats=collection_formats)

        with open(file, 'rb') as f:
            data = f.read()

        response = requests.post('{}/api/import/add/{}'.format(self.api_client.configuration.host, import_type),
                                 files={'file': data},
                                 headers=header_params,
                                 verify=self.api_client.configuration.verify_ssl) #.text.replace('"','')

        return (response)

    def csv_import_service_delete_csv_import(self, job_id, **kwargs):  # noqa: E501
        """Remove import  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.csv_import_service_delete_csv_import(job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str job_id: aka. ProcessID/BatchID (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.csv_import_service_delete_csv_import_with_http_info(job_id, **kwargs)  # noqa: E501
        else:
            (data) = self.csv_import_service_delete_csv_import_with_http_info(job_id, **kwargs)  # noqa: E501
            return data

    def csv_import_service_delete_csv_import_with_http_info(self, job_id, **kwargs):  # noqa: E501
        """Remove import  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.csv_import_service_delete_csv_import_with_http_info(job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str job_id: aka. ProcessID/BatchID (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['job_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method csv_import_service_delete_csv_import" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'job_id' is set
        if self.api_client.client_side_validation and ('job_id' not in params or
                                                       params['job_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `job_id` when calling `csv_import_service_delete_csv_import`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'job_id' in params:
            path_params['JobID'] = params['job_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Api Key from App']  # noqa: E501

        return self.api_client.call_api(
            '/api/import/delete/{JobID}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def csv_import_service_get_csv_import_state(self, job_id, **kwargs):  # noqa: E501
        """Get status for import  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.csv_import_service_get_csv_import_state(job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str job_id: aka. ProcessID/BatchID (required)
        :return: ConquestApiCsvImportStateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.csv_import_service_get_csv_import_state_with_http_info(job_id, **kwargs)  # noqa: E501
        else:
            (data) = self.csv_import_service_get_csv_import_state_with_http_info(job_id, **kwargs)  # noqa: E501
            return data

    def csv_import_service_get_csv_import_state_with_http_info(self, job_id, **kwargs):  # noqa: E501
        """Get status for import  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.csv_import_service_get_csv_import_state_with_http_info(job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str job_id: aka. ProcessID/BatchID (required)
        :return: ConquestApiCsvImportStateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['job_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method csv_import_service_get_csv_import_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'job_id' is set
        if self.api_client.client_side_validation and ('job_id' not in params or
                                                       params['job_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `job_id` when calling `csv_import_service_get_csv_import_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'job_id' in params:
            path_params['JobID'] = params['job_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Api Key from App']  # noqa: E501

        return self.api_client.call_api(
            '/api/import/state/{JobID}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConquestApiCsvImportStateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def csv_import_service_start_csv_import(self, **kwargs):  # noqa: E501
        """csv_import_service_start_csv_import  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.csv_import_service_start_csv_import(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.csv_import_service_start_csv_import_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.csv_import_service_start_csv_import_with_http_info(**kwargs)  # noqa: E501
            return data

    def csv_import_service_start_csv_import_with_http_info(self, **kwargs):  # noqa: E501
        """csv_import_service_start_csv_import  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.csv_import_service_start_csv_import_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method csv_import_service_start_csv_import" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Api Key from App']  # noqa: E501

        return self.api_client.call_api(
            '/api/import/start', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
