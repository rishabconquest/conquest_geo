# coding: utf-8

"""
    Conquest API v2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


# from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from ..api_client import ApiClient

from datetime import datetime
import mimetypes
import requests

class DocumentServiceApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def document_service_add_document(self, body, **kwargs):  # noqa: E501
        """document_service_add_document  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.document_service_add_document(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConquestApiAddDocumentCommand body: (required)
        :return: ConquestApiAddDocumentResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.document_service_add_document_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.document_service_add_document_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def document_service_add_document_with_http_info(self, body, **kwargs):  # noqa: E501
        """document_service_add_document  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.document_service_add_document_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConquestApiAddDocumentCommand body: (required)
        :return: ConquestApiAddDocumentResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        filename = None
        body.create_time = body.create_time or datetime.now().strftime('%Y-%m-%dT%H:%M:%S.3%fZ')
        for key, val in six.iteritems(params['kwargs']):
            if key == 'file':
                filename = val
                continue
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method document_service_add_document" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `document_service_add_document`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Api Key from App']  # noqa: E501

        # Modify body to avoid overwriting existing files (it's not implemented on the server side)
        if filename:
            mtype, enc = mimetypes.guess_type(filename)
            mtype = 'text/csv' if filename.endswith('.csv') else mtype  # Windows pushes its default excel association
            with open(filename, 'rb', encoding=enc) as f:
                data = f.read()
            body_params.content_type = body_params.content_type if body_params.content_type else mtype
        if body_params.address:
            body_params.address = datetime.now().strftime('%Y%m%d%H%M%S%d') + str(body_params.address)
            mtype, enc = mimetypes.guess_type(body_params.address)
            mtype = 'text/csv' if filename.endswith('.csv') else mtype  # Windows pushes its default excel association
            body_params.content_type = body_params.content_type if body_params.content_type else mtype

        
        
        # Create document in API
        create_document = self.api_client.call_api(
            '/api/documents/add_document', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConquestApiAddDocumentResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

        # Upload document (TODO: error handling)
        if filename:
            uri = create_document.upload_uri
            headers = create_document.upload_headers
            response = requests.put(uri, data=data, headers=headers)
            create_document.upload_response = response

        return create_document

    def document_service_change_document_content(self, body, **kwargs):  # noqa: E501
        """document_service_change_document_content  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.document_service_change_document_content(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConquestApiChangeDocumentContentCommand body: (required)
        :return: ConquestApiAddDocumentResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.document_service_change_document_content_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.document_service_change_document_content_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def document_service_change_document_content_with_http_info(self, body, **kwargs):  # noqa: E501
        """document_service_change_document_content  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.document_service_change_document_content_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConquestApiChangeDocumentContentCommand body: (required)
        :return: ConquestApiAddDocumentResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method document_service_change_document_content" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `document_service_change_document_content`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Api Key from App']  # noqa: E501

        return self.api_client.call_api(
            '/api/documents/change_document_content', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConquestApiAddDocumentResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def document_service_generate_document_link(self, body, **kwargs):  # noqa: E501
        """document_service_generate_document_link  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.document_service_generate_document_link(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConquestApiGenerateDocumentLinkCommand body: (required)
        :return: ConquestApiGenerateDocumentLinkResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.document_service_generate_document_link_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.document_service_generate_document_link_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def document_service_generate_document_link_with_http_info(self, body, **kwargs):  # noqa: E501
        """document_service_generate_document_link  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.document_service_generate_document_link_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConquestApiGenerateDocumentLinkCommand body: (required)
        :return: ConquestApiGenerateDocumentLinkResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method document_service_generate_document_link" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `document_service_generate_document_link`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Api Key from App']  # noqa: E501

        return self.api_client.call_api(
            '/api/documents/generate_document_link', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConquestApiGenerateDocumentLinkResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def document_service_get_documents(self, body, **kwargs):  # noqa: E501
        """document_service_get_documents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.document_service_get_documents(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConquestApiGetDocumentsQuery body: (required)
        :return: ConquestApiGetDocumentsResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.document_service_get_documents_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.document_service_get_documents_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def document_service_get_documents_with_http_info(self, body, **kwargs):  # noqa: E501
        """document_service_get_documents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.document_service_get_documents_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConquestApiGetDocumentsQuery body: (required)
        :return: ConquestApiGetDocumentsResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method document_service_get_documents" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `document_service_get_documents`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Api Key from App']  # noqa: E501

        return self.api_client.call_api(
            '/api/documents/list', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConquestApiGetDocumentsResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def document_service_list_document_locations(self, body, **kwargs):  # noqa: E501
        """document_service_list_document_locations  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.document_service_list_document_locations(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConquestApiListDocumentLocationsQuery body: (required)
        :return: ConquestApiListDocumentLocationsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.document_service_list_document_locations_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.document_service_list_document_locations_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def document_service_list_document_locations_with_http_info(self, body, **kwargs):  # noqa: E501
        """document_service_list_document_locations  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.document_service_list_document_locations_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConquestApiListDocumentLocationsQuery body: (required)
        :return: ConquestApiListDocumentLocationsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method document_service_list_document_locations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `document_service_list_document_locations`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Api Key from App']  # noqa: E501

        return self.api_client.call_api(
            '/api/documents/list_locations', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConquestApiListDocumentLocationsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def document_service_remove_document(self, body, **kwargs):  # noqa: E501
        """document_service_remove_document  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.document_service_remove_document(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConquestApiRemoveDocumentCommand body: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.document_service_remove_document_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.document_service_remove_document_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def document_service_remove_document_with_http_info(self, body, **kwargs):  # noqa: E501
        """document_service_remove_document  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.document_service_remove_document_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ConquestApiRemoveDocumentCommand body: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method document_service_remove_document" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `document_service_remove_document`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Api Key from App']  # noqa: E501

        return self.api_client.call_api(
            '/api/documents/remove_document', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)


    # def document_service_add_and_upload_document(self, body, file, **kwargs):  # noqa: E501
    #     """document_service_add_document  # noqa: E501

    #     This method makes a synchronous HTTP request by default. To make an
    #     asynchronous HTTP request, please pass async_req=True
    #     >>> thread = api.document_service_add_document(body, async_req=True)
    #     >>> result = thread.get()

    #     :param async_req bool
    #     :param ConquestApiAddDocumentCommand body: (required)
    #     :param str file: (required)
    #     :return: ConquestApiAddDocumentResult
    #              If the method is called asynchronously,
    #              returns the request thread.
    #     """
    #     kwargs['_return_http_data_only'] = True
    #     if kwargs.get('async_req'):
    #         return self.document_service_add_document_with_http_info(body, **kwargs)  # noqa: E501
    #     else:
    #         (data) = self.document_service_add_document_with_http_info(body, **kwargs)  # noqa: E501
    #         return data

    