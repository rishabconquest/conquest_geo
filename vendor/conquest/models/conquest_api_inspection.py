# coding: utf-8

"""
    Conquest API v2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ConquestApiInspection(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'inspection_date': 'datetime',
        'inspection_id': 'int',
        'inspection_notes': 'str',
        'inspection_type': 'int',
        'inspector': 'str',
        'object_key': 'ConquestApiObjectKey',
        'organisation': 'str'
    }

    attribute_map = {
        'inspection_date': 'InspectionDate',
        'inspection_id': 'InspectionID',
        'inspection_notes': 'InspectionNotes',
        'inspection_type': 'InspectionType',
        'inspector': 'Inspector',
        'object_key': 'ObjectKey',
        'organisation': 'Organisation'
    }

    def __init__(self, inspection_date=None, inspection_id=None, inspection_notes=None, inspection_type=None, inspector=None, object_key=None, organisation=None):  # noqa: E501
        """ConquestApiInspection - a model defined in Swagger"""  # noqa: E501
        self._inspection_date = None
        self._inspection_id = None
        self._inspection_notes = None
        self._inspection_type = None
        self._inspector = None
        self._object_key = None
        self._organisation = None
        self.discriminator = None
        if inspection_date is not None:
            self.inspection_date = inspection_date
        if inspection_id is not None:
            self.inspection_id = inspection_id
        if inspection_notes is not None:
            self.inspection_notes = inspection_notes
        if inspection_type is not None:
            self.inspection_type = inspection_type
        if inspector is not None:
            self.inspector = inspector
        if object_key is not None:
            self.object_key = object_key
        if organisation is not None:
            self.organisation = organisation

    @property
    def inspection_date(self):
        """Gets the inspection_date of this ConquestApiInspection.  # noqa: E501


        :return: The inspection_date of this ConquestApiInspection.  # noqa: E501
        :rtype: datetime
        """
        return self._inspection_date

    @inspection_date.setter
    def inspection_date(self, inspection_date):
        """Sets the inspection_date of this ConquestApiInspection.


        :param inspection_date: The inspection_date of this ConquestApiInspection.  # noqa: E501
        :type: datetime
        """

        self._inspection_date = inspection_date

    @property
    def inspection_id(self):
        """Gets the inspection_id of this ConquestApiInspection.  # noqa: E501


        :return: The inspection_id of this ConquestApiInspection.  # noqa: E501
        :rtype: int
        """
        return self._inspection_id

    @inspection_id.setter
    def inspection_id(self, inspection_id):
        """Sets the inspection_id of this ConquestApiInspection.


        :param inspection_id: The inspection_id of this ConquestApiInspection.  # noqa: E501
        :type: int
        """

        self._inspection_id = inspection_id

    @property
    def inspection_notes(self):
        """Gets the inspection_notes of this ConquestApiInspection.  # noqa: E501


        :return: The inspection_notes of this ConquestApiInspection.  # noqa: E501
        :rtype: str
        """
        return self._inspection_notes

    @inspection_notes.setter
    def inspection_notes(self, inspection_notes):
        """Sets the inspection_notes of this ConquestApiInspection.


        :param inspection_notes: The inspection_notes of this ConquestApiInspection.  # noqa: E501
        :type: str
        """

        self._inspection_notes = inspection_notes

    @property
    def inspection_type(self):
        """Gets the inspection_type of this ConquestApiInspection.  # noqa: E501


        :return: The inspection_type of this ConquestApiInspection.  # noqa: E501
        :rtype: int
        """
        return self._inspection_type

    @inspection_type.setter
    def inspection_type(self, inspection_type):
        """Sets the inspection_type of this ConquestApiInspection.


        :param inspection_type: The inspection_type of this ConquestApiInspection.  # noqa: E501
        :type: int
        """

        self._inspection_type = inspection_type

    @property
    def inspector(self):
        """Gets the inspector of this ConquestApiInspection.  # noqa: E501


        :return: The inspector of this ConquestApiInspection.  # noqa: E501
        :rtype: str
        """
        return self._inspector

    @inspector.setter
    def inspector(self, inspector):
        """Sets the inspector of this ConquestApiInspection.


        :param inspector: The inspector of this ConquestApiInspection.  # noqa: E501
        :type: str
        """

        self._inspector = inspector

    @property
    def object_key(self):
        """Gets the object_key of this ConquestApiInspection.  # noqa: E501


        :return: The object_key of this ConquestApiInspection.  # noqa: E501
        :rtype: ConquestApiObjectKey
        """
        return self._object_key

    @object_key.setter
    def object_key(self, object_key):
        """Sets the object_key of this ConquestApiInspection.


        :param object_key: The object_key of this ConquestApiInspection.  # noqa: E501
        :type: ConquestApiObjectKey
        """

        self._object_key = object_key

    @property
    def organisation(self):
        """Gets the organisation of this ConquestApiInspection.  # noqa: E501


        :return: The organisation of this ConquestApiInspection.  # noqa: E501
        :rtype: str
        """
        return self._organisation

    @organisation.setter
    def organisation(self, organisation):
        """Sets the organisation of this ConquestApiInspection.


        :param organisation: The organisation of this ConquestApiInspection.  # noqa: E501
        :type: str
        """

        self._organisation = organisation

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConquestApiInspection, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConquestApiInspection):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
