# coding: utf-8

"""
    Conquest API v2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from ..configuration import Configuration


class ConquestApiViewField(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'context_path': 'str',
        'object_attribute': 'ConquestApiObjectAttribute'
    }

    attribute_map = {
        'context_path': 'ContextPath',
        'object_attribute': 'ObjectAttribute'
    }

    def __init__(self, context_path=None, object_attribute=None, _configuration=None):  # noqa: E501
        """ConquestApiViewField - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._context_path = None
        self._object_attribute = None
        self.discriminator = None

        if context_path is not None:
            self.context_path = context_path
        if object_attribute is not None:
            self.object_attribute = object_attribute

    @property
    def context_path(self):
        """Gets the context_path of this ConquestApiViewField.  # noqa: E501

        The ContextPath is the identifier for a field for a given Context. This value takes the form ' view.column', for example 'v_Assets.AssetID'.  # noqa: E501

        :return: The context_path of this ConquestApiViewField.  # noqa: E501
        :rtype: str
        """
        return self._context_path

    @context_path.setter
    def context_path(self, context_path):
        """Sets the context_path of this ConquestApiViewField.

        The ContextPath is the identifier for a field for a given Context. This value takes the form ' view.column', for example 'v_Assets.AssetID'.  # noqa: E501

        :param context_path: The context_path of this ConquestApiViewField.  # noqa: E501
        :type: str
        """

        self._context_path = context_path

    @property
    def object_attribute(self):
        """Gets the object_attribute of this ConquestApiViewField.  # noqa: E501


        :return: The object_attribute of this ConquestApiViewField.  # noqa: E501
        :rtype: ConquestApiObjectAttribute
        """
        return self._object_attribute

    @object_attribute.setter
    def object_attribute(self, object_attribute):
        """Sets the object_attribute of this ConquestApiViewField.


        :param object_attribute: The object_attribute of this ConquestApiViewField.  # noqa: E501
        :type: ConquestApiObjectAttribute
        """

        self._object_attribute = object_attribute

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConquestApiViewField, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConquestApiViewField):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ConquestApiViewField):
            return True

        return self.to_dict() != other.to_dict()
