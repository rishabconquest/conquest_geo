# coding: utf-8

"""
    Conquest API v2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from ..configuration import Configuration


class ConquestApiConfigLeafletMapConnection(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'access_key': 'str',
        'enabled': 'bool',
        'max_zoom': 'float',
        'min_zoom': 'float',
        'name': 'str',
        'properties': 'dict(str, str)',
        'template_url': 'str'
    }

    attribute_map = {
        'access_key': 'accessKey',
        'enabled': 'enabled',
        'max_zoom': 'maxZoom',
        'min_zoom': 'minZoom',
        'name': 'name',
        'properties': 'properties',
        'template_url': 'templateUrl'
    }

    def __init__(self, access_key=None, enabled=None, max_zoom=None, min_zoom=None, name=None, properties=None, template_url=None, _configuration=None):  # noqa: E501
        """ConquestApiConfigLeafletMapConnection - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._access_key = None
        self._enabled = None
        self._max_zoom = None
        self._min_zoom = None
        self._name = None
        self._properties = None
        self._template_url = None
        self.discriminator = None

        if access_key is not None:
            self.access_key = access_key
        if enabled is not None:
            self.enabled = enabled
        if max_zoom is not None:
            self.max_zoom = max_zoom
        if min_zoom is not None:
            self.min_zoom = min_zoom
        if name is not None:
            self.name = name
        if properties is not None:
            self.properties = properties
        if template_url is not None:
            self.template_url = template_url

    @property
    def access_key(self):
        """Gets the access_key of this ConquestApiConfigLeafletMapConnection.  # noqa: E501


        :return: The access_key of this ConquestApiConfigLeafletMapConnection.  # noqa: E501
        :rtype: str
        """
        return self._access_key

    @access_key.setter
    def access_key(self, access_key):
        """Sets the access_key of this ConquestApiConfigLeafletMapConnection.


        :param access_key: The access_key of this ConquestApiConfigLeafletMapConnection.  # noqa: E501
        :type: str
        """

        self._access_key = access_key

    @property
    def enabled(self):
        """Gets the enabled of this ConquestApiConfigLeafletMapConnection.  # noqa: E501


        :return: The enabled of this ConquestApiConfigLeafletMapConnection.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this ConquestApiConfigLeafletMapConnection.


        :param enabled: The enabled of this ConquestApiConfigLeafletMapConnection.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def max_zoom(self):
        """Gets the max_zoom of this ConquestApiConfigLeafletMapConnection.  # noqa: E501


        :return: The max_zoom of this ConquestApiConfigLeafletMapConnection.  # noqa: E501
        :rtype: float
        """
        return self._max_zoom

    @max_zoom.setter
    def max_zoom(self, max_zoom):
        """Sets the max_zoom of this ConquestApiConfigLeafletMapConnection.


        :param max_zoom: The max_zoom of this ConquestApiConfigLeafletMapConnection.  # noqa: E501
        :type: float
        """

        self._max_zoom = max_zoom

    @property
    def min_zoom(self):
        """Gets the min_zoom of this ConquestApiConfigLeafletMapConnection.  # noqa: E501


        :return: The min_zoom of this ConquestApiConfigLeafletMapConnection.  # noqa: E501
        :rtype: float
        """
        return self._min_zoom

    @min_zoom.setter
    def min_zoom(self, min_zoom):
        """Sets the min_zoom of this ConquestApiConfigLeafletMapConnection.


        :param min_zoom: The min_zoom of this ConquestApiConfigLeafletMapConnection.  # noqa: E501
        :type: float
        """

        self._min_zoom = min_zoom

    @property
    def name(self):
        """Gets the name of this ConquestApiConfigLeafletMapConnection.  # noqa: E501


        :return: The name of this ConquestApiConfigLeafletMapConnection.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConquestApiConfigLeafletMapConnection.


        :param name: The name of this ConquestApiConfigLeafletMapConnection.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def properties(self):
        """Gets the properties of this ConquestApiConfigLeafletMapConnection.  # noqa: E501


        :return: The properties of this ConquestApiConfigLeafletMapConnection.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this ConquestApiConfigLeafletMapConnection.


        :param properties: The properties of this ConquestApiConfigLeafletMapConnection.  # noqa: E501
        :type: dict(str, str)
        """

        self._properties = properties

    @property
    def template_url(self):
        """Gets the template_url of this ConquestApiConfigLeafletMapConnection.  # noqa: E501


        :return: The template_url of this ConquestApiConfigLeafletMapConnection.  # noqa: E501
        :rtype: str
        """
        return self._template_url

    @template_url.setter
    def template_url(self, template_url):
        """Sets the template_url of this ConquestApiConfigLeafletMapConnection.


        :param template_url: The template_url of this ConquestApiConfigLeafletMapConnection.  # noqa: E501
        :type: str
        """

        self._template_url = template_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConquestApiConfigLeafletMapConnection, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConquestApiConfigLeafletMapConnection):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ConquestApiConfigLeafletMapConnection):
            return True

        return self.to_dict() != other.to_dict()
