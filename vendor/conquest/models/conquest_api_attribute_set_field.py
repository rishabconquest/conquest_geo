# coding: utf-8

"""
    Conquest API v2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from ..configuration import Configuration


class ConquestApiAttributeSetField(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'caption': 'str',
        'dimension_value': 'ConquestApiAttributeSetDimensionValue',
        'field_name': 'str',
        'hierarchy_value': 'ConquestApiAttributeSetHierarchyValue',
        'list_value': 'ConquestApiAttributeSetListValue',
        'notes': 'str',
        'order': 'int',
        'required': 'bool',
        'simple_value': 'object',
        'weighted_value': 'ConquestApiAttributeSetWeightedValue'
    }

    attribute_map = {
        'caption': 'Caption',
        'dimension_value': 'DimensionValue',
        'field_name': 'FieldName',
        'hierarchy_value': 'HierarchyValue',
        'list_value': 'ListValue',
        'notes': 'Notes',
        'order': 'Order',
        'required': 'Required',
        'simple_value': 'SimpleValue',
        'weighted_value': 'WeightedValue'
    }

    def __init__(self, caption=None, dimension_value=None, field_name=None, hierarchy_value=None, list_value=None, notes=None, order=None, required=None, simple_value=None, weighted_value=None, _configuration=None):  # noqa: E501
        """ConquestApiAttributeSetField - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._caption = None
        self._dimension_value = None
        self._field_name = None
        self._hierarchy_value = None
        self._list_value = None
        self._notes = None
        self._order = None
        self._required = None
        self._simple_value = None
        self._weighted_value = None
        self.discriminator = None

        if caption is not None:
            self.caption = caption
        if dimension_value is not None:
            self.dimension_value = dimension_value
        if field_name is not None:
            self.field_name = field_name
        if hierarchy_value is not None:
            self.hierarchy_value = hierarchy_value
        if list_value is not None:
            self.list_value = list_value
        if notes is not None:
            self.notes = notes
        if order is not None:
            self.order = order
        if required is not None:
            self.required = required
        if simple_value is not None:
            self.simple_value = simple_value
        if weighted_value is not None:
            self.weighted_value = weighted_value

    @property
    def caption(self):
        """Gets the caption of this ConquestApiAttributeSetField.  # noqa: E501


        :return: The caption of this ConquestApiAttributeSetField.  # noqa: E501
        :rtype: str
        """
        return self._caption

    @caption.setter
    def caption(self, caption):
        """Sets the caption of this ConquestApiAttributeSetField.


        :param caption: The caption of this ConquestApiAttributeSetField.  # noqa: E501
        :type: str
        """

        self._caption = caption

    @property
    def dimension_value(self):
        """Gets the dimension_value of this ConquestApiAttributeSetField.  # noqa: E501


        :return: The dimension_value of this ConquestApiAttributeSetField.  # noqa: E501
        :rtype: ConquestApiAttributeSetDimensionValue
        """
        return self._dimension_value

    @dimension_value.setter
    def dimension_value(self, dimension_value):
        """Sets the dimension_value of this ConquestApiAttributeSetField.


        :param dimension_value: The dimension_value of this ConquestApiAttributeSetField.  # noqa: E501
        :type: ConquestApiAttributeSetDimensionValue
        """

        self._dimension_value = dimension_value

    @property
    def field_name(self):
        """Gets the field_name of this ConquestApiAttributeSetField.  # noqa: E501


        :return: The field_name of this ConquestApiAttributeSetField.  # noqa: E501
        :rtype: str
        """
        return self._field_name

    @field_name.setter
    def field_name(self, field_name):
        """Sets the field_name of this ConquestApiAttributeSetField.


        :param field_name: The field_name of this ConquestApiAttributeSetField.  # noqa: E501
        :type: str
        """

        self._field_name = field_name

    @property
    def hierarchy_value(self):
        """Gets the hierarchy_value of this ConquestApiAttributeSetField.  # noqa: E501


        :return: The hierarchy_value of this ConquestApiAttributeSetField.  # noqa: E501
        :rtype: ConquestApiAttributeSetHierarchyValue
        """
        return self._hierarchy_value

    @hierarchy_value.setter
    def hierarchy_value(self, hierarchy_value):
        """Sets the hierarchy_value of this ConquestApiAttributeSetField.


        :param hierarchy_value: The hierarchy_value of this ConquestApiAttributeSetField.  # noqa: E501
        :type: ConquestApiAttributeSetHierarchyValue
        """

        self._hierarchy_value = hierarchy_value

    @property
    def list_value(self):
        """Gets the list_value of this ConquestApiAttributeSetField.  # noqa: E501


        :return: The list_value of this ConquestApiAttributeSetField.  # noqa: E501
        :rtype: ConquestApiAttributeSetListValue
        """
        return self._list_value

    @list_value.setter
    def list_value(self, list_value):
        """Sets the list_value of this ConquestApiAttributeSetField.


        :param list_value: The list_value of this ConquestApiAttributeSetField.  # noqa: E501
        :type: ConquestApiAttributeSetListValue
        """

        self._list_value = list_value

    @property
    def notes(self):
        """Gets the notes of this ConquestApiAttributeSetField.  # noqa: E501


        :return: The notes of this ConquestApiAttributeSetField.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this ConquestApiAttributeSetField.


        :param notes: The notes of this ConquestApiAttributeSetField.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def order(self):
        """Gets the order of this ConquestApiAttributeSetField.  # noqa: E501


        :return: The order of this ConquestApiAttributeSetField.  # noqa: E501
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this ConquestApiAttributeSetField.


        :param order: The order of this ConquestApiAttributeSetField.  # noqa: E501
        :type: int
        """

        self._order = order

    @property
    def required(self):
        """Gets the required of this ConquestApiAttributeSetField.  # noqa: E501


        :return: The required of this ConquestApiAttributeSetField.  # noqa: E501
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this ConquestApiAttributeSetField.


        :param required: The required of this ConquestApiAttributeSetField.  # noqa: E501
        :type: bool
        """

        self._required = required

    @property
    def simple_value(self):
        """Gets the simple_value of this ConquestApiAttributeSetField.  # noqa: E501


        :return: The simple_value of this ConquestApiAttributeSetField.  # noqa: E501
        :rtype: object
        """
        return self._simple_value

    @simple_value.setter
    def simple_value(self, simple_value):
        """Sets the simple_value of this ConquestApiAttributeSetField.


        :param simple_value: The simple_value of this ConquestApiAttributeSetField.  # noqa: E501
        :type: object
        """

        self._simple_value = simple_value

    @property
    def weighted_value(self):
        """Gets the weighted_value of this ConquestApiAttributeSetField.  # noqa: E501


        :return: The weighted_value of this ConquestApiAttributeSetField.  # noqa: E501
        :rtype: ConquestApiAttributeSetWeightedValue
        """
        return self._weighted_value

    @weighted_value.setter
    def weighted_value(self, weighted_value):
        """Sets the weighted_value of this ConquestApiAttributeSetField.


        :param weighted_value: The weighted_value of this ConquestApiAttributeSetField.  # noqa: E501
        :type: ConquestApiAttributeSetWeightedValue
        """

        self._weighted_value = weighted_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConquestApiAttributeSetField, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConquestApiAttributeSetField):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ConquestApiAttributeSetField):
            return True

        return self.to_dict() != other.to_dict()
