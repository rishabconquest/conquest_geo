# coding: utf-8

"""
    Conquest API v2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from ..configuration import Configuration


class ConquestApiCreateAssetCommand(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'asset_description': 'str',
        'parent_id': 'int',
        'proposed': 'bool',
        'type_id': 'int'
    }

    attribute_map = {
        'asset_description': 'AssetDescription',
        'parent_id': 'ParentID',
        'proposed': 'Proposed',
        'type_id': 'TypeID'
    }

    def __init__(self, asset_description=None, parent_id=None, proposed=None, type_id=None, _configuration=None):  # noqa: E501
        """ConquestApiCreateAssetCommand - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._asset_description = None
        self._parent_id = None
        self._proposed = None
        self._type_id = None
        self.discriminator = None

        if asset_description is not None:
            self.asset_description = asset_description
        if parent_id is not None:
            self.parent_id = parent_id
        if proposed is not None:
            self.proposed = proposed
        if type_id is not None:
            self.type_id = type_id

    @property
    def asset_description(self):
        """Gets the asset_description of this ConquestApiCreateAssetCommand.  # noqa: E501


        :return: The asset_description of this ConquestApiCreateAssetCommand.  # noqa: E501
        :rtype: str
        """
        return self._asset_description

    @asset_description.setter
    def asset_description(self, asset_description):
        """Sets the asset_description of this ConquestApiCreateAssetCommand.


        :param asset_description: The asset_description of this ConquestApiCreateAssetCommand.  # noqa: E501
        :type: str
        """

        self._asset_description = asset_description

    @property
    def parent_id(self):
        """Gets the parent_id of this ConquestApiCreateAssetCommand.  # noqa: E501


        :return: The parent_id of this ConquestApiCreateAssetCommand.  # noqa: E501
        :rtype: int
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this ConquestApiCreateAssetCommand.


        :param parent_id: The parent_id of this ConquestApiCreateAssetCommand.  # noqa: E501
        :type: int
        """

        self._parent_id = parent_id

    @property
    def proposed(self):
        """Gets the proposed of this ConquestApiCreateAssetCommand.  # noqa: E501


        :return: The proposed of this ConquestApiCreateAssetCommand.  # noqa: E501
        :rtype: bool
        """
        return self._proposed

    @proposed.setter
    def proposed(self, proposed):
        """Sets the proposed of this ConquestApiCreateAssetCommand.


        :param proposed: The proposed of this ConquestApiCreateAssetCommand.  # noqa: E501
        :type: bool
        """

        self._proposed = proposed

    @property
    def type_id(self):
        """Gets the type_id of this ConquestApiCreateAssetCommand.  # noqa: E501


        :return: The type_id of this ConquestApiCreateAssetCommand.  # noqa: E501
        :rtype: int
        """
        return self._type_id

    @type_id.setter
    def type_id(self, type_id):
        """Sets the type_id of this ConquestApiCreateAssetCommand.


        :param type_id: The type_id of this ConquestApiCreateAssetCommand.  # noqa: E501
        :type: int
        """

        self._type_id = type_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConquestApiCreateAssetCommand, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConquestApiCreateAssetCommand):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ConquestApiCreateAssetCommand):
            return True

        return self.to_dict() != other.to_dict()
