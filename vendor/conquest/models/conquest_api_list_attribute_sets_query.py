# coding: utf-8

"""
    Conquest API v2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from ..configuration import Configuration


class ConquestApiListAttributeSetsQuery(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'attribute_set_keys': 'list[ConquestApiObjectKey]',
        'include_unset_fields': 'bool',
        'object_type': 'ConquestApiObjectType'
    }

    attribute_map = {
        'attribute_set_keys': 'AttributeSetKeys',
        'include_unset_fields': 'IncludeUnsetFields',
        'object_type': 'ObjectType'
    }

    def __init__(self, attribute_set_keys=None, include_unset_fields=None, object_type=None, _configuration=None):  # noqa: E501
        """ConquestApiListAttributeSetsQuery - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._attribute_set_keys = None
        self._include_unset_fields = None
        self._object_type = None
        self.discriminator = None

        if attribute_set_keys is not None:
            self.attribute_set_keys = attribute_set_keys
        if include_unset_fields is not None:
            self.include_unset_fields = include_unset_fields
        if object_type is not None:
            self.object_type = object_type

    @property
    def attribute_set_keys(self):
        """Gets the attribute_set_keys of this ConquestApiListAttributeSetsQuery.  # noqa: E501


        :return: The attribute_set_keys of this ConquestApiListAttributeSetsQuery.  # noqa: E501
        :rtype: list[ConquestApiObjectKey]
        """
        return self._attribute_set_keys

    @attribute_set_keys.setter
    def attribute_set_keys(self, attribute_set_keys):
        """Sets the attribute_set_keys of this ConquestApiListAttributeSetsQuery.


        :param attribute_set_keys: The attribute_set_keys of this ConquestApiListAttributeSetsQuery.  # noqa: E501
        :type: list[ConquestApiObjectKey]
        """

        self._attribute_set_keys = attribute_set_keys

    @property
    def include_unset_fields(self):
        """Gets the include_unset_fields of this ConquestApiListAttributeSetsQuery.  # noqa: E501


        :return: The include_unset_fields of this ConquestApiListAttributeSetsQuery.  # noqa: E501
        :rtype: bool
        """
        return self._include_unset_fields

    @include_unset_fields.setter
    def include_unset_fields(self, include_unset_fields):
        """Sets the include_unset_fields of this ConquestApiListAttributeSetsQuery.


        :param include_unset_fields: The include_unset_fields of this ConquestApiListAttributeSetsQuery.  # noqa: E501
        :type: bool
        """

        self._include_unset_fields = include_unset_fields

    @property
    def object_type(self):
        """Gets the object_type of this ConquestApiListAttributeSetsQuery.  # noqa: E501


        :return: The object_type of this ConquestApiListAttributeSetsQuery.  # noqa: E501
        :rtype: ConquestApiObjectType
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """Sets the object_type of this ConquestApiListAttributeSetsQuery.


        :param object_type: The object_type of this ConquestApiListAttributeSetsQuery.  # noqa: E501
        :type: ConquestApiObjectType
        """

        self._object_type = object_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConquestApiListAttributeSetsQuery, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConquestApiListAttributeSetsQuery):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ConquestApiListAttributeSetsQuery):
            return True

        return self.to_dict() != other.to_dict()
