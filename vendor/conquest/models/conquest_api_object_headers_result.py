# coding: utf-8

"""
    Conquest API v2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from ..configuration import Configuration


class ConquestApiObjectHeadersResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'headers': 'list[ConquestApiObjectHeader]',
        'x_data_is_complete': 'bool',
        'x_related_contexts': 'list[ConquestApiContextDescriptor]'
    }

    attribute_map = {
        'headers': 'Headers',
        'x_data_is_complete': 'X_DataIsComplete',
        'x_related_contexts': 'X_RelatedContexts'
    }

    def __init__(self, headers=None, x_data_is_complete=None, x_related_contexts=None, _configuration=None):  # noqa: E501
        """ConquestApiObjectHeadersResult - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._headers = None
        self._x_data_is_complete = None
        self._x_related_contexts = None
        self.discriminator = None

        if headers is not None:
            self.headers = headers
        if x_data_is_complete is not None:
            self.x_data_is_complete = x_data_is_complete
        if x_related_contexts is not None:
            self.x_related_contexts = x_related_contexts

    @property
    def headers(self):
        """Gets the headers of this ConquestApiObjectHeadersResult.  # noqa: E501


        :return: The headers of this ConquestApiObjectHeadersResult.  # noqa: E501
        :rtype: list[ConquestApiObjectHeader]
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this ConquestApiObjectHeadersResult.


        :param headers: The headers of this ConquestApiObjectHeadersResult.  # noqa: E501
        :type: list[ConquestApiObjectHeader]
        """

        self._headers = headers

    @property
    def x_data_is_complete(self):
        """Gets the x_data_is_complete of this ConquestApiObjectHeadersResult.  # noqa: E501


        :return: The x_data_is_complete of this ConquestApiObjectHeadersResult.  # noqa: E501
        :rtype: bool
        """
        return self._x_data_is_complete

    @x_data_is_complete.setter
    def x_data_is_complete(self, x_data_is_complete):
        """Sets the x_data_is_complete of this ConquestApiObjectHeadersResult.


        :param x_data_is_complete: The x_data_is_complete of this ConquestApiObjectHeadersResult.  # noqa: E501
        :type: bool
        """

        self._x_data_is_complete = x_data_is_complete

    @property
    def x_related_contexts(self):
        """Gets the x_related_contexts of this ConquestApiObjectHeadersResult.  # noqa: E501


        :return: The x_related_contexts of this ConquestApiObjectHeadersResult.  # noqa: E501
        :rtype: list[ConquestApiContextDescriptor]
        """
        return self._x_related_contexts

    @x_related_contexts.setter
    def x_related_contexts(self, x_related_contexts):
        """Sets the x_related_contexts of this ConquestApiObjectHeadersResult.


        :param x_related_contexts: The x_related_contexts of this ConquestApiObjectHeadersResult.  # noqa: E501
        :type: list[ConquestApiContextDescriptor]
        """

        self._x_related_contexts = x_related_contexts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConquestApiObjectHeadersResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConquestApiObjectHeadersResult):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ConquestApiObjectHeadersResult):
            return True

        return self.to_dict() != other.to_dict()
