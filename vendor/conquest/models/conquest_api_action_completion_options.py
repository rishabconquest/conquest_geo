# coding: utf-8

"""
    Conquest API v2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from ..configuration import Configuration


class ConquestApiActionCompletionOptions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action_id': 'int',
        'completed_by': 'str',
        'completion_date': 'datetime',
        'completion_notes': 'str',
        'copy_documents_to_succeeding_actions': 'bool',
        'copy_user_fields_to_succeeding_actions': 'bool',
        'cost': 'ConquestApiDecimalValue',
        'cost_type': 'ConquestApiCostType',
        'cyclic_process': 'ConquestApiCyclicActionCompletionProcess',
        'disposal_process': 'ConquestApiDisposalActionCompletionProcess',
        'log_book_process': 'ConquestApiLogBookActionCompletionProcess',
        'mark_as_completed': 'bool',
        'master_process': 'ConquestApiMasterActionCompletionProcess',
        'response_date': 'datetime',
        'simple_process': 'ConquestApiSimpleActionCompletionProcess',
        'use_defaults_process': 'bool'
    }

    attribute_map = {
        'action_id': 'ActionID',
        'completed_by': 'CompletedBy',
        'completion_date': 'CompletionDate',
        'completion_notes': 'CompletionNotes',
        'copy_documents_to_succeeding_actions': 'CopyDocumentsToSucceedingActions',
        'copy_user_fields_to_succeeding_actions': 'CopyUserFieldsToSucceedingActions',
        'cost': 'Cost',
        'cost_type': 'CostType',
        'cyclic_process': 'CyclicProcess',
        'disposal_process': 'DisposalProcess',
        'log_book_process': 'LogBookProcess',
        'mark_as_completed': 'MarkAsCompleted',
        'master_process': 'MasterProcess',
        'response_date': 'ResponseDate',
        'simple_process': 'SimpleProcess',
        'use_defaults_process': 'UseDefaultsProcess'
    }

    def __init__(self, action_id=None, completed_by=None, completion_date=None, completion_notes=None, copy_documents_to_succeeding_actions=None, copy_user_fields_to_succeeding_actions=None, cost=None, cost_type=None, cyclic_process=None, disposal_process=None, log_book_process=None, mark_as_completed=None, master_process=None, response_date=None, simple_process=None, use_defaults_process=None, _configuration=None):  # noqa: E501
        """ConquestApiActionCompletionOptions - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._action_id = None
        self._completed_by = None
        self._completion_date = None
        self._completion_notes = None
        self._copy_documents_to_succeeding_actions = None
        self._copy_user_fields_to_succeeding_actions = None
        self._cost = None
        self._cost_type = None
        self._cyclic_process = None
        self._disposal_process = None
        self._log_book_process = None
        self._mark_as_completed = None
        self._master_process = None
        self._response_date = None
        self._simple_process = None
        self._use_defaults_process = None
        self.discriminator = None

        if action_id is not None:
            self.action_id = action_id
        if completed_by is not None:
            self.completed_by = completed_by
        if completion_date is not None:
            self.completion_date = completion_date
        if completion_notes is not None:
            self.completion_notes = completion_notes
        if copy_documents_to_succeeding_actions is not None:
            self.copy_documents_to_succeeding_actions = copy_documents_to_succeeding_actions
        if copy_user_fields_to_succeeding_actions is not None:
            self.copy_user_fields_to_succeeding_actions = copy_user_fields_to_succeeding_actions
        if cost is not None:
            self.cost = cost
        if cost_type is not None:
            self.cost_type = cost_type
        if cyclic_process is not None:
            self.cyclic_process = cyclic_process
        if disposal_process is not None:
            self.disposal_process = disposal_process
        if log_book_process is not None:
            self.log_book_process = log_book_process
        if mark_as_completed is not None:
            self.mark_as_completed = mark_as_completed
        if master_process is not None:
            self.master_process = master_process
        if response_date is not None:
            self.response_date = response_date
        if simple_process is not None:
            self.simple_process = simple_process
        if use_defaults_process is not None:
            self.use_defaults_process = use_defaults_process

    @property
    def action_id(self):
        """Gets the action_id of this ConquestApiActionCompletionOptions.  # noqa: E501


        :return: The action_id of this ConquestApiActionCompletionOptions.  # noqa: E501
        :rtype: int
        """
        return self._action_id

    @action_id.setter
    def action_id(self, action_id):
        """Sets the action_id of this ConquestApiActionCompletionOptions.


        :param action_id: The action_id of this ConquestApiActionCompletionOptions.  # noqa: E501
        :type: int
        """

        self._action_id = action_id

    @property
    def completed_by(self):
        """Gets the completed_by of this ConquestApiActionCompletionOptions.  # noqa: E501

        CompletedBy is used to choose a different user to the one completing the action.  # noqa: E501

        :return: The completed_by of this ConquestApiActionCompletionOptions.  # noqa: E501
        :rtype: str
        """
        return self._completed_by

    @completed_by.setter
    def completed_by(self, completed_by):
        """Sets the completed_by of this ConquestApiActionCompletionOptions.

        CompletedBy is used to choose a different user to the one completing the action.  # noqa: E501

        :param completed_by: The completed_by of this ConquestApiActionCompletionOptions.  # noqa: E501
        :type: str
        """

        self._completed_by = completed_by

    @property
    def completion_date(self):
        """Gets the completion_date of this ConquestApiActionCompletionOptions.  # noqa: E501


        :return: The completion_date of this ConquestApiActionCompletionOptions.  # noqa: E501
        :rtype: datetime
        """
        return self._completion_date

    @completion_date.setter
    def completion_date(self, completion_date):
        """Sets the completion_date of this ConquestApiActionCompletionOptions.


        :param completion_date: The completion_date of this ConquestApiActionCompletionOptions.  # noqa: E501
        :type: datetime
        """

        self._completion_date = completion_date

    @property
    def completion_notes(self):
        """Gets the completion_notes of this ConquestApiActionCompletionOptions.  # noqa: E501


        :return: The completion_notes of this ConquestApiActionCompletionOptions.  # noqa: E501
        :rtype: str
        """
        return self._completion_notes

    @completion_notes.setter
    def completion_notes(self, completion_notes):
        """Sets the completion_notes of this ConquestApiActionCompletionOptions.


        :param completion_notes: The completion_notes of this ConquestApiActionCompletionOptions.  # noqa: E501
        :type: str
        """

        self._completion_notes = completion_notes

    @property
    def copy_documents_to_succeeding_actions(self):
        """Gets the copy_documents_to_succeeding_actions of this ConquestApiActionCompletionOptions.  # noqa: E501


        :return: The copy_documents_to_succeeding_actions of this ConquestApiActionCompletionOptions.  # noqa: E501
        :rtype: bool
        """
        return self._copy_documents_to_succeeding_actions

    @copy_documents_to_succeeding_actions.setter
    def copy_documents_to_succeeding_actions(self, copy_documents_to_succeeding_actions):
        """Sets the copy_documents_to_succeeding_actions of this ConquestApiActionCompletionOptions.


        :param copy_documents_to_succeeding_actions: The copy_documents_to_succeeding_actions of this ConquestApiActionCompletionOptions.  # noqa: E501
        :type: bool
        """

        self._copy_documents_to_succeeding_actions = copy_documents_to_succeeding_actions

    @property
    def copy_user_fields_to_succeeding_actions(self):
        """Gets the copy_user_fields_to_succeeding_actions of this ConquestApiActionCompletionOptions.  # noqa: E501


        :return: The copy_user_fields_to_succeeding_actions of this ConquestApiActionCompletionOptions.  # noqa: E501
        :rtype: bool
        """
        return self._copy_user_fields_to_succeeding_actions

    @copy_user_fields_to_succeeding_actions.setter
    def copy_user_fields_to_succeeding_actions(self, copy_user_fields_to_succeeding_actions):
        """Sets the copy_user_fields_to_succeeding_actions of this ConquestApiActionCompletionOptions.


        :param copy_user_fields_to_succeeding_actions: The copy_user_fields_to_succeeding_actions of this ConquestApiActionCompletionOptions.  # noqa: E501
        :type: bool
        """

        self._copy_user_fields_to_succeeding_actions = copy_user_fields_to_succeeding_actions

    @property
    def cost(self):
        """Gets the cost of this ConquestApiActionCompletionOptions.  # noqa: E501


        :return: The cost of this ConquestApiActionCompletionOptions.  # noqa: E501
        :rtype: ConquestApiDecimalValue
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this ConquestApiActionCompletionOptions.


        :param cost: The cost of this ConquestApiActionCompletionOptions.  # noqa: E501
        :type: ConquestApiDecimalValue
        """

        self._cost = cost

    @property
    def cost_type(self):
        """Gets the cost_type of this ConquestApiActionCompletionOptions.  # noqa: E501


        :return: The cost_type of this ConquestApiActionCompletionOptions.  # noqa: E501
        :rtype: ConquestApiCostType
        """
        return self._cost_type

    @cost_type.setter
    def cost_type(self, cost_type):
        """Sets the cost_type of this ConquestApiActionCompletionOptions.


        :param cost_type: The cost_type of this ConquestApiActionCompletionOptions.  # noqa: E501
        :type: ConquestApiCostType
        """

        self._cost_type = cost_type

    @property
    def cyclic_process(self):
        """Gets the cyclic_process of this ConquestApiActionCompletionOptions.  # noqa: E501


        :return: The cyclic_process of this ConquestApiActionCompletionOptions.  # noqa: E501
        :rtype: ConquestApiCyclicActionCompletionProcess
        """
        return self._cyclic_process

    @cyclic_process.setter
    def cyclic_process(self, cyclic_process):
        """Sets the cyclic_process of this ConquestApiActionCompletionOptions.


        :param cyclic_process: The cyclic_process of this ConquestApiActionCompletionOptions.  # noqa: E501
        :type: ConquestApiCyclicActionCompletionProcess
        """

        self._cyclic_process = cyclic_process

    @property
    def disposal_process(self):
        """Gets the disposal_process of this ConquestApiActionCompletionOptions.  # noqa: E501


        :return: The disposal_process of this ConquestApiActionCompletionOptions.  # noqa: E501
        :rtype: ConquestApiDisposalActionCompletionProcess
        """
        return self._disposal_process

    @disposal_process.setter
    def disposal_process(self, disposal_process):
        """Sets the disposal_process of this ConquestApiActionCompletionOptions.


        :param disposal_process: The disposal_process of this ConquestApiActionCompletionOptions.  # noqa: E501
        :type: ConquestApiDisposalActionCompletionProcess
        """

        self._disposal_process = disposal_process

    @property
    def log_book_process(self):
        """Gets the log_book_process of this ConquestApiActionCompletionOptions.  # noqa: E501


        :return: The log_book_process of this ConquestApiActionCompletionOptions.  # noqa: E501
        :rtype: ConquestApiLogBookActionCompletionProcess
        """
        return self._log_book_process

    @log_book_process.setter
    def log_book_process(self, log_book_process):
        """Sets the log_book_process of this ConquestApiActionCompletionOptions.


        :param log_book_process: The log_book_process of this ConquestApiActionCompletionOptions.  # noqa: E501
        :type: ConquestApiLogBookActionCompletionProcess
        """

        self._log_book_process = log_book_process

    @property
    def mark_as_completed(self):
        """Gets the mark_as_completed of this ConquestApiActionCompletionOptions.  # noqa: E501


        :return: The mark_as_completed of this ConquestApiActionCompletionOptions.  # noqa: E501
        :rtype: bool
        """
        return self._mark_as_completed

    @mark_as_completed.setter
    def mark_as_completed(self, mark_as_completed):
        """Sets the mark_as_completed of this ConquestApiActionCompletionOptions.


        :param mark_as_completed: The mark_as_completed of this ConquestApiActionCompletionOptions.  # noqa: E501
        :type: bool
        """

        self._mark_as_completed = mark_as_completed

    @property
    def master_process(self):
        """Gets the master_process of this ConquestApiActionCompletionOptions.  # noqa: E501


        :return: The master_process of this ConquestApiActionCompletionOptions.  # noqa: E501
        :rtype: ConquestApiMasterActionCompletionProcess
        """
        return self._master_process

    @master_process.setter
    def master_process(self, master_process):
        """Sets the master_process of this ConquestApiActionCompletionOptions.


        :param master_process: The master_process of this ConquestApiActionCompletionOptions.  # noqa: E501
        :type: ConquestApiMasterActionCompletionProcess
        """

        self._master_process = master_process

    @property
    def response_date(self):
        """Gets the response_date of this ConquestApiActionCompletionOptions.  # noqa: E501


        :return: The response_date of this ConquestApiActionCompletionOptions.  # noqa: E501
        :rtype: datetime
        """
        return self._response_date

    @response_date.setter
    def response_date(self, response_date):
        """Sets the response_date of this ConquestApiActionCompletionOptions.


        :param response_date: The response_date of this ConquestApiActionCompletionOptions.  # noqa: E501
        :type: datetime
        """

        self._response_date = response_date

    @property
    def simple_process(self):
        """Gets the simple_process of this ConquestApiActionCompletionOptions.  # noqa: E501


        :return: The simple_process of this ConquestApiActionCompletionOptions.  # noqa: E501
        :rtype: ConquestApiSimpleActionCompletionProcess
        """
        return self._simple_process

    @simple_process.setter
    def simple_process(self, simple_process):
        """Sets the simple_process of this ConquestApiActionCompletionOptions.


        :param simple_process: The simple_process of this ConquestApiActionCompletionOptions.  # noqa: E501
        :type: ConquestApiSimpleActionCompletionProcess
        """

        self._simple_process = simple_process

    @property
    def use_defaults_process(self):
        """Gets the use_defaults_process of this ConquestApiActionCompletionOptions.  # noqa: E501


        :return: The use_defaults_process of this ConquestApiActionCompletionOptions.  # noqa: E501
        :rtype: bool
        """
        return self._use_defaults_process

    @use_defaults_process.setter
    def use_defaults_process(self, use_defaults_process):
        """Sets the use_defaults_process of this ConquestApiActionCompletionOptions.


        :param use_defaults_process: The use_defaults_process of this ConquestApiActionCompletionOptions.  # noqa: E501
        :type: bool
        """

        self._use_defaults_process = use_defaults_process

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConquestApiActionCompletionOptions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConquestApiActionCompletionOptions):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ConquestApiActionCompletionOptions):
            return True

        return self.to_dict() != other.to_dict()
