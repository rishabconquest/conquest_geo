# coding: utf-8

"""
    Conquest API v2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from ..configuration import Configuration


class ConquestApiContextDescriptor(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'context': 'str',
        'parameter_object_type': 'ConquestApiObjectType',
        'parameter_object_type2': 'ConquestApiObjectType',
        'predefined_context_criteria': 'list[ConquestApiPredefinedContextCriteria]',
        'result_object_type': 'ConquestApiObjectType',
        'system': 'bool'
    }

    attribute_map = {
        'context': 'Context',
        'parameter_object_type': 'ParameterObjectType',
        'parameter_object_type2': 'ParameterObjectType2',
        'predefined_context_criteria': 'PredefinedContextCriteria',
        'result_object_type': 'ResultObjectType',
        'system': 'System'
    }

    def __init__(self, context=None, parameter_object_type=None, parameter_object_type2=None, predefined_context_criteria=None, result_object_type=None, system=None, _configuration=None):  # noqa: E501
        """ConquestApiContextDescriptor - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._context = None
        self._parameter_object_type = None
        self._parameter_object_type2 = None
        self._predefined_context_criteria = None
        self._result_object_type = None
        self._system = None
        self.discriminator = None

        if context is not None:
            self.context = context
        if parameter_object_type is not None:
            self.parameter_object_type = parameter_object_type
        if parameter_object_type2 is not None:
            self.parameter_object_type2 = parameter_object_type2
        if predefined_context_criteria is not None:
            self.predefined_context_criteria = predefined_context_criteria
        if result_object_type is not None:
            self.result_object_type = result_object_type
        if system is not None:
            self.system = system

    @property
    def context(self):
        """Gets the context of this ConquestApiContextDescriptor.  # noqa: E501


        :return: The context of this ConquestApiContextDescriptor.  # noqa: E501
        :rtype: str
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this ConquestApiContextDescriptor.


        :param context: The context of this ConquestApiContextDescriptor.  # noqa: E501
        :type: str
        """

        self._context = context

    @property
    def parameter_object_type(self):
        """Gets the parameter_object_type of this ConquestApiContextDescriptor.  # noqa: E501


        :return: The parameter_object_type of this ConquestApiContextDescriptor.  # noqa: E501
        :rtype: ConquestApiObjectType
        """
        return self._parameter_object_type

    @parameter_object_type.setter
    def parameter_object_type(self, parameter_object_type):
        """Sets the parameter_object_type of this ConquestApiContextDescriptor.


        :param parameter_object_type: The parameter_object_type of this ConquestApiContextDescriptor.  # noqa: E501
        :type: ConquestApiObjectType
        """

        self._parameter_object_type = parameter_object_type

    @property
    def parameter_object_type2(self):
        """Gets the parameter_object_type2 of this ConquestApiContextDescriptor.  # noqa: E501

        ParameterObjectType2 is the ObjectType of the parameter that the result is related to If ParameterObjectType2 = None, it will be ignored.  # noqa: E501

        :return: The parameter_object_type2 of this ConquestApiContextDescriptor.  # noqa: E501
        :rtype: ConquestApiObjectType
        """
        return self._parameter_object_type2

    @parameter_object_type2.setter
    def parameter_object_type2(self, parameter_object_type2):
        """Sets the parameter_object_type2 of this ConquestApiContextDescriptor.

        ParameterObjectType2 is the ObjectType of the parameter that the result is related to If ParameterObjectType2 = None, it will be ignored.  # noqa: E501

        :param parameter_object_type2: The parameter_object_type2 of this ConquestApiContextDescriptor.  # noqa: E501
        :type: ConquestApiObjectType
        """

        self._parameter_object_type2 = parameter_object_type2

    @property
    def predefined_context_criteria(self):
        """Gets the predefined_context_criteria of this ConquestApiContextDescriptor.  # noqa: E501

        A Context can have some pre-defined criteria that the user can enable or disable when parameterising a Find query.  For example, the related actions Find query can be parameterised with the pre-defined criteria 'Completed' and 'Not Completed'  # noqa: E501

        :return: The predefined_context_criteria of this ConquestApiContextDescriptor.  # noqa: E501
        :rtype: list[ConquestApiPredefinedContextCriteria]
        """
        return self._predefined_context_criteria

    @predefined_context_criteria.setter
    def predefined_context_criteria(self, predefined_context_criteria):
        """Sets the predefined_context_criteria of this ConquestApiContextDescriptor.

        A Context can have some pre-defined criteria that the user can enable or disable when parameterising a Find query.  For example, the related actions Find query can be parameterised with the pre-defined criteria 'Completed' and 'Not Completed'  # noqa: E501

        :param predefined_context_criteria: The predefined_context_criteria of this ConquestApiContextDescriptor.  # noqa: E501
        :type: list[ConquestApiPredefinedContextCriteria]
        """

        self._predefined_context_criteria = predefined_context_criteria

    @property
    def result_object_type(self):
        """Gets the result_object_type of this ConquestApiContextDescriptor.  # noqa: E501


        :return: The result_object_type of this ConquestApiContextDescriptor.  # noqa: E501
        :rtype: ConquestApiObjectType
        """
        return self._result_object_type

    @result_object_type.setter
    def result_object_type(self, result_object_type):
        """Sets the result_object_type of this ConquestApiContextDescriptor.


        :param result_object_type: The result_object_type of this ConquestApiContextDescriptor.  # noqa: E501
        :type: ConquestApiObjectType
        """

        self._result_object_type = result_object_type

    @property
    def system(self):
        """Gets the system of this ConquestApiContextDescriptor.  # noqa: E501


        :return: The system of this ConquestApiContextDescriptor.  # noqa: E501
        :rtype: bool
        """
        return self._system

    @system.setter
    def system(self, system):
        """Sets the system of this ConquestApiContextDescriptor.


        :param system: The system of this ConquestApiContextDescriptor.  # noqa: E501
        :type: bool
        """

        self._system = system

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConquestApiContextDescriptor, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConquestApiContextDescriptor):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ConquestApiContextDescriptor):
            return True

        return self.to_dict() != other.to_dict()
