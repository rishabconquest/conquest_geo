# coding: utf-8

"""
    Conquest API v2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from ..configuration import Configuration


class ConquestApigpkgContents(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'data_type': 'str',
        'description': 'str',
        'identifier': 'str',
        'last_change': 'datetime',
        'max_x': 'float',
        'max_y': 'float',
        'min_x': 'float',
        'min_y': 'float',
        'srs_id': 'int',
        'table_name': 'str'
    }

    attribute_map = {
        'data_type': 'data_type',
        'description': 'description',
        'identifier': 'identifier',
        'last_change': 'last_change',
        'max_x': 'max_x',
        'max_y': 'max_y',
        'min_x': 'min_x',
        'min_y': 'min_y',
        'srs_id': 'srs_id',
        'table_name': 'table_name'
    }

    def __init__(self, data_type=None, description=None, identifier=None, last_change=None, max_x=None, max_y=None, min_x=None, min_y=None, srs_id=None, table_name=None, _configuration=None):  # noqa: E501
        """ConquestApigpkgContents - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._data_type = None
        self._description = None
        self._identifier = None
        self._last_change = None
        self._max_x = None
        self._max_y = None
        self._min_x = None
        self._min_y = None
        self._srs_id = None
        self._table_name = None
        self.discriminator = None

        if data_type is not None:
            self.data_type = data_type
        if description is not None:
            self.description = description
        if identifier is not None:
            self.identifier = identifier
        if last_change is not None:
            self.last_change = last_change
        if max_x is not None:
            self.max_x = max_x
        if max_y is not None:
            self.max_y = max_y
        if min_x is not None:
            self.min_x = min_x
        if min_y is not None:
            self.min_y = min_y
        if srs_id is not None:
            self.srs_id = srs_id
        if table_name is not None:
            self.table_name = table_name

    @property
    def data_type(self):
        """Gets the data_type of this ConquestApigpkgContents.  # noqa: E501


        :return: The data_type of this ConquestApigpkgContents.  # noqa: E501
        :rtype: str
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this ConquestApigpkgContents.


        :param data_type: The data_type of this ConquestApigpkgContents.  # noqa: E501
        :type: str
        """

        self._data_type = data_type

    @property
    def description(self):
        """Gets the description of this ConquestApigpkgContents.  # noqa: E501


        :return: The description of this ConquestApigpkgContents.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ConquestApigpkgContents.


        :param description: The description of this ConquestApigpkgContents.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def identifier(self):
        """Gets the identifier of this ConquestApigpkgContents.  # noqa: E501


        :return: The identifier of this ConquestApigpkgContents.  # noqa: E501
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this ConquestApigpkgContents.


        :param identifier: The identifier of this ConquestApigpkgContents.  # noqa: E501
        :type: str
        """

        self._identifier = identifier

    @property
    def last_change(self):
        """Gets the last_change of this ConquestApigpkgContents.  # noqa: E501


        :return: The last_change of this ConquestApigpkgContents.  # noqa: E501
        :rtype: datetime
        """
        return self._last_change

    @last_change.setter
    def last_change(self, last_change):
        """Sets the last_change of this ConquestApigpkgContents.


        :param last_change: The last_change of this ConquestApigpkgContents.  # noqa: E501
        :type: datetime
        """

        self._last_change = last_change

    @property
    def max_x(self):
        """Gets the max_x of this ConquestApigpkgContents.  # noqa: E501


        :return: The max_x of this ConquestApigpkgContents.  # noqa: E501
        :rtype: float
        """
        return self._max_x

    @max_x.setter
    def max_x(self, max_x):
        """Sets the max_x of this ConquestApigpkgContents.


        :param max_x: The max_x of this ConquestApigpkgContents.  # noqa: E501
        :type: float
        """

        self._max_x = max_x

    @property
    def max_y(self):
        """Gets the max_y of this ConquestApigpkgContents.  # noqa: E501


        :return: The max_y of this ConquestApigpkgContents.  # noqa: E501
        :rtype: float
        """
        return self._max_y

    @max_y.setter
    def max_y(self, max_y):
        """Sets the max_y of this ConquestApigpkgContents.


        :param max_y: The max_y of this ConquestApigpkgContents.  # noqa: E501
        :type: float
        """

        self._max_y = max_y

    @property
    def min_x(self):
        """Gets the min_x of this ConquestApigpkgContents.  # noqa: E501


        :return: The min_x of this ConquestApigpkgContents.  # noqa: E501
        :rtype: float
        """
        return self._min_x

    @min_x.setter
    def min_x(self, min_x):
        """Sets the min_x of this ConquestApigpkgContents.


        :param min_x: The min_x of this ConquestApigpkgContents.  # noqa: E501
        :type: float
        """

        self._min_x = min_x

    @property
    def min_y(self):
        """Gets the min_y of this ConquestApigpkgContents.  # noqa: E501


        :return: The min_y of this ConquestApigpkgContents.  # noqa: E501
        :rtype: float
        """
        return self._min_y

    @min_y.setter
    def min_y(self, min_y):
        """Sets the min_y of this ConquestApigpkgContents.


        :param min_y: The min_y of this ConquestApigpkgContents.  # noqa: E501
        :type: float
        """

        self._min_y = min_y

    @property
    def srs_id(self):
        """Gets the srs_id of this ConquestApigpkgContents.  # noqa: E501


        :return: The srs_id of this ConquestApigpkgContents.  # noqa: E501
        :rtype: int
        """
        return self._srs_id

    @srs_id.setter
    def srs_id(self, srs_id):
        """Sets the srs_id of this ConquestApigpkgContents.


        :param srs_id: The srs_id of this ConquestApigpkgContents.  # noqa: E501
        :type: int
        """

        self._srs_id = srs_id

    @property
    def table_name(self):
        """Gets the table_name of this ConquestApigpkgContents.  # noqa: E501


        :return: The table_name of this ConquestApigpkgContents.  # noqa: E501
        :rtype: str
        """
        return self._table_name

    @table_name.setter
    def table_name(self, table_name):
        """Sets the table_name of this ConquestApigpkgContents.


        :param table_name: The table_name of this ConquestApigpkgContents.  # noqa: E501
        :type: str
        """

        self._table_name = table_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConquestApigpkgContents, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConquestApigpkgContents):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ConquestApigpkgContents):
            return True

        return self.to_dict() != other.to_dict()
