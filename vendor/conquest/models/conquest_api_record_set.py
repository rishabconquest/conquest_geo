# coding: utf-8

"""
    Conquest API v2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from ..configuration import Configuration


class ConquestApiRecordSet(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'columns': 'list[ConquestApiRecordColumn]',
        'context_descriptor': 'ConquestApiContextDescriptor',
        'context_descriptors_for_groups': 'list[ConquestApiContextDescriptor]',
        'cursor': 'ConquestApiRecordSetCursor',
        'rows': 'list[ConquestApiRecordRow]'
    }

    attribute_map = {
        'columns': 'columns',
        'context_descriptor': 'contextDescriptor',
        'context_descriptors_for_groups': 'contextDescriptorsForGroups',
        'cursor': 'cursor',
        'rows': 'rows'
    }

    def __init__(self, columns=None, context_descriptor=None, context_descriptors_for_groups=None, cursor=None, rows=None, _configuration=None):  # noqa: E501
        """ConquestApiRecordSet - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._columns = None
        self._context_descriptor = None
        self._context_descriptors_for_groups = None
        self._cursor = None
        self._rows = None
        self.discriminator = None

        if columns is not None:
            self.columns = columns
        if context_descriptor is not None:
            self.context_descriptor = context_descriptor
        if context_descriptors_for_groups is not None:
            self.context_descriptors_for_groups = context_descriptors_for_groups
        if cursor is not None:
            self.cursor = cursor
        if rows is not None:
            self.rows = rows

    @property
    def columns(self):
        """Gets the columns of this ConquestApiRecordSet.  # noqa: E501


        :return: The columns of this ConquestApiRecordSet.  # noqa: E501
        :rtype: list[ConquestApiRecordColumn]
        """
        return self._columns

    @columns.setter
    def columns(self, columns):
        """Sets the columns of this ConquestApiRecordSet.


        :param columns: The columns of this ConquestApiRecordSet.  # noqa: E501
        :type: list[ConquestApiRecordColumn]
        """

        self._columns = columns

    @property
    def context_descriptor(self):
        """Gets the context_descriptor of this ConquestApiRecordSet.  # noqa: E501


        :return: The context_descriptor of this ConquestApiRecordSet.  # noqa: E501
        :rtype: ConquestApiContextDescriptor
        """
        return self._context_descriptor

    @context_descriptor.setter
    def context_descriptor(self, context_descriptor):
        """Sets the context_descriptor of this ConquestApiRecordSet.


        :param context_descriptor: The context_descriptor of this ConquestApiRecordSet.  # noqa: E501
        :type: ConquestApiContextDescriptor
        """

        self._context_descriptor = context_descriptor

    @property
    def context_descriptors_for_groups(self):
        """Gets the context_descriptors_for_groups of this ConquestApiRecordSet.  # noqa: E501


        :return: The context_descriptors_for_groups of this ConquestApiRecordSet.  # noqa: E501
        :rtype: list[ConquestApiContextDescriptor]
        """
        return self._context_descriptors_for_groups

    @context_descriptors_for_groups.setter
    def context_descriptors_for_groups(self, context_descriptors_for_groups):
        """Sets the context_descriptors_for_groups of this ConquestApiRecordSet.


        :param context_descriptors_for_groups: The context_descriptors_for_groups of this ConquestApiRecordSet.  # noqa: E501
        :type: list[ConquestApiContextDescriptor]
        """

        self._context_descriptors_for_groups = context_descriptors_for_groups

    @property
    def cursor(self):
        """Gets the cursor of this ConquestApiRecordSet.  # noqa: E501


        :return: The cursor of this ConquestApiRecordSet.  # noqa: E501
        :rtype: ConquestApiRecordSetCursor
        """
        return self._cursor

    @cursor.setter
    def cursor(self, cursor):
        """Sets the cursor of this ConquestApiRecordSet.


        :param cursor: The cursor of this ConquestApiRecordSet.  # noqa: E501
        :type: ConquestApiRecordSetCursor
        """

        self._cursor = cursor

    @property
    def rows(self):
        """Gets the rows of this ConquestApiRecordSet.  # noqa: E501


        :return: The rows of this ConquestApiRecordSet.  # noqa: E501
        :rtype: list[ConquestApiRecordRow]
        """
        return self._rows

    @rows.setter
    def rows(self, rows):
        """Sets the rows of this ConquestApiRecordSet.


        :param rows: The rows of this ConquestApiRecordSet.  # noqa: E501
        :type: list[ConquestApiRecordRow]
        """

        self._rows = rows

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConquestApiRecordSet, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConquestApiRecordSet):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ConquestApiRecordSet):
            return True

        return self.to_dict() != other.to_dict()
