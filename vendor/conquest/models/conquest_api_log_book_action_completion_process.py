# coding: utf-8

"""
    Conquest API v2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from ..configuration import Configuration


class ConquestApiLogBookActionCompletionProcess(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'next_log_action_due_date': 'datetime',
        'next_log_meter_reading': 'float',
        'next_log_std_action_id': 'int'
    }

    attribute_map = {
        'next_log_action_due_date': 'NextLogActionDueDate',
        'next_log_meter_reading': 'NextLogMeterReading',
        'next_log_std_action_id': 'NextLogStdActionID'
    }

    def __init__(self, next_log_action_due_date=None, next_log_meter_reading=None, next_log_std_action_id=None, _configuration=None):  # noqa: E501
        """ConquestApiLogBookActionCompletionProcess - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._next_log_action_due_date = None
        self._next_log_meter_reading = None
        self._next_log_std_action_id = None
        self.discriminator = None

        if next_log_action_due_date is not None:
            self.next_log_action_due_date = next_log_action_due_date
        if next_log_meter_reading is not None:
            self.next_log_meter_reading = next_log_meter_reading
        if next_log_std_action_id is not None:
            self.next_log_std_action_id = next_log_std_action_id

    @property
    def next_log_action_due_date(self):
        """Gets the next_log_action_due_date of this ConquestApiLogBookActionCompletionProcess.  # noqa: E501


        :return: The next_log_action_due_date of this ConquestApiLogBookActionCompletionProcess.  # noqa: E501
        :rtype: datetime
        """
        return self._next_log_action_due_date

    @next_log_action_due_date.setter
    def next_log_action_due_date(self, next_log_action_due_date):
        """Sets the next_log_action_due_date of this ConquestApiLogBookActionCompletionProcess.


        :param next_log_action_due_date: The next_log_action_due_date of this ConquestApiLogBookActionCompletionProcess.  # noqa: E501
        :type: datetime
        """

        self._next_log_action_due_date = next_log_action_due_date

    @property
    def next_log_meter_reading(self):
        """Gets the next_log_meter_reading of this ConquestApiLogBookActionCompletionProcess.  # noqa: E501


        :return: The next_log_meter_reading of this ConquestApiLogBookActionCompletionProcess.  # noqa: E501
        :rtype: float
        """
        return self._next_log_meter_reading

    @next_log_meter_reading.setter
    def next_log_meter_reading(self, next_log_meter_reading):
        """Sets the next_log_meter_reading of this ConquestApiLogBookActionCompletionProcess.


        :param next_log_meter_reading: The next_log_meter_reading of this ConquestApiLogBookActionCompletionProcess.  # noqa: E501
        :type: float
        """

        self._next_log_meter_reading = next_log_meter_reading

    @property
    def next_log_std_action_id(self):
        """Gets the next_log_std_action_id of this ConquestApiLogBookActionCompletionProcess.  # noqa: E501


        :return: The next_log_std_action_id of this ConquestApiLogBookActionCompletionProcess.  # noqa: E501
        :rtype: int
        """
        return self._next_log_std_action_id

    @next_log_std_action_id.setter
    def next_log_std_action_id(self, next_log_std_action_id):
        """Sets the next_log_std_action_id of this ConquestApiLogBookActionCompletionProcess.


        :param next_log_std_action_id: The next_log_std_action_id of this ConquestApiLogBookActionCompletionProcess.  # noqa: E501
        :type: int
        """

        self._next_log_std_action_id = next_log_std_action_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConquestApiLogBookActionCompletionProcess, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConquestApiLogBookActionCompletionProcess):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ConquestApiLogBookActionCompletionProcess):
            return True

        return self.to_dict() != other.to_dict()
