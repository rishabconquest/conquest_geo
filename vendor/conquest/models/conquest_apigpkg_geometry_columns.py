# coding: utf-8

"""
    Conquest API v2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from ..configuration import Configuration


class ConquestApigpkgGeometryColumns(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'column_name': 'str',
        'geometry_type_name': 'str',
        'm': 'int',
        'srs_id': 'int',
        'table_name': 'str',
        'z': 'int'
    }

    attribute_map = {
        'column_name': 'column_name',
        'geometry_type_name': 'geometry_type_name',
        'm': 'm',
        'srs_id': 'srs_id',
        'table_name': 'table_name',
        'z': 'z'
    }

    def __init__(self, column_name=None, geometry_type_name=None, m=None, srs_id=None, table_name=None, z=None, _configuration=None):  # noqa: E501
        """ConquestApigpkgGeometryColumns - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._column_name = None
        self._geometry_type_name = None
        self._m = None
        self._srs_id = None
        self._table_name = None
        self._z = None
        self.discriminator = None

        if column_name is not None:
            self.column_name = column_name
        if geometry_type_name is not None:
            self.geometry_type_name = geometry_type_name
        if m is not None:
            self.m = m
        if srs_id is not None:
            self.srs_id = srs_id
        if table_name is not None:
            self.table_name = table_name
        if z is not None:
            self.z = z

    @property
    def column_name(self):
        """Gets the column_name of this ConquestApigpkgGeometryColumns.  # noqa: E501


        :return: The column_name of this ConquestApigpkgGeometryColumns.  # noqa: E501
        :rtype: str
        """
        return self._column_name

    @column_name.setter
    def column_name(self, column_name):
        """Sets the column_name of this ConquestApigpkgGeometryColumns.


        :param column_name: The column_name of this ConquestApigpkgGeometryColumns.  # noqa: E501
        :type: str
        """

        self._column_name = column_name

    @property
    def geometry_type_name(self):
        """Gets the geometry_type_name of this ConquestApigpkgGeometryColumns.  # noqa: E501


        :return: The geometry_type_name of this ConquestApigpkgGeometryColumns.  # noqa: E501
        :rtype: str
        """
        return self._geometry_type_name

    @geometry_type_name.setter
    def geometry_type_name(self, geometry_type_name):
        """Sets the geometry_type_name of this ConquestApigpkgGeometryColumns.


        :param geometry_type_name: The geometry_type_name of this ConquestApigpkgGeometryColumns.  # noqa: E501
        :type: str
        """

        self._geometry_type_name = geometry_type_name

    @property
    def m(self):
        """Gets the m of this ConquestApigpkgGeometryColumns.  # noqa: E501


        :return: The m of this ConquestApigpkgGeometryColumns.  # noqa: E501
        :rtype: int
        """
        return self._m

    @m.setter
    def m(self, m):
        """Sets the m of this ConquestApigpkgGeometryColumns.


        :param m: The m of this ConquestApigpkgGeometryColumns.  # noqa: E501
        :type: int
        """

        self._m = m

    @property
    def srs_id(self):
        """Gets the srs_id of this ConquestApigpkgGeometryColumns.  # noqa: E501


        :return: The srs_id of this ConquestApigpkgGeometryColumns.  # noqa: E501
        :rtype: int
        """
        return self._srs_id

    @srs_id.setter
    def srs_id(self, srs_id):
        """Sets the srs_id of this ConquestApigpkgGeometryColumns.


        :param srs_id: The srs_id of this ConquestApigpkgGeometryColumns.  # noqa: E501
        :type: int
        """

        self._srs_id = srs_id

    @property
    def table_name(self):
        """Gets the table_name of this ConquestApigpkgGeometryColumns.  # noqa: E501


        :return: The table_name of this ConquestApigpkgGeometryColumns.  # noqa: E501
        :rtype: str
        """
        return self._table_name

    @table_name.setter
    def table_name(self, table_name):
        """Sets the table_name of this ConquestApigpkgGeometryColumns.


        :param table_name: The table_name of this ConquestApigpkgGeometryColumns.  # noqa: E501
        :type: str
        """

        self._table_name = table_name

    @property
    def z(self):
        """Gets the z of this ConquestApigpkgGeometryColumns.  # noqa: E501


        :return: The z of this ConquestApigpkgGeometryColumns.  # noqa: E501
        :rtype: int
        """
        return self._z

    @z.setter
    def z(self, z):
        """Sets the z of this ConquestApigpkgGeometryColumns.


        :param z: The z of this ConquestApigpkgGeometryColumns.  # noqa: E501
        :type: int
        """

        self._z = z

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConquestApigpkgGeometryColumns, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConquestApigpkgGeometryColumns):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ConquestApigpkgGeometryColumns):
            return True

        return self.to_dict() != other.to_dict()
