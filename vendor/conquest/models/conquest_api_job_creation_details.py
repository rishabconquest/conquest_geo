# coding: utf-8

"""
    Conquest API v2

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from ..configuration import Configuration


class ConquestApiJobCreationDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created': 'datetime',
        'created_by': 'str',
        'csv_import': 'ConquestApiAddNewCsvImportCommand',
        'device_id': 'str',
        'empty': 'object',
        'geopackage_import': 'ConquestApiAddNewGeoPackageImportCommand',
        'geoupdate': 'ConquestApiAddGeoUpdateCommand'
    }

    attribute_map = {
        'created': 'created',
        'created_by': 'created_by',
        'csv_import': 'csv_import',
        'device_id': 'device_id',
        'empty': 'empty',
        'geopackage_import': 'geopackage_import',
        'geoupdate': 'geoupdate'
    }

    def __init__(self, created=None, created_by=None, csv_import=None, device_id=None, empty=None, geopackage_import=None, geoupdate=None, _configuration=None):  # noqa: E501
        """ConquestApiJobCreationDetails - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._created = None
        self._created_by = None
        self._csv_import = None
        self._device_id = None
        self._empty = None
        self._geopackage_import = None
        self._geoupdate = None
        self.discriminator = None

        if created is not None:
            self.created = created
        if created_by is not None:
            self.created_by = created_by
        if csv_import is not None:
            self.csv_import = csv_import
        if device_id is not None:
            self.device_id = device_id
        if empty is not None:
            self.empty = empty
        if geopackage_import is not None:
            self.geopackage_import = geopackage_import
        if geoupdate is not None:
            self.geoupdate = geoupdate

    @property
    def created(self):
        """Gets the created of this ConquestApiJobCreationDetails.  # noqa: E501


        :return: The created of this ConquestApiJobCreationDetails.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this ConquestApiJobCreationDetails.


        :param created: The created of this ConquestApiJobCreationDetails.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def created_by(self):
        """Gets the created_by of this ConquestApiJobCreationDetails.  # noqa: E501


        :return: The created_by of this ConquestApiJobCreationDetails.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this ConquestApiJobCreationDetails.


        :param created_by: The created_by of this ConquestApiJobCreationDetails.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def csv_import(self):
        """Gets the csv_import of this ConquestApiJobCreationDetails.  # noqa: E501


        :return: The csv_import of this ConquestApiJobCreationDetails.  # noqa: E501
        :rtype: ConquestApiAddNewCsvImportCommand
        """
        return self._csv_import

    @csv_import.setter
    def csv_import(self, csv_import):
        """Sets the csv_import of this ConquestApiJobCreationDetails.


        :param csv_import: The csv_import of this ConquestApiJobCreationDetails.  # noqa: E501
        :type: ConquestApiAddNewCsvImportCommand
        """

        self._csv_import = csv_import

    @property
    def device_id(self):
        """Gets the device_id of this ConquestApiJobCreationDetails.  # noqa: E501


        :return: The device_id of this ConquestApiJobCreationDetails.  # noqa: E501
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this ConquestApiJobCreationDetails.


        :param device_id: The device_id of this ConquestApiJobCreationDetails.  # noqa: E501
        :type: str
        """

        self._device_id = device_id

    @property
    def empty(self):
        """Gets the empty of this ConquestApiJobCreationDetails.  # noqa: E501


        :return: The empty of this ConquestApiJobCreationDetails.  # noqa: E501
        :rtype: object
        """
        return self._empty

    @empty.setter
    def empty(self, empty):
        """Sets the empty of this ConquestApiJobCreationDetails.


        :param empty: The empty of this ConquestApiJobCreationDetails.  # noqa: E501
        :type: object
        """

        self._empty = empty

    @property
    def geopackage_import(self):
        """Gets the geopackage_import of this ConquestApiJobCreationDetails.  # noqa: E501


        :return: The geopackage_import of this ConquestApiJobCreationDetails.  # noqa: E501
        :rtype: ConquestApiAddNewGeoPackageImportCommand
        """
        return self._geopackage_import

    @geopackage_import.setter
    def geopackage_import(self, geopackage_import):
        """Sets the geopackage_import of this ConquestApiJobCreationDetails.


        :param geopackage_import: The geopackage_import of this ConquestApiJobCreationDetails.  # noqa: E501
        :type: ConquestApiAddNewGeoPackageImportCommand
        """

        self._geopackage_import = geopackage_import

    @property
    def geoupdate(self):
        """Gets the geoupdate of this ConquestApiJobCreationDetails.  # noqa: E501


        :return: The geoupdate of this ConquestApiJobCreationDetails.  # noqa: E501
        :rtype: ConquestApiAddGeoUpdateCommand
        """
        return self._geoupdate

    @geoupdate.setter
    def geoupdate(self, geoupdate):
        """Sets the geoupdate of this ConquestApiJobCreationDetails.


        :param geoupdate: The geoupdate of this ConquestApiJobCreationDetails.  # noqa: E501
        :type: ConquestApiAddGeoUpdateCommand
        """

        self._geoupdate = geoupdate

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConquestApiJobCreationDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConquestApiJobCreationDetails):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ConquestApiJobCreationDetails):
            return True

        return self.to_dict() != other.to_dict()
