# coding: utf-8

"""
    Conquest API v4

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ConquestApiCustomHyperlinkDefinition(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'custom_hyperlink_id': 'str',
        'is_available_expression': 'str',
        'is_enabled_expression': 'str',
        'link_expression': 'str',
        'name': 'str',
        'object_type': 'ConquestApiObjectType',
        'title_expression': 'str'
    }

    attribute_map = {
        'custom_hyperlink_id': 'CustomHyperlinkID',
        'is_available_expression': 'IsAvailableExpression',
        'is_enabled_expression': 'IsEnabledExpression',
        'link_expression': 'LinkExpression',
        'name': 'Name',
        'object_type': 'ObjectType',
        'title_expression': 'TitleExpression'
    }

    def __init__(self, custom_hyperlink_id=None, is_available_expression=None, is_enabled_expression=None, link_expression=None, name=None, object_type=None, title_expression=None):  # noqa: E501
        """ConquestApiCustomHyperlinkDefinition - a model defined in Swagger"""  # noqa: E501
        self._custom_hyperlink_id = None
        self._is_available_expression = None
        self._is_enabled_expression = None
        self._link_expression = None
        self._name = None
        self._object_type = None
        self._title_expression = None
        self.discriminator = None
        if custom_hyperlink_id is not None:
            self.custom_hyperlink_id = custom_hyperlink_id
        if is_available_expression is not None:
            self.is_available_expression = is_available_expression
        if is_enabled_expression is not None:
            self.is_enabled_expression = is_enabled_expression
        if link_expression is not None:
            self.link_expression = link_expression
        if name is not None:
            self.name = name
        if object_type is not None:
            self.object_type = object_type
        if title_expression is not None:
            self.title_expression = title_expression

    @property
    def custom_hyperlink_id(self):
        """Gets the custom_hyperlink_id of this ConquestApiCustomHyperlinkDefinition.  # noqa: E501


        :return: The custom_hyperlink_id of this ConquestApiCustomHyperlinkDefinition.  # noqa: E501
        :rtype: str
        """
        return self._custom_hyperlink_id

    @custom_hyperlink_id.setter
    def custom_hyperlink_id(self, custom_hyperlink_id):
        """Sets the custom_hyperlink_id of this ConquestApiCustomHyperlinkDefinition.


        :param custom_hyperlink_id: The custom_hyperlink_id of this ConquestApiCustomHyperlinkDefinition.  # noqa: E501
        :type: str
        """

        self._custom_hyperlink_id = custom_hyperlink_id

    @property
    def is_available_expression(self):
        """Gets the is_available_expression of this ConquestApiCustomHyperlinkDefinition.  # noqa: E501


        :return: The is_available_expression of this ConquestApiCustomHyperlinkDefinition.  # noqa: E501
        :rtype: str
        """
        return self._is_available_expression

    @is_available_expression.setter
    def is_available_expression(self, is_available_expression):
        """Sets the is_available_expression of this ConquestApiCustomHyperlinkDefinition.


        :param is_available_expression: The is_available_expression of this ConquestApiCustomHyperlinkDefinition.  # noqa: E501
        :type: str
        """

        self._is_available_expression = is_available_expression

    @property
    def is_enabled_expression(self):
        """Gets the is_enabled_expression of this ConquestApiCustomHyperlinkDefinition.  # noqa: E501


        :return: The is_enabled_expression of this ConquestApiCustomHyperlinkDefinition.  # noqa: E501
        :rtype: str
        """
        return self._is_enabled_expression

    @is_enabled_expression.setter
    def is_enabled_expression(self, is_enabled_expression):
        """Sets the is_enabled_expression of this ConquestApiCustomHyperlinkDefinition.


        :param is_enabled_expression: The is_enabled_expression of this ConquestApiCustomHyperlinkDefinition.  # noqa: E501
        :type: str
        """

        self._is_enabled_expression = is_enabled_expression

    @property
    def link_expression(self):
        """Gets the link_expression of this ConquestApiCustomHyperlinkDefinition.  # noqa: E501


        :return: The link_expression of this ConquestApiCustomHyperlinkDefinition.  # noqa: E501
        :rtype: str
        """
        return self._link_expression

    @link_expression.setter
    def link_expression(self, link_expression):
        """Sets the link_expression of this ConquestApiCustomHyperlinkDefinition.


        :param link_expression: The link_expression of this ConquestApiCustomHyperlinkDefinition.  # noqa: E501
        :type: str
        """

        self._link_expression = link_expression

    @property
    def name(self):
        """Gets the name of this ConquestApiCustomHyperlinkDefinition.  # noqa: E501


        :return: The name of this ConquestApiCustomHyperlinkDefinition.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConquestApiCustomHyperlinkDefinition.


        :param name: The name of this ConquestApiCustomHyperlinkDefinition.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def object_type(self):
        """Gets the object_type of this ConquestApiCustomHyperlinkDefinition.  # noqa: E501


        :return: The object_type of this ConquestApiCustomHyperlinkDefinition.  # noqa: E501
        :rtype: ConquestApiObjectType
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """Sets the object_type of this ConquestApiCustomHyperlinkDefinition.


        :param object_type: The object_type of this ConquestApiCustomHyperlinkDefinition.  # noqa: E501
        :type: ConquestApiObjectType
        """

        self._object_type = object_type

    @property
    def title_expression(self):
        """Gets the title_expression of this ConquestApiCustomHyperlinkDefinition.  # noqa: E501


        :return: The title_expression of this ConquestApiCustomHyperlinkDefinition.  # noqa: E501
        :rtype: str
        """
        return self._title_expression

    @title_expression.setter
    def title_expression(self, title_expression):
        """Sets the title_expression of this ConquestApiCustomHyperlinkDefinition.


        :param title_expression: The title_expression of this ConquestApiCustomHyperlinkDefinition.  # noqa: E501
        :type: str
        """

        self._title_expression = title_expression

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConquestApiCustomHyperlinkDefinition, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConquestApiCustomHyperlinkDefinition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
