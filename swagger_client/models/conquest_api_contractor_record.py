# coding: utf-8

"""
    Conquest API v4

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ConquestApiContractorRecord(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'acn': 'str',
        'action_categories': 'ConquestApiActionCategoryList',
        'address': 'str',
        'contact': 'str',
        'contractor_name': 'str',
        'email': 'str',
        'inactive': 'bool',
        'phone1': 'str',
        'phone2': 'str',
        'post_code': 'str',
        'sub_contractors': 'ConquestApiSubContractorList',
        'suburb': 'str',
        'user_text1': 'str'
    }

    attribute_map = {
        'acn': 'ACN',
        'action_categories': 'ActionCategories',
        'address': 'Address',
        'contact': 'Contact',
        'contractor_name': 'ContractorName',
        'email': 'Email',
        'inactive': 'Inactive',
        'phone1': 'Phone1',
        'phone2': 'Phone2',
        'post_code': 'PostCode',
        'sub_contractors': 'SubContractors',
        'suburb': 'Suburb',
        'user_text1': 'UserText1'
    }

    def __init__(self, acn=None, action_categories=None, address=None, contact=None, contractor_name=None, email=None, inactive=None, phone1=None, phone2=None, post_code=None, sub_contractors=None, suburb=None, user_text1=None):  # noqa: E501
        """ConquestApiContractorRecord - a model defined in Swagger"""  # noqa: E501
        self._acn = None
        self._action_categories = None
        self._address = None
        self._contact = None
        self._contractor_name = None
        self._email = None
        self._inactive = None
        self._phone1 = None
        self._phone2 = None
        self._post_code = None
        self._sub_contractors = None
        self._suburb = None
        self._user_text1 = None
        self.discriminator = None
        if acn is not None:
            self.acn = acn
        if action_categories is not None:
            self.action_categories = action_categories
        if address is not None:
            self.address = address
        if contact is not None:
            self.contact = contact
        if contractor_name is not None:
            self.contractor_name = contractor_name
        if email is not None:
            self.email = email
        if inactive is not None:
            self.inactive = inactive
        if phone1 is not None:
            self.phone1 = phone1
        if phone2 is not None:
            self.phone2 = phone2
        if post_code is not None:
            self.post_code = post_code
        if sub_contractors is not None:
            self.sub_contractors = sub_contractors
        if suburb is not None:
            self.suburb = suburb
        if user_text1 is not None:
            self.user_text1 = user_text1

    @property
    def acn(self):
        """Gets the acn of this ConquestApiContractorRecord.  # noqa: E501


        :return: The acn of this ConquestApiContractorRecord.  # noqa: E501
        :rtype: str
        """
        return self._acn

    @acn.setter
    def acn(self, acn):
        """Sets the acn of this ConquestApiContractorRecord.


        :param acn: The acn of this ConquestApiContractorRecord.  # noqa: E501
        :type: str
        """

        self._acn = acn

    @property
    def action_categories(self):
        """Gets the action_categories of this ConquestApiContractorRecord.  # noqa: E501


        :return: The action_categories of this ConquestApiContractorRecord.  # noqa: E501
        :rtype: ConquestApiActionCategoryList
        """
        return self._action_categories

    @action_categories.setter
    def action_categories(self, action_categories):
        """Sets the action_categories of this ConquestApiContractorRecord.


        :param action_categories: The action_categories of this ConquestApiContractorRecord.  # noqa: E501
        :type: ConquestApiActionCategoryList
        """

        self._action_categories = action_categories

    @property
    def address(self):
        """Gets the address of this ConquestApiContractorRecord.  # noqa: E501


        :return: The address of this ConquestApiContractorRecord.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this ConquestApiContractorRecord.


        :param address: The address of this ConquestApiContractorRecord.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def contact(self):
        """Gets the contact of this ConquestApiContractorRecord.  # noqa: E501


        :return: The contact of this ConquestApiContractorRecord.  # noqa: E501
        :rtype: str
        """
        return self._contact

    @contact.setter
    def contact(self, contact):
        """Sets the contact of this ConquestApiContractorRecord.


        :param contact: The contact of this ConquestApiContractorRecord.  # noqa: E501
        :type: str
        """

        self._contact = contact

    @property
    def contractor_name(self):
        """Gets the contractor_name of this ConquestApiContractorRecord.  # noqa: E501


        :return: The contractor_name of this ConquestApiContractorRecord.  # noqa: E501
        :rtype: str
        """
        return self._contractor_name

    @contractor_name.setter
    def contractor_name(self, contractor_name):
        """Sets the contractor_name of this ConquestApiContractorRecord.


        :param contractor_name: The contractor_name of this ConquestApiContractorRecord.  # noqa: E501
        :type: str
        """

        self._contractor_name = contractor_name

    @property
    def email(self):
        """Gets the email of this ConquestApiContractorRecord.  # noqa: E501


        :return: The email of this ConquestApiContractorRecord.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this ConquestApiContractorRecord.


        :param email: The email of this ConquestApiContractorRecord.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def inactive(self):
        """Gets the inactive of this ConquestApiContractorRecord.  # noqa: E501


        :return: The inactive of this ConquestApiContractorRecord.  # noqa: E501
        :rtype: bool
        """
        return self._inactive

    @inactive.setter
    def inactive(self, inactive):
        """Sets the inactive of this ConquestApiContractorRecord.


        :param inactive: The inactive of this ConquestApiContractorRecord.  # noqa: E501
        :type: bool
        """

        self._inactive = inactive

    @property
    def phone1(self):
        """Gets the phone1 of this ConquestApiContractorRecord.  # noqa: E501


        :return: The phone1 of this ConquestApiContractorRecord.  # noqa: E501
        :rtype: str
        """
        return self._phone1

    @phone1.setter
    def phone1(self, phone1):
        """Sets the phone1 of this ConquestApiContractorRecord.


        :param phone1: The phone1 of this ConquestApiContractorRecord.  # noqa: E501
        :type: str
        """

        self._phone1 = phone1

    @property
    def phone2(self):
        """Gets the phone2 of this ConquestApiContractorRecord.  # noqa: E501


        :return: The phone2 of this ConquestApiContractorRecord.  # noqa: E501
        :rtype: str
        """
        return self._phone2

    @phone2.setter
    def phone2(self, phone2):
        """Sets the phone2 of this ConquestApiContractorRecord.


        :param phone2: The phone2 of this ConquestApiContractorRecord.  # noqa: E501
        :type: str
        """

        self._phone2 = phone2

    @property
    def post_code(self):
        """Gets the post_code of this ConquestApiContractorRecord.  # noqa: E501


        :return: The post_code of this ConquestApiContractorRecord.  # noqa: E501
        :rtype: str
        """
        return self._post_code

    @post_code.setter
    def post_code(self, post_code):
        """Sets the post_code of this ConquestApiContractorRecord.


        :param post_code: The post_code of this ConquestApiContractorRecord.  # noqa: E501
        :type: str
        """

        self._post_code = post_code

    @property
    def sub_contractors(self):
        """Gets the sub_contractors of this ConquestApiContractorRecord.  # noqa: E501


        :return: The sub_contractors of this ConquestApiContractorRecord.  # noqa: E501
        :rtype: ConquestApiSubContractorList
        """
        return self._sub_contractors

    @sub_contractors.setter
    def sub_contractors(self, sub_contractors):
        """Sets the sub_contractors of this ConquestApiContractorRecord.


        :param sub_contractors: The sub_contractors of this ConquestApiContractorRecord.  # noqa: E501
        :type: ConquestApiSubContractorList
        """

        self._sub_contractors = sub_contractors

    @property
    def suburb(self):
        """Gets the suburb of this ConquestApiContractorRecord.  # noqa: E501


        :return: The suburb of this ConquestApiContractorRecord.  # noqa: E501
        :rtype: str
        """
        return self._suburb

    @suburb.setter
    def suburb(self, suburb):
        """Sets the suburb of this ConquestApiContractorRecord.


        :param suburb: The suburb of this ConquestApiContractorRecord.  # noqa: E501
        :type: str
        """

        self._suburb = suburb

    @property
    def user_text1(self):
        """Gets the user_text1 of this ConquestApiContractorRecord.  # noqa: E501


        :return: The user_text1 of this ConquestApiContractorRecord.  # noqa: E501
        :rtype: str
        """
        return self._user_text1

    @user_text1.setter
    def user_text1(self, user_text1):
        """Sets the user_text1 of this ConquestApiContractorRecord.


        :param user_text1: The user_text1 of this ConquestApiContractorRecord.  # noqa: E501
        :type: str
        """

        self._user_text1 = user_text1

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConquestApiContractorRecord, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConquestApiContractorRecord):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
