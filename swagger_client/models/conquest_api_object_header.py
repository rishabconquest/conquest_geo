# coding: utf-8

"""
    Conquest API v4

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ConquestApiObjectHeader(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'attribute_set_key': 'ConquestApiObjectKey',
        'depth': 'int',
        'object_key': 'ConquestApiObjectKey',
        'object_name': 'str',
        'order': 'int',
        'parent_key': 'ConquestApiObjectKey',
        'type_key': 'ConquestApiObjectKey'
    }

    attribute_map = {
        'attribute_set_key': 'AttributeSetKey',
        'depth': 'Depth',
        'object_key': 'ObjectKey',
        'object_name': 'ObjectName',
        'order': 'Order',
        'parent_key': 'ParentKey',
        'type_key': 'TypeKey'
    }

    def __init__(self, attribute_set_key=None, depth=None, object_key=None, object_name=None, order=None, parent_key=None, type_key=None):  # noqa: E501
        """ConquestApiObjectHeader - a model defined in Swagger"""  # noqa: E501
        self._attribute_set_key = None
        self._depth = None
        self._object_key = None
        self._object_name = None
        self._order = None
        self._parent_key = None
        self._type_key = None
        self.discriminator = None
        if attribute_set_key is not None:
            self.attribute_set_key = attribute_set_key
        if depth is not None:
            self.depth = depth
        if object_key is not None:
            self.object_key = object_key
        if object_name is not None:
            self.object_name = object_name
        if order is not None:
            self.order = order
        if parent_key is not None:
            self.parent_key = parent_key
        if type_key is not None:
            self.type_key = type_key

    @property
    def attribute_set_key(self):
        """Gets the attribute_set_key of this ConquestApiObjectHeader.  # noqa: E501


        :return: The attribute_set_key of this ConquestApiObjectHeader.  # noqa: E501
        :rtype: ConquestApiObjectKey
        """
        return self._attribute_set_key

    @attribute_set_key.setter
    def attribute_set_key(self, attribute_set_key):
        """Sets the attribute_set_key of this ConquestApiObjectHeader.


        :param attribute_set_key: The attribute_set_key of this ConquestApiObjectHeader.  # noqa: E501
        :type: ConquestApiObjectKey
        """

        self._attribute_set_key = attribute_set_key

    @property
    def depth(self):
        """Gets the depth of this ConquestApiObjectHeader.  # noqa: E501


        :return: The depth of this ConquestApiObjectHeader.  # noqa: E501
        :rtype: int
        """
        return self._depth

    @depth.setter
    def depth(self, depth):
        """Sets the depth of this ConquestApiObjectHeader.


        :param depth: The depth of this ConquestApiObjectHeader.  # noqa: E501
        :type: int
        """

        self._depth = depth

    @property
    def object_key(self):
        """Gets the object_key of this ConquestApiObjectHeader.  # noqa: E501


        :return: The object_key of this ConquestApiObjectHeader.  # noqa: E501
        :rtype: ConquestApiObjectKey
        """
        return self._object_key

    @object_key.setter
    def object_key(self, object_key):
        """Sets the object_key of this ConquestApiObjectHeader.


        :param object_key: The object_key of this ConquestApiObjectHeader.  # noqa: E501
        :type: ConquestApiObjectKey
        """

        self._object_key = object_key

    @property
    def object_name(self):
        """Gets the object_name of this ConquestApiObjectHeader.  # noqa: E501


        :return: The object_name of this ConquestApiObjectHeader.  # noqa: E501
        :rtype: str
        """
        return self._object_name

    @object_name.setter
    def object_name(self, object_name):
        """Sets the object_name of this ConquestApiObjectHeader.


        :param object_name: The object_name of this ConquestApiObjectHeader.  # noqa: E501
        :type: str
        """

        self._object_name = object_name

    @property
    def order(self):
        """Gets the order of this ConquestApiObjectHeader.  # noqa: E501

        Order of a node in a list of siblings.  # noqa: E501

        :return: The order of this ConquestApiObjectHeader.  # noqa: E501
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this ConquestApiObjectHeader.

        Order of a node in a list of siblings.  # noqa: E501

        :param order: The order of this ConquestApiObjectHeader.  # noqa: E501
        :type: int
        """

        self._order = order

    @property
    def parent_key(self):
        """Gets the parent_key of this ConquestApiObjectHeader.  # noqa: E501


        :return: The parent_key of this ConquestApiObjectHeader.  # noqa: E501
        :rtype: ConquestApiObjectKey
        """
        return self._parent_key

    @parent_key.setter
    def parent_key(self, parent_key):
        """Sets the parent_key of this ConquestApiObjectHeader.


        :param parent_key: The parent_key of this ConquestApiObjectHeader.  # noqa: E501
        :type: ConquestApiObjectKey
        """

        self._parent_key = parent_key

    @property
    def type_key(self):
        """Gets the type_key of this ConquestApiObjectHeader.  # noqa: E501


        :return: The type_key of this ConquestApiObjectHeader.  # noqa: E501
        :rtype: ConquestApiObjectKey
        """
        return self._type_key

    @type_key.setter
    def type_key(self, type_key):
        """Sets the type_key of this ConquestApiObjectHeader.


        :param type_key: The type_key of this ConquestApiObjectHeader.  # noqa: E501
        :type: ConquestApiObjectKey
        """

        self._type_key = type_key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConquestApiObjectHeader, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConquestApiObjectHeader):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
