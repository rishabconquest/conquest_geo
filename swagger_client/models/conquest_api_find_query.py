# coding: utf-8

"""
    Conquest API v4

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ConquestApiFindQuery(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'context': 'str',
        'criteria': 'ConquestApiCriteria',
        'extension_module_context': 'ConquestApiExtensionModuleContext',
        'field_names': 'list[str]',
        'filter_id': 'int',
        'limit': 'int',
        'map_view_id': 'int',
        'parameter_object_key': 'ConquestApiObjectKey',
        'parameter_object_key2': 'ConquestApiObjectKey',
        'with_in_bounds': 'ConquestApiLatLngBounds',
        'without_default_criteria': 'bool',
        'x_include_coordinates': 'bool',
        'x_include_related_contexts': 'bool'
    }

    attribute_map = {
        'context': 'Context',
        'criteria': 'Criteria',
        'extension_module_context': 'ExtensionModuleContext',
        'field_names': 'FieldNames',
        'filter_id': 'FilterID',
        'limit': 'Limit',
        'map_view_id': 'MapViewID',
        'parameter_object_key': 'ParameterObjectKey',
        'parameter_object_key2': 'ParameterObjectKey2',
        'with_in_bounds': 'WithInBounds',
        'without_default_criteria': 'WithoutDefaultCriteria',
        'x_include_coordinates': 'X_IncludeCoordinates',
        'x_include_related_contexts': 'X_IncludeRelatedContexts'
    }

    def __init__(self, context=None, criteria=None, extension_module_context=None, field_names=None, filter_id=None, limit=None, map_view_id=None, parameter_object_key=None, parameter_object_key2=None, with_in_bounds=None, without_default_criteria=None, x_include_coordinates=None, x_include_related_contexts=None):  # noqa: E501
        """ConquestApiFindQuery - a model defined in Swagger"""  # noqa: E501
        self._context = None
        self._criteria = None
        self._extension_module_context = None
        self._field_names = None
        self._filter_id = None
        self._limit = None
        self._map_view_id = None
        self._parameter_object_key = None
        self._parameter_object_key2 = None
        self._with_in_bounds = None
        self._without_default_criteria = None
        self._x_include_coordinates = None
        self._x_include_related_contexts = None
        self.discriminator = None
        if context is not None:
            self.context = context
        if criteria is not None:
            self.criteria = criteria
        if extension_module_context is not None:
            self.extension_module_context = extension_module_context
        if field_names is not None:
            self.field_names = field_names
        if filter_id is not None:
            self.filter_id = filter_id
        if limit is not None:
            self.limit = limit
        if map_view_id is not None:
            self.map_view_id = map_view_id
        if parameter_object_key is not None:
            self.parameter_object_key = parameter_object_key
        if parameter_object_key2 is not None:
            self.parameter_object_key2 = parameter_object_key2
        if with_in_bounds is not None:
            self.with_in_bounds = with_in_bounds
        if without_default_criteria is not None:
            self.without_default_criteria = without_default_criteria
        if x_include_coordinates is not None:
            self.x_include_coordinates = x_include_coordinates
        if x_include_related_contexts is not None:
            self.x_include_related_contexts = x_include_related_contexts

    @property
    def context(self):
        """Gets the context of this ConquestApiFindQuery.  # noqa: E501

        Context is a selection of fields with a predefined Criteria. It is like the 'from' clause if a SQL query, a set of \"joined tables\".  Contexts are defined in the Field Dictionary  This Context is parameterised with the ObjectID for it's respective ObjectType  # noqa: E501

        :return: The context of this ConquestApiFindQuery.  # noqa: E501
        :rtype: str
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this ConquestApiFindQuery.

        Context is a selection of fields with a predefined Criteria. It is like the 'from' clause if a SQL query, a set of \"joined tables\".  Contexts are defined in the Field Dictionary  This Context is parameterised with the ObjectID for it's respective ObjectType  # noqa: E501

        :param context: The context of this ConquestApiFindQuery.  # noqa: E501
        :type: str
        """

        self._context = context

    @property
    def criteria(self):
        """Gets the criteria of this ConquestApiFindQuery.  # noqa: E501


        :return: The criteria of this ConquestApiFindQuery.  # noqa: E501
        :rtype: ConquestApiCriteria
        """
        return self._criteria

    @criteria.setter
    def criteria(self, criteria):
        """Sets the criteria of this ConquestApiFindQuery.


        :param criteria: The criteria of this ConquestApiFindQuery.  # noqa: E501
        :type: ConquestApiCriteria
        """

        self._criteria = criteria

    @property
    def extension_module_context(self):
        """Gets the extension_module_context of this ConquestApiFindQuery.  # noqa: E501


        :return: The extension_module_context of this ConquestApiFindQuery.  # noqa: E501
        :rtype: ConquestApiExtensionModuleContext
        """
        return self._extension_module_context

    @extension_module_context.setter
    def extension_module_context(self, extension_module_context):
        """Sets the extension_module_context of this ConquestApiFindQuery.


        :param extension_module_context: The extension_module_context of this ConquestApiFindQuery.  # noqa: E501
        :type: ConquestApiExtensionModuleContext
        """

        self._extension_module_context = extension_module_context

    @property
    def field_names(self):
        """Gets the field_names of this ConquestApiFindQuery.  # noqa: E501

        FieldNames is the list of fields that will be returned in the RecordSet.  If empty, the default selection of fields will be provided. Otherwise the selected field names, if defined by the Context, will be returned  # noqa: E501

        :return: The field_names of this ConquestApiFindQuery.  # noqa: E501
        :rtype: list[str]
        """
        return self._field_names

    @field_names.setter
    def field_names(self, field_names):
        """Sets the field_names of this ConquestApiFindQuery.

        FieldNames is the list of fields that will be returned in the RecordSet.  If empty, the default selection of fields will be provided. Otherwise the selected field names, if defined by the Context, will be returned  # noqa: E501

        :param field_names: The field_names of this ConquestApiFindQuery.  # noqa: E501
        :type: list[str]
        """

        self._field_names = field_names

    @property
    def filter_id(self):
        """Gets the filter_id of this ConquestApiFindQuery.  # noqa: E501

        The ID for a UserView. A UserView is constructed using the filter builder.  # noqa: E501

        :return: The filter_id of this ConquestApiFindQuery.  # noqa: E501
        :rtype: int
        """
        return self._filter_id

    @filter_id.setter
    def filter_id(self, filter_id):
        """Sets the filter_id of this ConquestApiFindQuery.

        The ID for a UserView. A UserView is constructed using the filter builder.  # noqa: E501

        :param filter_id: The filter_id of this ConquestApiFindQuery.  # noqa: E501
        :type: int
        """

        self._filter_id = filter_id

    @property
    def limit(self):
        """Gets the limit of this ConquestApiFindQuery.  # noqa: E501


        :return: The limit of this ConquestApiFindQuery.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this ConquestApiFindQuery.


        :param limit: The limit of this ConquestApiFindQuery.  # noqa: E501
        :type: int
        """

        self._limit = limit

    @property
    def map_view_id(self):
        """Gets the map_view_id of this ConquestApiFindQuery.  # noqa: E501

        The ID for a MapView. A MapView is a collection of UserViews.  The ResultSet will have many groups.  # noqa: E501

        :return: The map_view_id of this ConquestApiFindQuery.  # noqa: E501
        :rtype: int
        """
        return self._map_view_id

    @map_view_id.setter
    def map_view_id(self, map_view_id):
        """Sets the map_view_id of this ConquestApiFindQuery.

        The ID for a MapView. A MapView is a collection of UserViews.  The ResultSet will have many groups.  # noqa: E501

        :param map_view_id: The map_view_id of this ConquestApiFindQuery.  # noqa: E501
        :type: int
        """

        self._map_view_id = map_view_id

    @property
    def parameter_object_key(self):
        """Gets the parameter_object_key of this ConquestApiFindQuery.  # noqa: E501


        :return: The parameter_object_key of this ConquestApiFindQuery.  # noqa: E501
        :rtype: ConquestApiObjectKey
        """
        return self._parameter_object_key

    @parameter_object_key.setter
    def parameter_object_key(self, parameter_object_key):
        """Sets the parameter_object_key of this ConquestApiFindQuery.


        :param parameter_object_key: The parameter_object_key of this ConquestApiFindQuery.  # noqa: E501
        :type: ConquestApiObjectKey
        """

        self._parameter_object_key = parameter_object_key

    @property
    def parameter_object_key2(self):
        """Gets the parameter_object_key2 of this ConquestApiFindQuery.  # noqa: E501


        :return: The parameter_object_key2 of this ConquestApiFindQuery.  # noqa: E501
        :rtype: ConquestApiObjectKey
        """
        return self._parameter_object_key2

    @parameter_object_key2.setter
    def parameter_object_key2(self, parameter_object_key2):
        """Sets the parameter_object_key2 of this ConquestApiFindQuery.


        :param parameter_object_key2: The parameter_object_key2 of this ConquestApiFindQuery.  # noqa: E501
        :type: ConquestApiObjectKey
        """

        self._parameter_object_key2 = parameter_object_key2

    @property
    def with_in_bounds(self):
        """Gets the with_in_bounds of this ConquestApiFindQuery.  # noqa: E501


        :return: The with_in_bounds of this ConquestApiFindQuery.  # noqa: E501
        :rtype: ConquestApiLatLngBounds
        """
        return self._with_in_bounds

    @with_in_bounds.setter
    def with_in_bounds(self, with_in_bounds):
        """Sets the with_in_bounds of this ConquestApiFindQuery.


        :param with_in_bounds: The with_in_bounds of this ConquestApiFindQuery.  # noqa: E501
        :type: ConquestApiLatLngBounds
        """

        self._with_in_bounds = with_in_bounds

    @property
    def without_default_criteria(self):
        """Gets the without_default_criteria of this ConquestApiFindQuery.  # noqa: E501

        If true, the PredefinedContextCriteria, enabled by default are not applied.  # noqa: E501

        :return: The without_default_criteria of this ConquestApiFindQuery.  # noqa: E501
        :rtype: bool
        """
        return self._without_default_criteria

    @without_default_criteria.setter
    def without_default_criteria(self, without_default_criteria):
        """Sets the without_default_criteria of this ConquestApiFindQuery.

        If true, the PredefinedContextCriteria, enabled by default are not applied.  # noqa: E501

        :param without_default_criteria: The without_default_criteria of this ConquestApiFindQuery.  # noqa: E501
        :type: bool
        """

        self._without_default_criteria = without_default_criteria

    @property
    def x_include_coordinates(self):
        """Gets the x_include_coordinates of this ConquestApiFindQuery.  # noqa: E501


        :return: The x_include_coordinates of this ConquestApiFindQuery.  # noqa: E501
        :rtype: bool
        """
        return self._x_include_coordinates

    @x_include_coordinates.setter
    def x_include_coordinates(self, x_include_coordinates):
        """Sets the x_include_coordinates of this ConquestApiFindQuery.


        :param x_include_coordinates: The x_include_coordinates of this ConquestApiFindQuery.  # noqa: E501
        :type: bool
        """

        self._x_include_coordinates = x_include_coordinates

    @property
    def x_include_related_contexts(self):
        """Gets the x_include_related_contexts of this ConquestApiFindQuery.  # noqa: E501


        :return: The x_include_related_contexts of this ConquestApiFindQuery.  # noqa: E501
        :rtype: bool
        """
        return self._x_include_related_contexts

    @x_include_related_contexts.setter
    def x_include_related_contexts(self, x_include_related_contexts):
        """Sets the x_include_related_contexts of this ConquestApiFindQuery.


        :param x_include_related_contexts: The x_include_related_contexts of this ConquestApiFindQuery.  # noqa: E501
        :type: bool
        """

        self._x_include_related_contexts = x_include_related_contexts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConquestApiFindQuery, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConquestApiFindQuery):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
