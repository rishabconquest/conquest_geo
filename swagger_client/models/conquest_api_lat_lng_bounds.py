# coding: utf-8

"""
    Conquest API v4

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ConquestApiLatLngBounds(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'lat1': 'float',
        'lat2': 'float',
        'lng1': 'float',
        'lng2': 'float'
    }

    attribute_map = {
        'lat1': 'lat1',
        'lat2': 'lat2',
        'lng1': 'lng1',
        'lng2': 'lng2'
    }

    def __init__(self, lat1=None, lat2=None, lng1=None, lng2=None):  # noqa: E501
        """ConquestApiLatLngBounds - a model defined in Swagger"""  # noqa: E501
        self._lat1 = None
        self._lat2 = None
        self._lng1 = None
        self._lng2 = None
        self.discriminator = None
        if lat1 is not None:
            self.lat1 = lat1
        if lat2 is not None:
            self.lat2 = lat2
        if lng1 is not None:
            self.lng1 = lng1
        if lng2 is not None:
            self.lng2 = lng2

    @property
    def lat1(self):
        """Gets the lat1 of this ConquestApiLatLngBounds.  # noqa: E501


        :return: The lat1 of this ConquestApiLatLngBounds.  # noqa: E501
        :rtype: float
        """
        return self._lat1

    @lat1.setter
    def lat1(self, lat1):
        """Sets the lat1 of this ConquestApiLatLngBounds.


        :param lat1: The lat1 of this ConquestApiLatLngBounds.  # noqa: E501
        :type: float
        """

        self._lat1 = lat1

    @property
    def lat2(self):
        """Gets the lat2 of this ConquestApiLatLngBounds.  # noqa: E501


        :return: The lat2 of this ConquestApiLatLngBounds.  # noqa: E501
        :rtype: float
        """
        return self._lat2

    @lat2.setter
    def lat2(self, lat2):
        """Sets the lat2 of this ConquestApiLatLngBounds.


        :param lat2: The lat2 of this ConquestApiLatLngBounds.  # noqa: E501
        :type: float
        """

        self._lat2 = lat2

    @property
    def lng1(self):
        """Gets the lng1 of this ConquestApiLatLngBounds.  # noqa: E501


        :return: The lng1 of this ConquestApiLatLngBounds.  # noqa: E501
        :rtype: float
        """
        return self._lng1

    @lng1.setter
    def lng1(self, lng1):
        """Sets the lng1 of this ConquestApiLatLngBounds.


        :param lng1: The lng1 of this ConquestApiLatLngBounds.  # noqa: E501
        :type: float
        """

        self._lng1 = lng1

    @property
    def lng2(self):
        """Gets the lng2 of this ConquestApiLatLngBounds.  # noqa: E501


        :return: The lng2 of this ConquestApiLatLngBounds.  # noqa: E501
        :rtype: float
        """
        return self._lng2

    @lng2.setter
    def lng2(self, lng2):
        """Sets the lng2 of this ConquestApiLatLngBounds.


        :param lng2: The lng2 of this ConquestApiLatLngBounds.  # noqa: E501
        :type: float
        """

        self._lng2 = lng2

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConquestApiLatLngBounds, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConquestApiLatLngBounds):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
