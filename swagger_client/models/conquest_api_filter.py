# coding: utf-8

"""
    Conquest API v4

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ConquestApiFilter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'context': 'str',
        'description': 'str',
        'filter_id': 'int',
        'filter_name': 'str',
        'map_view_id': 'int',
        'system': 'bool',
        'user_views': 'list[ConquestApiUserViewFilter]',
        'usr': 'str'
    }

    attribute_map = {
        'context': 'Context',
        'description': 'Description',
        'filter_id': 'FilterID',
        'filter_name': 'FilterName',
        'map_view_id': 'MapViewID',
        'system': 'System',
        'user_views': 'UserViews',
        'usr': 'Usr'
    }

    def __init__(self, context=None, description=None, filter_id=None, filter_name=None, map_view_id=None, system=None, user_views=None, usr=None):  # noqa: E501
        """ConquestApiFilter - a model defined in Swagger"""  # noqa: E501
        self._context = None
        self._description = None
        self._filter_id = None
        self._filter_name = None
        self._map_view_id = None
        self._system = None
        self._user_views = None
        self._usr = None
        self.discriminator = None
        if context is not None:
            self.context = context
        if description is not None:
            self.description = description
        if filter_id is not None:
            self.filter_id = filter_id
        if filter_name is not None:
            self.filter_name = filter_name
        if map_view_id is not None:
            self.map_view_id = map_view_id
        if system is not None:
            self.system = system
        if user_views is not None:
            self.user_views = user_views
        if usr is not None:
            self.usr = usr

    @property
    def context(self):
        """Gets the context of this ConquestApiFilter.  # noqa: E501

        Context is a selection of fields with a predefined Criteria. It is like the 'from' clause if a SQL query, a set of \"joined tables\".  Contexts are defined in the Field Dictionary  This Context is parameterised with the ObjectID for it's respective ObjectType  # noqa: E501

        :return: The context of this ConquestApiFilter.  # noqa: E501
        :rtype: str
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this ConquestApiFilter.

        Context is a selection of fields with a predefined Criteria. It is like the 'from' clause if a SQL query, a set of \"joined tables\".  Contexts are defined in the Field Dictionary  This Context is parameterised with the ObjectID for it's respective ObjectType  # noqa: E501

        :param context: The context of this ConquestApiFilter.  # noqa: E501
        :type: str
        """

        self._context = context

    @property
    def description(self):
        """Gets the description of this ConquestApiFilter.  # noqa: E501


        :return: The description of this ConquestApiFilter.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ConquestApiFilter.


        :param description: The description of this ConquestApiFilter.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def filter_id(self):
        """Gets the filter_id of this ConquestApiFilter.  # noqa: E501

        The ID for a UserView. A UserView is constructed using the filter builder.  # noqa: E501

        :return: The filter_id of this ConquestApiFilter.  # noqa: E501
        :rtype: int
        """
        return self._filter_id

    @filter_id.setter
    def filter_id(self, filter_id):
        """Sets the filter_id of this ConquestApiFilter.

        The ID for a UserView. A UserView is constructed using the filter builder.  # noqa: E501

        :param filter_id: The filter_id of this ConquestApiFilter.  # noqa: E501
        :type: int
        """

        self._filter_id = filter_id

    @property
    def filter_name(self):
        """Gets the filter_name of this ConquestApiFilter.  # noqa: E501


        :return: The filter_name of this ConquestApiFilter.  # noqa: E501
        :rtype: str
        """
        return self._filter_name

    @filter_name.setter
    def filter_name(self, filter_name):
        """Sets the filter_name of this ConquestApiFilter.


        :param filter_name: The filter_name of this ConquestApiFilter.  # noqa: E501
        :type: str
        """

        self._filter_name = filter_name

    @property
    def map_view_id(self):
        """Gets the map_view_id of this ConquestApiFilter.  # noqa: E501

        The ID for a MapView. A MapView is a collection of UserViews. The ResultSet will have many groups.  # noqa: E501

        :return: The map_view_id of this ConquestApiFilter.  # noqa: E501
        :rtype: int
        """
        return self._map_view_id

    @map_view_id.setter
    def map_view_id(self, map_view_id):
        """Sets the map_view_id of this ConquestApiFilter.

        The ID for a MapView. A MapView is a collection of UserViews. The ResultSet will have many groups.  # noqa: E501

        :param map_view_id: The map_view_id of this ConquestApiFilter.  # noqa: E501
        :type: int
        """

        self._map_view_id = map_view_id

    @property
    def system(self):
        """Gets the system of this ConquestApiFilter.  # noqa: E501


        :return: The system of this ConquestApiFilter.  # noqa: E501
        :rtype: bool
        """
        return self._system

    @system.setter
    def system(self, system):
        """Sets the system of this ConquestApiFilter.


        :param system: The system of this ConquestApiFilter.  # noqa: E501
        :type: bool
        """

        self._system = system

    @property
    def user_views(self):
        """Gets the user_views of this ConquestApiFilter.  # noqa: E501


        :return: The user_views of this ConquestApiFilter.  # noqa: E501
        :rtype: list[ConquestApiUserViewFilter]
        """
        return self._user_views

    @user_views.setter
    def user_views(self, user_views):
        """Sets the user_views of this ConquestApiFilter.


        :param user_views: The user_views of this ConquestApiFilter.  # noqa: E501
        :type: list[ConquestApiUserViewFilter]
        """

        self._user_views = user_views

    @property
    def usr(self):
        """Gets the usr of this ConquestApiFilter.  # noqa: E501


        :return: The usr of this ConquestApiFilter.  # noqa: E501
        :rtype: str
        """
        return self._usr

    @usr.setter
    def usr(self, usr):
        """Sets the usr of this ConquestApiFilter.


        :param usr: The usr of this ConquestApiFilter.  # noqa: E501
        :type: str
        """

        self._usr = usr

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConquestApiFilter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConquestApiFilter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
