# coding: utf-8

"""
    Conquest API v4

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ConquestApiCsvImportStateResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created': 'datetime',
        'created_by': 'str',
        'description': 'str',
        'error': 'str',
        'last_updated': 'datetime',
        'process_id': 'str',
        'status': 'ConquestApiJobStatus',
        'status_description': 'str',
        'task_progress': 'float',
        'title': 'str',
        'total_work': 'float',
        'work_done': 'float',
        'job_key': 'ConquestApiJobKey'
    }

    attribute_map = {
        'created': 'Created',
        'created_by': 'CreatedBy',
        'description': 'Description',
        'error': 'Error',
        'last_updated': 'LastUpdated',
        'process_id': 'ProcessID',
        'status': 'Status',
        'status_description': 'StatusDescription',
        'task_progress': 'TaskProgress',
        'title': 'Title',
        'total_work': 'TotalWork',
        'work_done': 'WorkDone',
        'job_key': 'job_key'
    }

    def __init__(self, created=None, created_by=None, description=None, error=None, last_updated=None, process_id=None, status=None, status_description=None, task_progress=None, title=None, total_work=None, work_done=None, job_key=None):  # noqa: E501
        """ConquestApiCsvImportStateResponse - a model defined in Swagger"""  # noqa: E501
        self._created = None
        self._created_by = None
        self._description = None
        self._error = None
        self._last_updated = None
        self._process_id = None
        self._status = None
        self._status_description = None
        self._task_progress = None
        self._title = None
        self._total_work = None
        self._work_done = None
        self._job_key = None
        self.discriminator = None
        if created is not None:
            self.created = created
        if created_by is not None:
            self.created_by = created_by
        if description is not None:
            self.description = description
        if error is not None:
            self.error = error
        if last_updated is not None:
            self.last_updated = last_updated
        if process_id is not None:
            self.process_id = process_id
        if status is not None:
            self.status = status
        if status_description is not None:
            self.status_description = status_description
        if task_progress is not None:
            self.task_progress = task_progress
        if title is not None:
            self.title = title
        if total_work is not None:
            self.total_work = total_work
        if work_done is not None:
            self.work_done = work_done
        if job_key is not None:
            self.job_key = job_key

    @property
    def created(self):
        """Gets the created of this ConquestApiCsvImportStateResponse.  # noqa: E501


        :return: The created of this ConquestApiCsvImportStateResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this ConquestApiCsvImportStateResponse.


        :param created: The created of this ConquestApiCsvImportStateResponse.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def created_by(self):
        """Gets the created_by of this ConquestApiCsvImportStateResponse.  # noqa: E501


        :return: The created_by of this ConquestApiCsvImportStateResponse.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this ConquestApiCsvImportStateResponse.


        :param created_by: The created_by of this ConquestApiCsvImportStateResponse.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def description(self):
        """Gets the description of this ConquestApiCsvImportStateResponse.  # noqa: E501


        :return: The description of this ConquestApiCsvImportStateResponse.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ConquestApiCsvImportStateResponse.


        :param description: The description of this ConquestApiCsvImportStateResponse.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def error(self):
        """Gets the error of this ConquestApiCsvImportStateResponse.  # noqa: E501


        :return: The error of this ConquestApiCsvImportStateResponse.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this ConquestApiCsvImportStateResponse.


        :param error: The error of this ConquestApiCsvImportStateResponse.  # noqa: E501
        :type: str
        """

        self._error = error

    @property
    def last_updated(self):
        """Gets the last_updated of this ConquestApiCsvImportStateResponse.  # noqa: E501


        :return: The last_updated of this ConquestApiCsvImportStateResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this ConquestApiCsvImportStateResponse.


        :param last_updated: The last_updated of this ConquestApiCsvImportStateResponse.  # noqa: E501
        :type: datetime
        """

        self._last_updated = last_updated

    @property
    def process_id(self):
        """Gets the process_id of this ConquestApiCsvImportStateResponse.  # noqa: E501


        :return: The process_id of this ConquestApiCsvImportStateResponse.  # noqa: E501
        :rtype: str
        """
        return self._process_id

    @process_id.setter
    def process_id(self, process_id):
        """Sets the process_id of this ConquestApiCsvImportStateResponse.


        :param process_id: The process_id of this ConquestApiCsvImportStateResponse.  # noqa: E501
        :type: str
        """

        self._process_id = process_id

    @property
    def status(self):
        """Gets the status of this ConquestApiCsvImportStateResponse.  # noqa: E501


        :return: The status of this ConquestApiCsvImportStateResponse.  # noqa: E501
        :rtype: ConquestApiJobStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ConquestApiCsvImportStateResponse.


        :param status: The status of this ConquestApiCsvImportStateResponse.  # noqa: E501
        :type: ConquestApiJobStatus
        """

        self._status = status

    @property
    def status_description(self):
        """Gets the status_description of this ConquestApiCsvImportStateResponse.  # noqa: E501


        :return: The status_description of this ConquestApiCsvImportStateResponse.  # noqa: E501
        :rtype: str
        """
        return self._status_description

    @status_description.setter
    def status_description(self, status_description):
        """Sets the status_description of this ConquestApiCsvImportStateResponse.


        :param status_description: The status_description of this ConquestApiCsvImportStateResponse.  # noqa: E501
        :type: str
        """

        self._status_description = status_description

    @property
    def task_progress(self):
        """Gets the task_progress of this ConquestApiCsvImportStateResponse.  # noqa: E501


        :return: The task_progress of this ConquestApiCsvImportStateResponse.  # noqa: E501
        :rtype: float
        """
        return self._task_progress

    @task_progress.setter
    def task_progress(self, task_progress):
        """Sets the task_progress of this ConquestApiCsvImportStateResponse.


        :param task_progress: The task_progress of this ConquestApiCsvImportStateResponse.  # noqa: E501
        :type: float
        """

        self._task_progress = task_progress

    @property
    def title(self):
        """Gets the title of this ConquestApiCsvImportStateResponse.  # noqa: E501


        :return: The title of this ConquestApiCsvImportStateResponse.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ConquestApiCsvImportStateResponse.


        :param title: The title of this ConquestApiCsvImportStateResponse.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def total_work(self):
        """Gets the total_work of this ConquestApiCsvImportStateResponse.  # noqa: E501


        :return: The total_work of this ConquestApiCsvImportStateResponse.  # noqa: E501
        :rtype: float
        """
        return self._total_work

    @total_work.setter
    def total_work(self, total_work):
        """Sets the total_work of this ConquestApiCsvImportStateResponse.


        :param total_work: The total_work of this ConquestApiCsvImportStateResponse.  # noqa: E501
        :type: float
        """

        self._total_work = total_work

    @property
    def work_done(self):
        """Gets the work_done of this ConquestApiCsvImportStateResponse.  # noqa: E501


        :return: The work_done of this ConquestApiCsvImportStateResponse.  # noqa: E501
        :rtype: float
        """
        return self._work_done

    @work_done.setter
    def work_done(self, work_done):
        """Sets the work_done of this ConquestApiCsvImportStateResponse.


        :param work_done: The work_done of this ConquestApiCsvImportStateResponse.  # noqa: E501
        :type: float
        """

        self._work_done = work_done

    @property
    def job_key(self):
        """Gets the job_key of this ConquestApiCsvImportStateResponse.  # noqa: E501


        :return: The job_key of this ConquestApiCsvImportStateResponse.  # noqa: E501
        :rtype: ConquestApiJobKey
        """
        return self._job_key

    @job_key.setter
    def job_key(self, job_key):
        """Sets the job_key of this ConquestApiCsvImportStateResponse.


        :param job_key: The job_key of this ConquestApiCsvImportStateResponse.  # noqa: E501
        :type: ConquestApiJobKey
        """

        self._job_key = job_key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConquestApiCsvImportStateResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConquestApiCsvImportStateResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
