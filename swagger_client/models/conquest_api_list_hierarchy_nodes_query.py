# coding: utf-8

"""
    Conquest API v4

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ConquestApiListHierarchyNodesQuery(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'include_ancestors': 'bool',
        'include_children': 'bool',
        'include_descendents': 'int',
        'include_siblings': 'bool',
        'include_sub_items': 'bool',
        'object_key': 'ConquestApiObjectKey'
    }

    attribute_map = {
        'include_ancestors': 'IncludeAncestors',
        'include_children': 'IncludeChildren',
        'include_descendents': 'IncludeDescendents',
        'include_siblings': 'IncludeSiblings',
        'include_sub_items': 'IncludeSubItems',
        'object_key': 'ObjectKey'
    }

    def __init__(self, include_ancestors=None, include_children=None, include_descendents=None, include_siblings=None, include_sub_items=None, object_key=None):  # noqa: E501
        """ConquestApiListHierarchyNodesQuery - a model defined in Swagger"""  # noqa: E501
        self._include_ancestors = None
        self._include_children = None
        self._include_descendents = None
        self._include_siblings = None
        self._include_sub_items = None
        self._object_key = None
        self.discriminator = None
        if include_ancestors is not None:
            self.include_ancestors = include_ancestors
        if include_children is not None:
            self.include_children = include_children
        if include_descendents is not None:
            self.include_descendents = include_descendents
        if include_siblings is not None:
            self.include_siblings = include_siblings
        if include_sub_items is not None:
            self.include_sub_items = include_sub_items
        if object_key is not None:
            self.object_key = object_key

    @property
    def include_ancestors(self):
        """Gets the include_ancestors of this ConquestApiListHierarchyNodesQuery.  # noqa: E501


        :return: The include_ancestors of this ConquestApiListHierarchyNodesQuery.  # noqa: E501
        :rtype: bool
        """
        return self._include_ancestors

    @include_ancestors.setter
    def include_ancestors(self, include_ancestors):
        """Sets the include_ancestors of this ConquestApiListHierarchyNodesQuery.


        :param include_ancestors: The include_ancestors of this ConquestApiListHierarchyNodesQuery.  # noqa: E501
        :type: bool
        """

        self._include_ancestors = include_ancestors

    @property
    def include_children(self):
        """Gets the include_children of this ConquestApiListHierarchyNodesQuery.  # noqa: E501


        :return: The include_children of this ConquestApiListHierarchyNodesQuery.  # noqa: E501
        :rtype: bool
        """
        return self._include_children

    @include_children.setter
    def include_children(self, include_children):
        """Sets the include_children of this ConquestApiListHierarchyNodesQuery.


        :param include_children: The include_children of this ConquestApiListHierarchyNodesQuery.  # noqa: E501
        :type: bool
        """

        self._include_children = include_children

    @property
    def include_descendents(self):
        """Gets the include_descendents of this ConquestApiListHierarchyNodesQuery.  # noqa: E501


        :return: The include_descendents of this ConquestApiListHierarchyNodesQuery.  # noqa: E501
        :rtype: int
        """
        return self._include_descendents

    @include_descendents.setter
    def include_descendents(self, include_descendents):
        """Sets the include_descendents of this ConquestApiListHierarchyNodesQuery.


        :param include_descendents: The include_descendents of this ConquestApiListHierarchyNodesQuery.  # noqa: E501
        :type: int
        """

        self._include_descendents = include_descendents

    @property
    def include_siblings(self):
        """Gets the include_siblings of this ConquestApiListHierarchyNodesQuery.  # noqa: E501


        :return: The include_siblings of this ConquestApiListHierarchyNodesQuery.  # noqa: E501
        :rtype: bool
        """
        return self._include_siblings

    @include_siblings.setter
    def include_siblings(self, include_siblings):
        """Sets the include_siblings of this ConquestApiListHierarchyNodesQuery.


        :param include_siblings: The include_siblings of this ConquestApiListHierarchyNodesQuery.  # noqa: E501
        :type: bool
        """

        self._include_siblings = include_siblings

    @property
    def include_sub_items(self):
        """Gets the include_sub_items of this ConquestApiListHierarchyNodesQuery.  # noqa: E501


        :return: The include_sub_items of this ConquestApiListHierarchyNodesQuery.  # noqa: E501
        :rtype: bool
        """
        return self._include_sub_items

    @include_sub_items.setter
    def include_sub_items(self, include_sub_items):
        """Sets the include_sub_items of this ConquestApiListHierarchyNodesQuery.


        :param include_sub_items: The include_sub_items of this ConquestApiListHierarchyNodesQuery.  # noqa: E501
        :type: bool
        """

        self._include_sub_items = include_sub_items

    @property
    def object_key(self):
        """Gets the object_key of this ConquestApiListHierarchyNodesQuery.  # noqa: E501


        :return: The object_key of this ConquestApiListHierarchyNodesQuery.  # noqa: E501
        :rtype: ConquestApiObjectKey
        """
        return self._object_key

    @object_key.setter
    def object_key(self, object_key):
        """Sets the object_key of this ConquestApiListHierarchyNodesQuery.


        :param object_key: The object_key of this ConquestApiListHierarchyNodesQuery.  # noqa: E501
        :type: ConquestApiObjectKey
        """

        self._object_key = object_key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConquestApiListHierarchyNodesQuery, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConquestApiListHierarchyNodesQuery):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
