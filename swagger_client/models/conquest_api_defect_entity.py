# coding: utf-8

"""
    Conquest API v4

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ConquestApiDefectEntity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action_id': 'int',
        'asset_id': 'int',
        'attribute_id': 'int',
        'completion_date': 'ConquestApiTimestampValue',
        'defect_id': 'int',
        'document_location': 'str',
        'edit_date': 'datetime',
        'editor': 'str',
        'inspection_id': 'int',
        'map_style': 'ConquestApiStyle',
        'permission': 'ConquestApiPermission',
        'record': 'ConquestApiDefectRecord',
        'response_date': 'ConquestApiTimestampValue',
        'severity_score': 'int',
        'sys_user_hierarchy1': 'int',
        'lock': 'ConquestApiLock'
    }

    attribute_map = {
        'action_id': 'ActionID',
        'asset_id': 'AssetID',
        'attribute_id': 'AttributeID',
        'completion_date': 'CompletionDate',
        'defect_id': 'DefectID',
        'document_location': 'DocumentLocation',
        'edit_date': 'EditDate',
        'editor': 'Editor',
        'inspection_id': 'InspectionID',
        'map_style': 'MapStyle',
        'permission': 'Permission',
        'record': 'Record',
        'response_date': 'ResponseDate',
        'severity_score': 'SeverityScore',
        'sys_user_hierarchy1': 'SysUserHierarchy1',
        'lock': 'lock'
    }

    def __init__(self, action_id=None, asset_id=None, attribute_id=None, completion_date=None, defect_id=None, document_location=None, edit_date=None, editor=None, inspection_id=None, map_style=None, permission=None, record=None, response_date=None, severity_score=None, sys_user_hierarchy1=None, lock=None):  # noqa: E501
        """ConquestApiDefectEntity - a model defined in Swagger"""  # noqa: E501
        self._action_id = None
        self._asset_id = None
        self._attribute_id = None
        self._completion_date = None
        self._defect_id = None
        self._document_location = None
        self._edit_date = None
        self._editor = None
        self._inspection_id = None
        self._map_style = None
        self._permission = None
        self._record = None
        self._response_date = None
        self._severity_score = None
        self._sys_user_hierarchy1 = None
        self._lock = None
        self.discriminator = None
        if action_id is not None:
            self.action_id = action_id
        if asset_id is not None:
            self.asset_id = asset_id
        if attribute_id is not None:
            self.attribute_id = attribute_id
        if completion_date is not None:
            self.completion_date = completion_date
        if defect_id is not None:
            self.defect_id = defect_id
        if document_location is not None:
            self.document_location = document_location
        if edit_date is not None:
            self.edit_date = edit_date
        if editor is not None:
            self.editor = editor
        if inspection_id is not None:
            self.inspection_id = inspection_id
        if map_style is not None:
            self.map_style = map_style
        if permission is not None:
            self.permission = permission
        if record is not None:
            self.record = record
        if response_date is not None:
            self.response_date = response_date
        if severity_score is not None:
            self.severity_score = severity_score
        if sys_user_hierarchy1 is not None:
            self.sys_user_hierarchy1 = sys_user_hierarchy1
        if lock is not None:
            self.lock = lock

    @property
    def action_id(self):
        """Gets the action_id of this ConquestApiDefectEntity.  # noqa: E501


        :return: The action_id of this ConquestApiDefectEntity.  # noqa: E501
        :rtype: int
        """
        return self._action_id

    @action_id.setter
    def action_id(self, action_id):
        """Sets the action_id of this ConquestApiDefectEntity.


        :param action_id: The action_id of this ConquestApiDefectEntity.  # noqa: E501
        :type: int
        """

        self._action_id = action_id

    @property
    def asset_id(self):
        """Gets the asset_id of this ConquestApiDefectEntity.  # noqa: E501


        :return: The asset_id of this ConquestApiDefectEntity.  # noqa: E501
        :rtype: int
        """
        return self._asset_id

    @asset_id.setter
    def asset_id(self, asset_id):
        """Sets the asset_id of this ConquestApiDefectEntity.


        :param asset_id: The asset_id of this ConquestApiDefectEntity.  # noqa: E501
        :type: int
        """

        self._asset_id = asset_id

    @property
    def attribute_id(self):
        """Gets the attribute_id of this ConquestApiDefectEntity.  # noqa: E501


        :return: The attribute_id of this ConquestApiDefectEntity.  # noqa: E501
        :rtype: int
        """
        return self._attribute_id

    @attribute_id.setter
    def attribute_id(self, attribute_id):
        """Sets the attribute_id of this ConquestApiDefectEntity.


        :param attribute_id: The attribute_id of this ConquestApiDefectEntity.  # noqa: E501
        :type: int
        """

        self._attribute_id = attribute_id

    @property
    def completion_date(self):
        """Gets the completion_date of this ConquestApiDefectEntity.  # noqa: E501


        :return: The completion_date of this ConquestApiDefectEntity.  # noqa: E501
        :rtype: ConquestApiTimestampValue
        """
        return self._completion_date

    @completion_date.setter
    def completion_date(self, completion_date):
        """Sets the completion_date of this ConquestApiDefectEntity.


        :param completion_date: The completion_date of this ConquestApiDefectEntity.  # noqa: E501
        :type: ConquestApiTimestampValue
        """

        self._completion_date = completion_date

    @property
    def defect_id(self):
        """Gets the defect_id of this ConquestApiDefectEntity.  # noqa: E501


        :return: The defect_id of this ConquestApiDefectEntity.  # noqa: E501
        :rtype: int
        """
        return self._defect_id

    @defect_id.setter
    def defect_id(self, defect_id):
        """Sets the defect_id of this ConquestApiDefectEntity.


        :param defect_id: The defect_id of this ConquestApiDefectEntity.  # noqa: E501
        :type: int
        """

        self._defect_id = defect_id

    @property
    def document_location(self):
        """Gets the document_location of this ConquestApiDefectEntity.  # noqa: E501


        :return: The document_location of this ConquestApiDefectEntity.  # noqa: E501
        :rtype: str
        """
        return self._document_location

    @document_location.setter
    def document_location(self, document_location):
        """Sets the document_location of this ConquestApiDefectEntity.


        :param document_location: The document_location of this ConquestApiDefectEntity.  # noqa: E501
        :type: str
        """

        self._document_location = document_location

    @property
    def edit_date(self):
        """Gets the edit_date of this ConquestApiDefectEntity.  # noqa: E501


        :return: The edit_date of this ConquestApiDefectEntity.  # noqa: E501
        :rtype: datetime
        """
        return self._edit_date

    @edit_date.setter
    def edit_date(self, edit_date):
        """Sets the edit_date of this ConquestApiDefectEntity.


        :param edit_date: The edit_date of this ConquestApiDefectEntity.  # noqa: E501
        :type: datetime
        """

        self._edit_date = edit_date

    @property
    def editor(self):
        """Gets the editor of this ConquestApiDefectEntity.  # noqa: E501


        :return: The editor of this ConquestApiDefectEntity.  # noqa: E501
        :rtype: str
        """
        return self._editor

    @editor.setter
    def editor(self, editor):
        """Sets the editor of this ConquestApiDefectEntity.


        :param editor: The editor of this ConquestApiDefectEntity.  # noqa: E501
        :type: str
        """

        self._editor = editor

    @property
    def inspection_id(self):
        """Gets the inspection_id of this ConquestApiDefectEntity.  # noqa: E501


        :return: The inspection_id of this ConquestApiDefectEntity.  # noqa: E501
        :rtype: int
        """
        return self._inspection_id

    @inspection_id.setter
    def inspection_id(self, inspection_id):
        """Sets the inspection_id of this ConquestApiDefectEntity.


        :param inspection_id: The inspection_id of this ConquestApiDefectEntity.  # noqa: E501
        :type: int
        """

        self._inspection_id = inspection_id

    @property
    def map_style(self):
        """Gets the map_style of this ConquestApiDefectEntity.  # noqa: E501


        :return: The map_style of this ConquestApiDefectEntity.  # noqa: E501
        :rtype: ConquestApiStyle
        """
        return self._map_style

    @map_style.setter
    def map_style(self, map_style):
        """Sets the map_style of this ConquestApiDefectEntity.


        :param map_style: The map_style of this ConquestApiDefectEntity.  # noqa: E501
        :type: ConquestApiStyle
        """

        self._map_style = map_style

    @property
    def permission(self):
        """Gets the permission of this ConquestApiDefectEntity.  # noqa: E501


        :return: The permission of this ConquestApiDefectEntity.  # noqa: E501
        :rtype: ConquestApiPermission
        """
        return self._permission

    @permission.setter
    def permission(self, permission):
        """Sets the permission of this ConquestApiDefectEntity.


        :param permission: The permission of this ConquestApiDefectEntity.  # noqa: E501
        :type: ConquestApiPermission
        """

        self._permission = permission

    @property
    def record(self):
        """Gets the record of this ConquestApiDefectEntity.  # noqa: E501


        :return: The record of this ConquestApiDefectEntity.  # noqa: E501
        :rtype: ConquestApiDefectRecord
        """
        return self._record

    @record.setter
    def record(self, record):
        """Sets the record of this ConquestApiDefectEntity.


        :param record: The record of this ConquestApiDefectEntity.  # noqa: E501
        :type: ConquestApiDefectRecord
        """

        self._record = record

    @property
    def response_date(self):
        """Gets the response_date of this ConquestApiDefectEntity.  # noqa: E501


        :return: The response_date of this ConquestApiDefectEntity.  # noqa: E501
        :rtype: ConquestApiTimestampValue
        """
        return self._response_date

    @response_date.setter
    def response_date(self, response_date):
        """Sets the response_date of this ConquestApiDefectEntity.


        :param response_date: The response_date of this ConquestApiDefectEntity.  # noqa: E501
        :type: ConquestApiTimestampValue
        """

        self._response_date = response_date

    @property
    def severity_score(self):
        """Gets the severity_score of this ConquestApiDefectEntity.  # noqa: E501


        :return: The severity_score of this ConquestApiDefectEntity.  # noqa: E501
        :rtype: int
        """
        return self._severity_score

    @severity_score.setter
    def severity_score(self, severity_score):
        """Sets the severity_score of this ConquestApiDefectEntity.


        :param severity_score: The severity_score of this ConquestApiDefectEntity.  # noqa: E501
        :type: int
        """

        self._severity_score = severity_score

    @property
    def sys_user_hierarchy1(self):
        """Gets the sys_user_hierarchy1 of this ConquestApiDefectEntity.  # noqa: E501


        :return: The sys_user_hierarchy1 of this ConquestApiDefectEntity.  # noqa: E501
        :rtype: int
        """
        return self._sys_user_hierarchy1

    @sys_user_hierarchy1.setter
    def sys_user_hierarchy1(self, sys_user_hierarchy1):
        """Sets the sys_user_hierarchy1 of this ConquestApiDefectEntity.


        :param sys_user_hierarchy1: The sys_user_hierarchy1 of this ConquestApiDefectEntity.  # noqa: E501
        :type: int
        """

        self._sys_user_hierarchy1 = sys_user_hierarchy1

    @property
    def lock(self):
        """Gets the lock of this ConquestApiDefectEntity.  # noqa: E501


        :return: The lock of this ConquestApiDefectEntity.  # noqa: E501
        :rtype: ConquestApiLock
        """
        return self._lock

    @lock.setter
    def lock(self, lock):
        """Sets the lock of this ConquestApiDefectEntity.


        :param lock: The lock of this ConquestApiDefectEntity.  # noqa: E501
        :type: ConquestApiLock
        """

        self._lock = lock

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConquestApiDefectEntity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConquestApiDefectEntity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
