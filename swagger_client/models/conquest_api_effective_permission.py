# coding: utf-8

"""
    Conquest API v4

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ConquestApiEffectivePermission(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'ConquestApiAccountID',
        'effective_permission': 'ConquestApiPermission',
        'facility_permission': 'ConquestApiFacilityPermission',
        'object_key': 'ConquestApiObjectKey',
        'object_permisions': 'list[ConquestApiObjectPermission]',
        'type_permisions': 'list[ConquestApiTypePermission]'
    }

    attribute_map = {
        'account_id': 'AccountID',
        'effective_permission': 'EffectivePermission',
        'facility_permission': 'FacilityPermission',
        'object_key': 'ObjectKey',
        'object_permisions': 'ObjectPermisions',
        'type_permisions': 'TypePermisions'
    }

    def __init__(self, account_id=None, effective_permission=None, facility_permission=None, object_key=None, object_permisions=None, type_permisions=None):  # noqa: E501
        """ConquestApiEffectivePermission - a model defined in Swagger"""  # noqa: E501
        self._account_id = None
        self._effective_permission = None
        self._facility_permission = None
        self._object_key = None
        self._object_permisions = None
        self._type_permisions = None
        self.discriminator = None
        if account_id is not None:
            self.account_id = account_id
        if effective_permission is not None:
            self.effective_permission = effective_permission
        if facility_permission is not None:
            self.facility_permission = facility_permission
        if object_key is not None:
            self.object_key = object_key
        if object_permisions is not None:
            self.object_permisions = object_permisions
        if type_permisions is not None:
            self.type_permisions = type_permisions

    @property
    def account_id(self):
        """Gets the account_id of this ConquestApiEffectivePermission.  # noqa: E501


        :return: The account_id of this ConquestApiEffectivePermission.  # noqa: E501
        :rtype: ConquestApiAccountID
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this ConquestApiEffectivePermission.


        :param account_id: The account_id of this ConquestApiEffectivePermission.  # noqa: E501
        :type: ConquestApiAccountID
        """

        self._account_id = account_id

    @property
    def effective_permission(self):
        """Gets the effective_permission of this ConquestApiEffectivePermission.  # noqa: E501


        :return: The effective_permission of this ConquestApiEffectivePermission.  # noqa: E501
        :rtype: ConquestApiPermission
        """
        return self._effective_permission

    @effective_permission.setter
    def effective_permission(self, effective_permission):
        """Sets the effective_permission of this ConquestApiEffectivePermission.


        :param effective_permission: The effective_permission of this ConquestApiEffectivePermission.  # noqa: E501
        :type: ConquestApiPermission
        """

        self._effective_permission = effective_permission

    @property
    def facility_permission(self):
        """Gets the facility_permission of this ConquestApiEffectivePermission.  # noqa: E501


        :return: The facility_permission of this ConquestApiEffectivePermission.  # noqa: E501
        :rtype: ConquestApiFacilityPermission
        """
        return self._facility_permission

    @facility_permission.setter
    def facility_permission(self, facility_permission):
        """Sets the facility_permission of this ConquestApiEffectivePermission.


        :param facility_permission: The facility_permission of this ConquestApiEffectivePermission.  # noqa: E501
        :type: ConquestApiFacilityPermission
        """

        self._facility_permission = facility_permission

    @property
    def object_key(self):
        """Gets the object_key of this ConquestApiEffectivePermission.  # noqa: E501


        :return: The object_key of this ConquestApiEffectivePermission.  # noqa: E501
        :rtype: ConquestApiObjectKey
        """
        return self._object_key

    @object_key.setter
    def object_key(self, object_key):
        """Sets the object_key of this ConquestApiEffectivePermission.


        :param object_key: The object_key of this ConquestApiEffectivePermission.  # noqa: E501
        :type: ConquestApiObjectKey
        """

        self._object_key = object_key

    @property
    def object_permisions(self):
        """Gets the object_permisions of this ConquestApiEffectivePermission.  # noqa: E501


        :return: The object_permisions of this ConquestApiEffectivePermission.  # noqa: E501
        :rtype: list[ConquestApiObjectPermission]
        """
        return self._object_permisions

    @object_permisions.setter
    def object_permisions(self, object_permisions):
        """Sets the object_permisions of this ConquestApiEffectivePermission.


        :param object_permisions: The object_permisions of this ConquestApiEffectivePermission.  # noqa: E501
        :type: list[ConquestApiObjectPermission]
        """

        self._object_permisions = object_permisions

    @property
    def type_permisions(self):
        """Gets the type_permisions of this ConquestApiEffectivePermission.  # noqa: E501


        :return: The type_permisions of this ConquestApiEffectivePermission.  # noqa: E501
        :rtype: list[ConquestApiTypePermission]
        """
        return self._type_permisions

    @type_permisions.setter
    def type_permisions(self, type_permisions):
        """Sets the type_permisions of this ConquestApiEffectivePermission.


        :param type_permisions: The type_permisions of this ConquestApiEffectivePermission.  # noqa: E501
        :type: list[ConquestApiTypePermission]
        """

        self._type_permisions = type_permisions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConquestApiEffectivePermission, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConquestApiEffectivePermission):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
