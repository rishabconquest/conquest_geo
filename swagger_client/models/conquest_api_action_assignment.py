# coding: utf-8

"""
    Conquest API v4

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ConquestApiActionAssignment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'act_cpu': 'ConquestApiDecimalValue',
        'act_quantity': 'float',
        'act_rate': 'ConquestApiDecimalValue',
        'after_completion': 'bool',
        'assignment_id': 'int',
        'est_cpu': 'ConquestApiDecimalValue',
        'est_quantity': 'float',
        'est_rate': 'ConquestApiDecimalValue',
        'material_units': 'int',
        'resource_description': 'str',
        'resource_id': 'int',
        'start_date': 'datetime',
        'units': 'float'
    }

    attribute_map = {
        'act_cpu': 'ActCPU',
        'act_quantity': 'ActQuantity',
        'act_rate': 'ActRate',
        'after_completion': 'AfterCompletion',
        'assignment_id': 'AssignmentID',
        'est_cpu': 'EstCPU',
        'est_quantity': 'EstQuantity',
        'est_rate': 'EstRate',
        'material_units': 'MaterialUnits',
        'resource_description': 'ResourceDescription',
        'resource_id': 'ResourceID',
        'start_date': 'StartDate',
        'units': 'Units'
    }

    def __init__(self, act_cpu=None, act_quantity=None, act_rate=None, after_completion=None, assignment_id=None, est_cpu=None, est_quantity=None, est_rate=None, material_units=None, resource_description=None, resource_id=None, start_date=None, units=None):  # noqa: E501
        """ConquestApiActionAssignment - a model defined in Swagger"""  # noqa: E501
        self._act_cpu = None
        self._act_quantity = None
        self._act_rate = None
        self._after_completion = None
        self._assignment_id = None
        self._est_cpu = None
        self._est_quantity = None
        self._est_rate = None
        self._material_units = None
        self._resource_description = None
        self._resource_id = None
        self._start_date = None
        self._units = None
        self.discriminator = None
        if act_cpu is not None:
            self.act_cpu = act_cpu
        if act_quantity is not None:
            self.act_quantity = act_quantity
        if act_rate is not None:
            self.act_rate = act_rate
        if after_completion is not None:
            self.after_completion = after_completion
        if assignment_id is not None:
            self.assignment_id = assignment_id
        if est_cpu is not None:
            self.est_cpu = est_cpu
        if est_quantity is not None:
            self.est_quantity = est_quantity
        if est_rate is not None:
            self.est_rate = est_rate
        if material_units is not None:
            self.material_units = material_units
        if resource_description is not None:
            self.resource_description = resource_description
        if resource_id is not None:
            self.resource_id = resource_id
        if start_date is not None:
            self.start_date = start_date
        if units is not None:
            self.units = units

    @property
    def act_cpu(self):
        """Gets the act_cpu of this ConquestApiActionAssignment.  # noqa: E501


        :return: The act_cpu of this ConquestApiActionAssignment.  # noqa: E501
        :rtype: ConquestApiDecimalValue
        """
        return self._act_cpu

    @act_cpu.setter
    def act_cpu(self, act_cpu):
        """Sets the act_cpu of this ConquestApiActionAssignment.


        :param act_cpu: The act_cpu of this ConquestApiActionAssignment.  # noqa: E501
        :type: ConquestApiDecimalValue
        """

        self._act_cpu = act_cpu

    @property
    def act_quantity(self):
        """Gets the act_quantity of this ConquestApiActionAssignment.  # noqa: E501


        :return: The act_quantity of this ConquestApiActionAssignment.  # noqa: E501
        :rtype: float
        """
        return self._act_quantity

    @act_quantity.setter
    def act_quantity(self, act_quantity):
        """Sets the act_quantity of this ConquestApiActionAssignment.


        :param act_quantity: The act_quantity of this ConquestApiActionAssignment.  # noqa: E501
        :type: float
        """

        self._act_quantity = act_quantity

    @property
    def act_rate(self):
        """Gets the act_rate of this ConquestApiActionAssignment.  # noqa: E501


        :return: The act_rate of this ConquestApiActionAssignment.  # noqa: E501
        :rtype: ConquestApiDecimalValue
        """
        return self._act_rate

    @act_rate.setter
    def act_rate(self, act_rate):
        """Sets the act_rate of this ConquestApiActionAssignment.


        :param act_rate: The act_rate of this ConquestApiActionAssignment.  # noqa: E501
        :type: ConquestApiDecimalValue
        """

        self._act_rate = act_rate

    @property
    def after_completion(self):
        """Gets the after_completion of this ConquestApiActionAssignment.  # noqa: E501


        :return: The after_completion of this ConquestApiActionAssignment.  # noqa: E501
        :rtype: bool
        """
        return self._after_completion

    @after_completion.setter
    def after_completion(self, after_completion):
        """Sets the after_completion of this ConquestApiActionAssignment.


        :param after_completion: The after_completion of this ConquestApiActionAssignment.  # noqa: E501
        :type: bool
        """

        self._after_completion = after_completion

    @property
    def assignment_id(self):
        """Gets the assignment_id of this ConquestApiActionAssignment.  # noqa: E501


        :return: The assignment_id of this ConquestApiActionAssignment.  # noqa: E501
        :rtype: int
        """
        return self._assignment_id

    @assignment_id.setter
    def assignment_id(self, assignment_id):
        """Sets the assignment_id of this ConquestApiActionAssignment.


        :param assignment_id: The assignment_id of this ConquestApiActionAssignment.  # noqa: E501
        :type: int
        """

        self._assignment_id = assignment_id

    @property
    def est_cpu(self):
        """Gets the est_cpu of this ConquestApiActionAssignment.  # noqa: E501


        :return: The est_cpu of this ConquestApiActionAssignment.  # noqa: E501
        :rtype: ConquestApiDecimalValue
        """
        return self._est_cpu

    @est_cpu.setter
    def est_cpu(self, est_cpu):
        """Sets the est_cpu of this ConquestApiActionAssignment.


        :param est_cpu: The est_cpu of this ConquestApiActionAssignment.  # noqa: E501
        :type: ConquestApiDecimalValue
        """

        self._est_cpu = est_cpu

    @property
    def est_quantity(self):
        """Gets the est_quantity of this ConquestApiActionAssignment.  # noqa: E501


        :return: The est_quantity of this ConquestApiActionAssignment.  # noqa: E501
        :rtype: float
        """
        return self._est_quantity

    @est_quantity.setter
    def est_quantity(self, est_quantity):
        """Sets the est_quantity of this ConquestApiActionAssignment.


        :param est_quantity: The est_quantity of this ConquestApiActionAssignment.  # noqa: E501
        :type: float
        """

        self._est_quantity = est_quantity

    @property
    def est_rate(self):
        """Gets the est_rate of this ConquestApiActionAssignment.  # noqa: E501


        :return: The est_rate of this ConquestApiActionAssignment.  # noqa: E501
        :rtype: ConquestApiDecimalValue
        """
        return self._est_rate

    @est_rate.setter
    def est_rate(self, est_rate):
        """Sets the est_rate of this ConquestApiActionAssignment.


        :param est_rate: The est_rate of this ConquestApiActionAssignment.  # noqa: E501
        :type: ConquestApiDecimalValue
        """

        self._est_rate = est_rate

    @property
    def material_units(self):
        """Gets the material_units of this ConquestApiActionAssignment.  # noqa: E501


        :return: The material_units of this ConquestApiActionAssignment.  # noqa: E501
        :rtype: int
        """
        return self._material_units

    @material_units.setter
    def material_units(self, material_units):
        """Sets the material_units of this ConquestApiActionAssignment.


        :param material_units: The material_units of this ConquestApiActionAssignment.  # noqa: E501
        :type: int
        """

        self._material_units = material_units

    @property
    def resource_description(self):
        """Gets the resource_description of this ConquestApiActionAssignment.  # noqa: E501


        :return: The resource_description of this ConquestApiActionAssignment.  # noqa: E501
        :rtype: str
        """
        return self._resource_description

    @resource_description.setter
    def resource_description(self, resource_description):
        """Sets the resource_description of this ConquestApiActionAssignment.


        :param resource_description: The resource_description of this ConquestApiActionAssignment.  # noqa: E501
        :type: str
        """

        self._resource_description = resource_description

    @property
    def resource_id(self):
        """Gets the resource_id of this ConquestApiActionAssignment.  # noqa: E501


        :return: The resource_id of this ConquestApiActionAssignment.  # noqa: E501
        :rtype: int
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this ConquestApiActionAssignment.


        :param resource_id: The resource_id of this ConquestApiActionAssignment.  # noqa: E501
        :type: int
        """

        self._resource_id = resource_id

    @property
    def start_date(self):
        """Gets the start_date of this ConquestApiActionAssignment.  # noqa: E501


        :return: The start_date of this ConquestApiActionAssignment.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this ConquestApiActionAssignment.


        :param start_date: The start_date of this ConquestApiActionAssignment.  # noqa: E501
        :type: datetime
        """

        self._start_date = start_date

    @property
    def units(self):
        """Gets the units of this ConquestApiActionAssignment.  # noqa: E501


        :return: The units of this ConquestApiActionAssignment.  # noqa: E501
        :rtype: float
        """
        return self._units

    @units.setter
    def units(self, units):
        """Sets the units of this ConquestApiActionAssignment.


        :param units: The units of this ConquestApiActionAssignment.  # noqa: E501
        :type: float
        """

        self._units = units

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConquestApiActionAssignment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConquestApiActionAssignment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
