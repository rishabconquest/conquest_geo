# coding: utf-8

"""
    Conquest API v4

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ConquestApiTrimDocument(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'date_created': 'ConquestApiTimestampValue',
        'doc_type': 'str',
        'record_number': 'str',
        'record_type': 'str',
        'title': 'str',
        'uri': 'str'
    }

    attribute_map = {
        'date_created': 'DateCreated',
        'doc_type': 'DocType',
        'record_number': 'RecordNumber',
        'record_type': 'RecordType',
        'title': 'Title',
        'uri': 'Uri'
    }

    def __init__(self, date_created=None, doc_type=None, record_number=None, record_type=None, title=None, uri=None):  # noqa: E501
        """ConquestApiTrimDocument - a model defined in Swagger"""  # noqa: E501
        self._date_created = None
        self._doc_type = None
        self._record_number = None
        self._record_type = None
        self._title = None
        self._uri = None
        self.discriminator = None
        if date_created is not None:
            self.date_created = date_created
        if doc_type is not None:
            self.doc_type = doc_type
        if record_number is not None:
            self.record_number = record_number
        if record_type is not None:
            self.record_type = record_type
        if title is not None:
            self.title = title
        if uri is not None:
            self.uri = uri

    @property
    def date_created(self):
        """Gets the date_created of this ConquestApiTrimDocument.  # noqa: E501


        :return: The date_created of this ConquestApiTrimDocument.  # noqa: E501
        :rtype: ConquestApiTimestampValue
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this ConquestApiTrimDocument.


        :param date_created: The date_created of this ConquestApiTrimDocument.  # noqa: E501
        :type: ConquestApiTimestampValue
        """

        self._date_created = date_created

    @property
    def doc_type(self):
        """Gets the doc_type of this ConquestApiTrimDocument.  # noqa: E501


        :return: The doc_type of this ConquestApiTrimDocument.  # noqa: E501
        :rtype: str
        """
        return self._doc_type

    @doc_type.setter
    def doc_type(self, doc_type):
        """Sets the doc_type of this ConquestApiTrimDocument.


        :param doc_type: The doc_type of this ConquestApiTrimDocument.  # noqa: E501
        :type: str
        """

        self._doc_type = doc_type

    @property
    def record_number(self):
        """Gets the record_number of this ConquestApiTrimDocument.  # noqa: E501


        :return: The record_number of this ConquestApiTrimDocument.  # noqa: E501
        :rtype: str
        """
        return self._record_number

    @record_number.setter
    def record_number(self, record_number):
        """Sets the record_number of this ConquestApiTrimDocument.


        :param record_number: The record_number of this ConquestApiTrimDocument.  # noqa: E501
        :type: str
        """

        self._record_number = record_number

    @property
    def record_type(self):
        """Gets the record_type of this ConquestApiTrimDocument.  # noqa: E501


        :return: The record_type of this ConquestApiTrimDocument.  # noqa: E501
        :rtype: str
        """
        return self._record_type

    @record_type.setter
    def record_type(self, record_type):
        """Sets the record_type of this ConquestApiTrimDocument.


        :param record_type: The record_type of this ConquestApiTrimDocument.  # noqa: E501
        :type: str
        """

        self._record_type = record_type

    @property
    def title(self):
        """Gets the title of this ConquestApiTrimDocument.  # noqa: E501


        :return: The title of this ConquestApiTrimDocument.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ConquestApiTrimDocument.


        :param title: The title of this ConquestApiTrimDocument.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def uri(self):
        """Gets the uri of this ConquestApiTrimDocument.  # noqa: E501


        :return: The uri of this ConquestApiTrimDocument.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this ConquestApiTrimDocument.


        :param uri: The uri of this ConquestApiTrimDocument.  # noqa: E501
        :type: str
        """

        self._uri = uri

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConquestApiTrimDocument, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConquestApiTrimDocument):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
