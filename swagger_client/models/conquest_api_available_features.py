# coding: utf-8

"""
    Conquest API v4

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ConquestApiAvailableFeatures(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'azure_address_search': 'bool',
        'documents': 'bool',
        'emails': 'bool',
        'google_places_search': 'bool',
        'trim_documents': 'bool'
    }

    attribute_map = {
        'azure_address_search': 'AzureAddressSearch',
        'documents': 'Documents',
        'emails': 'Emails',
        'google_places_search': 'GooglePlacesSearch',
        'trim_documents': 'TrimDocuments'
    }

    def __init__(self, azure_address_search=None, documents=None, emails=None, google_places_search=None, trim_documents=None):  # noqa: E501
        """ConquestApiAvailableFeatures - a model defined in Swagger"""  # noqa: E501
        self._azure_address_search = None
        self._documents = None
        self._emails = None
        self._google_places_search = None
        self._trim_documents = None
        self.discriminator = None
        if azure_address_search is not None:
            self.azure_address_search = azure_address_search
        if documents is not None:
            self.documents = documents
        if emails is not None:
            self.emails = emails
        if google_places_search is not None:
            self.google_places_search = google_places_search
        if trim_documents is not None:
            self.trim_documents = trim_documents

    @property
    def azure_address_search(self):
        """Gets the azure_address_search of this ConquestApiAvailableFeatures.  # noqa: E501


        :return: The azure_address_search of this ConquestApiAvailableFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._azure_address_search

    @azure_address_search.setter
    def azure_address_search(self, azure_address_search):
        """Sets the azure_address_search of this ConquestApiAvailableFeatures.


        :param azure_address_search: The azure_address_search of this ConquestApiAvailableFeatures.  # noqa: E501
        :type: bool
        """

        self._azure_address_search = azure_address_search

    @property
    def documents(self):
        """Gets the documents of this ConquestApiAvailableFeatures.  # noqa: E501


        :return: The documents of this ConquestApiAvailableFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._documents

    @documents.setter
    def documents(self, documents):
        """Sets the documents of this ConquestApiAvailableFeatures.


        :param documents: The documents of this ConquestApiAvailableFeatures.  # noqa: E501
        :type: bool
        """

        self._documents = documents

    @property
    def emails(self):
        """Gets the emails of this ConquestApiAvailableFeatures.  # noqa: E501


        :return: The emails of this ConquestApiAvailableFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._emails

    @emails.setter
    def emails(self, emails):
        """Sets the emails of this ConquestApiAvailableFeatures.


        :param emails: The emails of this ConquestApiAvailableFeatures.  # noqa: E501
        :type: bool
        """

        self._emails = emails

    @property
    def google_places_search(self):
        """Gets the google_places_search of this ConquestApiAvailableFeatures.  # noqa: E501


        :return: The google_places_search of this ConquestApiAvailableFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._google_places_search

    @google_places_search.setter
    def google_places_search(self, google_places_search):
        """Sets the google_places_search of this ConquestApiAvailableFeatures.


        :param google_places_search: The google_places_search of this ConquestApiAvailableFeatures.  # noqa: E501
        :type: bool
        """

        self._google_places_search = google_places_search

    @property
    def trim_documents(self):
        """Gets the trim_documents of this ConquestApiAvailableFeatures.  # noqa: E501


        :return: The trim_documents of this ConquestApiAvailableFeatures.  # noqa: E501
        :rtype: bool
        """
        return self._trim_documents

    @trim_documents.setter
    def trim_documents(self, trim_documents):
        """Sets the trim_documents of this ConquestApiAvailableFeatures.


        :param trim_documents: The trim_documents of this ConquestApiAvailableFeatures.  # noqa: E501
        :type: bool
        """

        self._trim_documents = trim_documents

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConquestApiAvailableFeatures, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConquestApiAvailableFeatures):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
