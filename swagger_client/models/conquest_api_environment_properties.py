# coding: utf-8

"""
    Conquest API v4

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ConquestApiEnvironmentProperties(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'data_directory': 'str',
        'data_directory_token': 'str',
        'hostname': 'str',
        'uploads_directory': 'str',
        'uploads_directory_token': 'str',
        'legacy_document_directories': 'list[ConquestApiLegacyDocumentDirectory]'
    }

    attribute_map = {
        'data_directory': 'DataDirectory',
        'data_directory_token': 'DataDirectoryToken',
        'hostname': 'Hostname',
        'uploads_directory': 'UploadsDirectory',
        'uploads_directory_token': 'UploadsDirectoryToken',
        'legacy_document_directories': 'legacy_document_directories'
    }

    def __init__(self, data_directory=None, data_directory_token=None, hostname=None, uploads_directory=None, uploads_directory_token=None, legacy_document_directories=None):  # noqa: E501
        """ConquestApiEnvironmentProperties - a model defined in Swagger"""  # noqa: E501
        self._data_directory = None
        self._data_directory_token = None
        self._hostname = None
        self._uploads_directory = None
        self._uploads_directory_token = None
        self._legacy_document_directories = None
        self.discriminator = None
        if data_directory is not None:
            self.data_directory = data_directory
        if data_directory_token is not None:
            self.data_directory_token = data_directory_token
        if hostname is not None:
            self.hostname = hostname
        if uploads_directory is not None:
            self.uploads_directory = uploads_directory
        if uploads_directory_token is not None:
            self.uploads_directory_token = uploads_directory_token
        if legacy_document_directories is not None:
            self.legacy_document_directories = legacy_document_directories

    @property
    def data_directory(self):
        """Gets the data_directory of this ConquestApiEnvironmentProperties.  # noqa: E501


        :return: The data_directory of this ConquestApiEnvironmentProperties.  # noqa: E501
        :rtype: str
        """
        return self._data_directory

    @data_directory.setter
    def data_directory(self, data_directory):
        """Sets the data_directory of this ConquestApiEnvironmentProperties.


        :param data_directory: The data_directory of this ConquestApiEnvironmentProperties.  # noqa: E501
        :type: str
        """

        self._data_directory = data_directory

    @property
    def data_directory_token(self):
        """Gets the data_directory_token of this ConquestApiEnvironmentProperties.  # noqa: E501


        :return: The data_directory_token of this ConquestApiEnvironmentProperties.  # noqa: E501
        :rtype: str
        """
        return self._data_directory_token

    @data_directory_token.setter
    def data_directory_token(self, data_directory_token):
        """Sets the data_directory_token of this ConquestApiEnvironmentProperties.


        :param data_directory_token: The data_directory_token of this ConquestApiEnvironmentProperties.  # noqa: E501
        :type: str
        """

        self._data_directory_token = data_directory_token

    @property
    def hostname(self):
        """Gets the hostname of this ConquestApiEnvironmentProperties.  # noqa: E501


        :return: The hostname of this ConquestApiEnvironmentProperties.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this ConquestApiEnvironmentProperties.


        :param hostname: The hostname of this ConquestApiEnvironmentProperties.  # noqa: E501
        :type: str
        """

        self._hostname = hostname

    @property
    def uploads_directory(self):
        """Gets the uploads_directory of this ConquestApiEnvironmentProperties.  # noqa: E501


        :return: The uploads_directory of this ConquestApiEnvironmentProperties.  # noqa: E501
        :rtype: str
        """
        return self._uploads_directory

    @uploads_directory.setter
    def uploads_directory(self, uploads_directory):
        """Sets the uploads_directory of this ConquestApiEnvironmentProperties.


        :param uploads_directory: The uploads_directory of this ConquestApiEnvironmentProperties.  # noqa: E501
        :type: str
        """

        self._uploads_directory = uploads_directory

    @property
    def uploads_directory_token(self):
        """Gets the uploads_directory_token of this ConquestApiEnvironmentProperties.  # noqa: E501


        :return: The uploads_directory_token of this ConquestApiEnvironmentProperties.  # noqa: E501
        :rtype: str
        """
        return self._uploads_directory_token

    @uploads_directory_token.setter
    def uploads_directory_token(self, uploads_directory_token):
        """Sets the uploads_directory_token of this ConquestApiEnvironmentProperties.


        :param uploads_directory_token: The uploads_directory_token of this ConquestApiEnvironmentProperties.  # noqa: E501
        :type: str
        """

        self._uploads_directory_token = uploads_directory_token

    @property
    def legacy_document_directories(self):
        """Gets the legacy_document_directories of this ConquestApiEnvironmentProperties.  # noqa: E501


        :return: The legacy_document_directories of this ConquestApiEnvironmentProperties.  # noqa: E501
        :rtype: list[ConquestApiLegacyDocumentDirectory]
        """
        return self._legacy_document_directories

    @legacy_document_directories.setter
    def legacy_document_directories(self, legacy_document_directories):
        """Sets the legacy_document_directories of this ConquestApiEnvironmentProperties.


        :param legacy_document_directories: The legacy_document_directories of this ConquestApiEnvironmentProperties.  # noqa: E501
        :type: list[ConquestApiLegacyDocumentDirectory]
        """

        self._legacy_document_directories = legacy_document_directories

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConquestApiEnvironmentProperties, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConquestApiEnvironmentProperties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
