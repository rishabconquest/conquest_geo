# coding: utf-8

"""
    Conquest API v4

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ConquestApiStyle(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'font_style': 'ConquestApiFontStyle',
        'line_style': 'ConquestApiLineStyle',
        'shape_style': 'ConquestApiShapeStyle',
        'style_type': 'str'
    }

    attribute_map = {
        'font_style': 'FontStyle',
        'line_style': 'LineStyle',
        'shape_style': 'ShapeStyle',
        'style_type': 'StyleType'
    }

    def __init__(self, font_style=None, line_style=None, shape_style=None, style_type=None):  # noqa: E501
        """ConquestApiStyle - a model defined in Swagger"""  # noqa: E501
        self._font_style = None
        self._line_style = None
        self._shape_style = None
        self._style_type = None
        self.discriminator = None
        if font_style is not None:
            self.font_style = font_style
        if line_style is not None:
            self.line_style = line_style
        if shape_style is not None:
            self.shape_style = shape_style
        if style_type is not None:
            self.style_type = style_type

    @property
    def font_style(self):
        """Gets the font_style of this ConquestApiStyle.  # noqa: E501


        :return: The font_style of this ConquestApiStyle.  # noqa: E501
        :rtype: ConquestApiFontStyle
        """
        return self._font_style

    @font_style.setter
    def font_style(self, font_style):
        """Sets the font_style of this ConquestApiStyle.


        :param font_style: The font_style of this ConquestApiStyle.  # noqa: E501
        :type: ConquestApiFontStyle
        """

        self._font_style = font_style

    @property
    def line_style(self):
        """Gets the line_style of this ConquestApiStyle.  # noqa: E501


        :return: The line_style of this ConquestApiStyle.  # noqa: E501
        :rtype: ConquestApiLineStyle
        """
        return self._line_style

    @line_style.setter
    def line_style(self, line_style):
        """Sets the line_style of this ConquestApiStyle.


        :param line_style: The line_style of this ConquestApiStyle.  # noqa: E501
        :type: ConquestApiLineStyle
        """

        self._line_style = line_style

    @property
    def shape_style(self):
        """Gets the shape_style of this ConquestApiStyle.  # noqa: E501


        :return: The shape_style of this ConquestApiStyle.  # noqa: E501
        :rtype: ConquestApiShapeStyle
        """
        return self._shape_style

    @shape_style.setter
    def shape_style(self, shape_style):
        """Sets the shape_style of this ConquestApiStyle.


        :param shape_style: The shape_style of this ConquestApiStyle.  # noqa: E501
        :type: ConquestApiShapeStyle
        """

        self._shape_style = shape_style

    @property
    def style_type(self):
        """Gets the style_type of this ConquestApiStyle.  # noqa: E501


        :return: The style_type of this ConquestApiStyle.  # noqa: E501
        :rtype: str
        """
        return self._style_type

    @style_type.setter
    def style_type(self, style_type):
        """Sets the style_type of this ConquestApiStyle.


        :param style_type: The style_type of this ConquestApiStyle.  # noqa: E501
        :type: str
        """

        self._style_type = style_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConquestApiStyle, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConquestApiStyle):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
