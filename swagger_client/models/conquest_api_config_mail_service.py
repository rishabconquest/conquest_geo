# coding: utf-8

"""
    Conquest API v4

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ConquestApiConfigMailService(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'enabled': 'bool',
        '_from': 'str',
        'password': 'str',
        'username': 'str'
    }

    attribute_map = {
        'enabled': 'enabled',
        '_from': 'from',
        'password': 'password',
        'username': 'username'
    }

    def __init__(self, enabled=None, _from=None, password=None, username=None):  # noqa: E501
        """ConquestApiConfigMailService - a model defined in Swagger"""  # noqa: E501
        self._enabled = None
        self.__from = None
        self._password = None
        self._username = None
        self.discriminator = None
        if enabled is not None:
            self.enabled = enabled
        if _from is not None:
            self._from = _from
        if password is not None:
            self.password = password
        if username is not None:
            self.username = username

    @property
    def enabled(self):
        """Gets the enabled of this ConquestApiConfigMailService.  # noqa: E501


        :return: The enabled of this ConquestApiConfigMailService.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this ConquestApiConfigMailService.


        :param enabled: The enabled of this ConquestApiConfigMailService.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def _from(self):
        """Gets the _from of this ConquestApiConfigMailService.  # noqa: E501


        :return: The _from of this ConquestApiConfigMailService.  # noqa: E501
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this ConquestApiConfigMailService.


        :param _from: The _from of this ConquestApiConfigMailService.  # noqa: E501
        :type: str
        """

        self.__from = _from

    @property
    def password(self):
        """Gets the password of this ConquestApiConfigMailService.  # noqa: E501


        :return: The password of this ConquestApiConfigMailService.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this ConquestApiConfigMailService.


        :param password: The password of this ConquestApiConfigMailService.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def username(self):
        """Gets the username of this ConquestApiConfigMailService.  # noqa: E501


        :return: The username of this ConquestApiConfigMailService.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this ConquestApiConfigMailService.


        :param username: The username of this ConquestApiConfigMailService.  # noqa: E501
        :type: str
        """

        self._username = username

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConquestApiConfigMailService, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConquestApiConfigMailService):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
