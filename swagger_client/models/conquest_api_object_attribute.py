# coding: utf-8

"""
    Conquest API v4

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ConquestApiObjectAttribute(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'caption': 'str',
        'foreign_object_path': 'str',
        'foreign_object_type': 'ConquestApiObjectType',
        'nullable': 'bool',
        'object_attribute_kind': 'ConquestApiObjectAttributeKind',
        'object_type': 'ConquestApiObjectType',
        'parameter': 'str',
        'parameter_type': 'ConquestApiObjectAttributeParameterType',
        'path': 'str',
        'primary_key': 'bool',
        'value_type': 'ConquestApiValueType'
    }

    attribute_map = {
        'caption': 'Caption',
        'foreign_object_path': 'ForeignObjectPath',
        'foreign_object_type': 'ForeignObjectType',
        'nullable': 'Nullable',
        'object_attribute_kind': 'ObjectAttributeKind',
        'object_type': 'ObjectType',
        'parameter': 'Parameter',
        'parameter_type': 'ParameterType',
        'path': 'Path',
        'primary_key': 'PrimaryKey',
        'value_type': 'ValueType'
    }

    def __init__(self, caption=None, foreign_object_path=None, foreign_object_type=None, nullable=None, object_attribute_kind=None, object_type=None, parameter=None, parameter_type=None, path=None, primary_key=None, value_type=None):  # noqa: E501
        """ConquestApiObjectAttribute - a model defined in Swagger"""  # noqa: E501
        self._caption = None
        self._foreign_object_path = None
        self._foreign_object_type = None
        self._nullable = None
        self._object_attribute_kind = None
        self._object_type = None
        self._parameter = None
        self._parameter_type = None
        self._path = None
        self._primary_key = None
        self._value_type = None
        self.discriminator = None
        if caption is not None:
            self.caption = caption
        if foreign_object_path is not None:
            self.foreign_object_path = foreign_object_path
        if foreign_object_type is not None:
            self.foreign_object_type = foreign_object_type
        if nullable is not None:
            self.nullable = nullable
        if object_attribute_kind is not None:
            self.object_attribute_kind = object_attribute_kind
        if object_type is not None:
            self.object_type = object_type
        if parameter is not None:
            self.parameter = parameter
        if parameter_type is not None:
            self.parameter_type = parameter_type
        if path is not None:
            self.path = path
        if primary_key is not None:
            self.primary_key = primary_key
        if value_type is not None:
            self.value_type = value_type

    @property
    def caption(self):
        """Gets the caption of this ConquestApiObjectAttribute.  # noqa: E501


        :return: The caption of this ConquestApiObjectAttribute.  # noqa: E501
        :rtype: str
        """
        return self._caption

    @caption.setter
    def caption(self, caption):
        """Sets the caption of this ConquestApiObjectAttribute.


        :param caption: The caption of this ConquestApiObjectAttribute.  # noqa: E501
        :type: str
        """

        self._caption = caption

    @property
    def foreign_object_path(self):
        """Gets the foreign_object_path of this ConquestApiObjectAttribute.  # noqa: E501


        :return: The foreign_object_path of this ConquestApiObjectAttribute.  # noqa: E501
        :rtype: str
        """
        return self._foreign_object_path

    @foreign_object_path.setter
    def foreign_object_path(self, foreign_object_path):
        """Sets the foreign_object_path of this ConquestApiObjectAttribute.


        :param foreign_object_path: The foreign_object_path of this ConquestApiObjectAttribute.  # noqa: E501
        :type: str
        """

        self._foreign_object_path = foreign_object_path

    @property
    def foreign_object_type(self):
        """Gets the foreign_object_type of this ConquestApiObjectAttribute.  # noqa: E501


        :return: The foreign_object_type of this ConquestApiObjectAttribute.  # noqa: E501
        :rtype: ConquestApiObjectType
        """
        return self._foreign_object_type

    @foreign_object_type.setter
    def foreign_object_type(self, foreign_object_type):
        """Sets the foreign_object_type of this ConquestApiObjectAttribute.


        :param foreign_object_type: The foreign_object_type of this ConquestApiObjectAttribute.  # noqa: E501
        :type: ConquestApiObjectType
        """

        self._foreign_object_type = foreign_object_type

    @property
    def nullable(self):
        """Gets the nullable of this ConquestApiObjectAttribute.  # noqa: E501


        :return: The nullable of this ConquestApiObjectAttribute.  # noqa: E501
        :rtype: bool
        """
        return self._nullable

    @nullable.setter
    def nullable(self, nullable):
        """Sets the nullable of this ConquestApiObjectAttribute.


        :param nullable: The nullable of this ConquestApiObjectAttribute.  # noqa: E501
        :type: bool
        """

        self._nullable = nullable

    @property
    def object_attribute_kind(self):
        """Gets the object_attribute_kind of this ConquestApiObjectAttribute.  # noqa: E501


        :return: The object_attribute_kind of this ConquestApiObjectAttribute.  # noqa: E501
        :rtype: ConquestApiObjectAttributeKind
        """
        return self._object_attribute_kind

    @object_attribute_kind.setter
    def object_attribute_kind(self, object_attribute_kind):
        """Sets the object_attribute_kind of this ConquestApiObjectAttribute.


        :param object_attribute_kind: The object_attribute_kind of this ConquestApiObjectAttribute.  # noqa: E501
        :type: ConquestApiObjectAttributeKind
        """

        self._object_attribute_kind = object_attribute_kind

    @property
    def object_type(self):
        """Gets the object_type of this ConquestApiObjectAttribute.  # noqa: E501


        :return: The object_type of this ConquestApiObjectAttribute.  # noqa: E501
        :rtype: ConquestApiObjectType
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """Sets the object_type of this ConquestApiObjectAttribute.


        :param object_type: The object_type of this ConquestApiObjectAttribute.  # noqa: E501
        :type: ConquestApiObjectType
        """

        self._object_type = object_type

    @property
    def parameter(self):
        """Gets the parameter of this ConquestApiObjectAttribute.  # noqa: E501


        :return: The parameter of this ConquestApiObjectAttribute.  # noqa: E501
        :rtype: str
        """
        return self._parameter

    @parameter.setter
    def parameter(self, parameter):
        """Sets the parameter of this ConquestApiObjectAttribute.


        :param parameter: The parameter of this ConquestApiObjectAttribute.  # noqa: E501
        :type: str
        """

        self._parameter = parameter

    @property
    def parameter_type(self):
        """Gets the parameter_type of this ConquestApiObjectAttribute.  # noqa: E501


        :return: The parameter_type of this ConquestApiObjectAttribute.  # noqa: E501
        :rtype: ConquestApiObjectAttributeParameterType
        """
        return self._parameter_type

    @parameter_type.setter
    def parameter_type(self, parameter_type):
        """Sets the parameter_type of this ConquestApiObjectAttribute.


        :param parameter_type: The parameter_type of this ConquestApiObjectAttribute.  # noqa: E501
        :type: ConquestApiObjectAttributeParameterType
        """

        self._parameter_type = parameter_type

    @property
    def path(self):
        """Gets the path of this ConquestApiObjectAttribute.  # noqa: E501


        :return: The path of this ConquestApiObjectAttribute.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this ConquestApiObjectAttribute.


        :param path: The path of this ConquestApiObjectAttribute.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def primary_key(self):
        """Gets the primary_key of this ConquestApiObjectAttribute.  # noqa: E501


        :return: The primary_key of this ConquestApiObjectAttribute.  # noqa: E501
        :rtype: bool
        """
        return self._primary_key

    @primary_key.setter
    def primary_key(self, primary_key):
        """Sets the primary_key of this ConquestApiObjectAttribute.


        :param primary_key: The primary_key of this ConquestApiObjectAttribute.  # noqa: E501
        :type: bool
        """

        self._primary_key = primary_key

    @property
    def value_type(self):
        """Gets the value_type of this ConquestApiObjectAttribute.  # noqa: E501


        :return: The value_type of this ConquestApiObjectAttribute.  # noqa: E501
        :rtype: ConquestApiValueType
        """
        return self._value_type

    @value_type.setter
    def value_type(self, value_type):
        """Sets the value_type of this ConquestApiObjectAttribute.


        :param value_type: The value_type of this ConquestApiObjectAttribute.  # noqa: E501
        :type: ConquestApiValueType
        """

        self._value_type = value_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConquestApiObjectAttribute, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConquestApiObjectAttribute):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
