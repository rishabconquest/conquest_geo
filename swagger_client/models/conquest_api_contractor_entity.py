# coding: utf-8

"""
    Conquest API v4

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ConquestApiContractorEntity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'contractor_id': 'int',
        'document_location': 'str',
        'record': 'ConquestApiContractorRecord'
    }

    attribute_map = {
        'contractor_id': 'ContractorID',
        'document_location': 'DocumentLocation',
        'record': 'Record'
    }

    def __init__(self, contractor_id=None, document_location=None, record=None):  # noqa: E501
        """ConquestApiContractorEntity - a model defined in Swagger"""  # noqa: E501
        self._contractor_id = None
        self._document_location = None
        self._record = None
        self.discriminator = None
        if contractor_id is not None:
            self.contractor_id = contractor_id
        if document_location is not None:
            self.document_location = document_location
        if record is not None:
            self.record = record

    @property
    def contractor_id(self):
        """Gets the contractor_id of this ConquestApiContractorEntity.  # noqa: E501


        :return: The contractor_id of this ConquestApiContractorEntity.  # noqa: E501
        :rtype: int
        """
        return self._contractor_id

    @contractor_id.setter
    def contractor_id(self, contractor_id):
        """Sets the contractor_id of this ConquestApiContractorEntity.


        :param contractor_id: The contractor_id of this ConquestApiContractorEntity.  # noqa: E501
        :type: int
        """

        self._contractor_id = contractor_id

    @property
    def document_location(self):
        """Gets the document_location of this ConquestApiContractorEntity.  # noqa: E501


        :return: The document_location of this ConquestApiContractorEntity.  # noqa: E501
        :rtype: str
        """
        return self._document_location

    @document_location.setter
    def document_location(self, document_location):
        """Sets the document_location of this ConquestApiContractorEntity.


        :param document_location: The document_location of this ConquestApiContractorEntity.  # noqa: E501
        :type: str
        """

        self._document_location = document_location

    @property
    def record(self):
        """Gets the record of this ConquestApiContractorEntity.  # noqa: E501


        :return: The record of this ConquestApiContractorEntity.  # noqa: E501
        :rtype: ConquestApiContractorRecord
        """
        return self._record

    @record.setter
    def record(self, record):
        """Sets the record of this ConquestApiContractorEntity.


        :param record: The record of this ConquestApiContractorEntity.  # noqa: E501
        :type: ConquestApiContractorRecord
        """

        self._record = record

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConquestApiContractorEntity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConquestApiContractorEntity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
