# coding: utf-8

"""
    Conquest API v4

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ConquestApiApplyStandardActionOverwriteOptions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account': 'bool',
        'action_category': 'bool',
        'action_description': 'bool',
        'action_notes': 'bool',
        'action_type': 'bool',
        'assign_to': 'bool',
        'urgency': 'bool'
    }

    attribute_map = {
        'account': 'Account',
        'action_category': 'ActionCategory',
        'action_description': 'ActionDescription',
        'action_notes': 'ActionNotes',
        'action_type': 'ActionType',
        'assign_to': 'AssignTo',
        'urgency': 'Urgency'
    }

    def __init__(self, account=None, action_category=None, action_description=None, action_notes=None, action_type=None, assign_to=None, urgency=None):  # noqa: E501
        """ConquestApiApplyStandardActionOverwriteOptions - a model defined in Swagger"""  # noqa: E501
        self._account = None
        self._action_category = None
        self._action_description = None
        self._action_notes = None
        self._action_type = None
        self._assign_to = None
        self._urgency = None
        self.discriminator = None
        if account is not None:
            self.account = account
        if action_category is not None:
            self.action_category = action_category
        if action_description is not None:
            self.action_description = action_description
        if action_notes is not None:
            self.action_notes = action_notes
        if action_type is not None:
            self.action_type = action_type
        if assign_to is not None:
            self.assign_to = assign_to
        if urgency is not None:
            self.urgency = urgency

    @property
    def account(self):
        """Gets the account of this ConquestApiApplyStandardActionOverwriteOptions.  # noqa: E501


        :return: The account of this ConquestApiApplyStandardActionOverwriteOptions.  # noqa: E501
        :rtype: bool
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this ConquestApiApplyStandardActionOverwriteOptions.


        :param account: The account of this ConquestApiApplyStandardActionOverwriteOptions.  # noqa: E501
        :type: bool
        """

        self._account = account

    @property
    def action_category(self):
        """Gets the action_category of this ConquestApiApplyStandardActionOverwriteOptions.  # noqa: E501


        :return: The action_category of this ConquestApiApplyStandardActionOverwriteOptions.  # noqa: E501
        :rtype: bool
        """
        return self._action_category

    @action_category.setter
    def action_category(self, action_category):
        """Sets the action_category of this ConquestApiApplyStandardActionOverwriteOptions.


        :param action_category: The action_category of this ConquestApiApplyStandardActionOverwriteOptions.  # noqa: E501
        :type: bool
        """

        self._action_category = action_category

    @property
    def action_description(self):
        """Gets the action_description of this ConquestApiApplyStandardActionOverwriteOptions.  # noqa: E501


        :return: The action_description of this ConquestApiApplyStandardActionOverwriteOptions.  # noqa: E501
        :rtype: bool
        """
        return self._action_description

    @action_description.setter
    def action_description(self, action_description):
        """Sets the action_description of this ConquestApiApplyStandardActionOverwriteOptions.


        :param action_description: The action_description of this ConquestApiApplyStandardActionOverwriteOptions.  # noqa: E501
        :type: bool
        """

        self._action_description = action_description

    @property
    def action_notes(self):
        """Gets the action_notes of this ConquestApiApplyStandardActionOverwriteOptions.  # noqa: E501


        :return: The action_notes of this ConquestApiApplyStandardActionOverwriteOptions.  # noqa: E501
        :rtype: bool
        """
        return self._action_notes

    @action_notes.setter
    def action_notes(self, action_notes):
        """Sets the action_notes of this ConquestApiApplyStandardActionOverwriteOptions.


        :param action_notes: The action_notes of this ConquestApiApplyStandardActionOverwriteOptions.  # noqa: E501
        :type: bool
        """

        self._action_notes = action_notes

    @property
    def action_type(self):
        """Gets the action_type of this ConquestApiApplyStandardActionOverwriteOptions.  # noqa: E501


        :return: The action_type of this ConquestApiApplyStandardActionOverwriteOptions.  # noqa: E501
        :rtype: bool
        """
        return self._action_type

    @action_type.setter
    def action_type(self, action_type):
        """Sets the action_type of this ConquestApiApplyStandardActionOverwriteOptions.


        :param action_type: The action_type of this ConquestApiApplyStandardActionOverwriteOptions.  # noqa: E501
        :type: bool
        """

        self._action_type = action_type

    @property
    def assign_to(self):
        """Gets the assign_to of this ConquestApiApplyStandardActionOverwriteOptions.  # noqa: E501


        :return: The assign_to of this ConquestApiApplyStandardActionOverwriteOptions.  # noqa: E501
        :rtype: bool
        """
        return self._assign_to

    @assign_to.setter
    def assign_to(self, assign_to):
        """Sets the assign_to of this ConquestApiApplyStandardActionOverwriteOptions.


        :param assign_to: The assign_to of this ConquestApiApplyStandardActionOverwriteOptions.  # noqa: E501
        :type: bool
        """

        self._assign_to = assign_to

    @property
    def urgency(self):
        """Gets the urgency of this ConquestApiApplyStandardActionOverwriteOptions.  # noqa: E501


        :return: The urgency of this ConquestApiApplyStandardActionOverwriteOptions.  # noqa: E501
        :rtype: bool
        """
        return self._urgency

    @urgency.setter
    def urgency(self, urgency):
        """Sets the urgency of this ConquestApiApplyStandardActionOverwriteOptions.


        :param urgency: The urgency of this ConquestApiApplyStandardActionOverwriteOptions.  # noqa: E501
        :type: bool
        """

        self._urgency = urgency

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConquestApiApplyStandardActionOverwriteOptions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConquestApiApplyStandardActionOverwriteOptions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
