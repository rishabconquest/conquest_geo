# coding: utf-8

"""
    Conquest API v4

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ConquestApiActionTask(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action_assignments': 'list[ConquestApiActionAssignment]',
        'duration': 'float',
        'ordr': 'int',
        'start_date': 'datetime',
        'task_id': 'int',
        'task_name': 'str'
    }

    attribute_map = {
        'action_assignments': 'ActionAssignments',
        'duration': 'Duration',
        'ordr': 'Ordr',
        'start_date': 'StartDate',
        'task_id': 'TaskID',
        'task_name': 'TaskName'
    }

    def __init__(self, action_assignments=None, duration=None, ordr=None, start_date=None, task_id=None, task_name=None):  # noqa: E501
        """ConquestApiActionTask - a model defined in Swagger"""  # noqa: E501
        self._action_assignments = None
        self._duration = None
        self._ordr = None
        self._start_date = None
        self._task_id = None
        self._task_name = None
        self.discriminator = None
        if action_assignments is not None:
            self.action_assignments = action_assignments
        if duration is not None:
            self.duration = duration
        if ordr is not None:
            self.ordr = ordr
        if start_date is not None:
            self.start_date = start_date
        if task_id is not None:
            self.task_id = task_id
        if task_name is not None:
            self.task_name = task_name

    @property
    def action_assignments(self):
        """Gets the action_assignments of this ConquestApiActionTask.  # noqa: E501


        :return: The action_assignments of this ConquestApiActionTask.  # noqa: E501
        :rtype: list[ConquestApiActionAssignment]
        """
        return self._action_assignments

    @action_assignments.setter
    def action_assignments(self, action_assignments):
        """Sets the action_assignments of this ConquestApiActionTask.


        :param action_assignments: The action_assignments of this ConquestApiActionTask.  # noqa: E501
        :type: list[ConquestApiActionAssignment]
        """

        self._action_assignments = action_assignments

    @property
    def duration(self):
        """Gets the duration of this ConquestApiActionTask.  # noqa: E501


        :return: The duration of this ConquestApiActionTask.  # noqa: E501
        :rtype: float
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this ConquestApiActionTask.


        :param duration: The duration of this ConquestApiActionTask.  # noqa: E501
        :type: float
        """

        self._duration = duration

    @property
    def ordr(self):
        """Gets the ordr of this ConquestApiActionTask.  # noqa: E501


        :return: The ordr of this ConquestApiActionTask.  # noqa: E501
        :rtype: int
        """
        return self._ordr

    @ordr.setter
    def ordr(self, ordr):
        """Sets the ordr of this ConquestApiActionTask.


        :param ordr: The ordr of this ConquestApiActionTask.  # noqa: E501
        :type: int
        """

        self._ordr = ordr

    @property
    def start_date(self):
        """Gets the start_date of this ConquestApiActionTask.  # noqa: E501


        :return: The start_date of this ConquestApiActionTask.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this ConquestApiActionTask.


        :param start_date: The start_date of this ConquestApiActionTask.  # noqa: E501
        :type: datetime
        """

        self._start_date = start_date

    @property
    def task_id(self):
        """Gets the task_id of this ConquestApiActionTask.  # noqa: E501


        :return: The task_id of this ConquestApiActionTask.  # noqa: E501
        :rtype: int
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id):
        """Sets the task_id of this ConquestApiActionTask.


        :param task_id: The task_id of this ConquestApiActionTask.  # noqa: E501
        :type: int
        """

        self._task_id = task_id

    @property
    def task_name(self):
        """Gets the task_name of this ConquestApiActionTask.  # noqa: E501


        :return: The task_name of this ConquestApiActionTask.  # noqa: E501
        :rtype: str
        """
        return self._task_name

    @task_name.setter
    def task_name(self, task_name):
        """Sets the task_name of this ConquestApiActionTask.


        :param task_name: The task_name of this ConquestApiActionTask.  # noqa: E501
        :type: str
        """

        self._task_name = task_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConquestApiActionTask, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConquestApiActionTask):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
