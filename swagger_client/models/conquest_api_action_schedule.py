# coding: utf-8

"""
    Conquest API v4

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ConquestApiActionSchedule(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action_date': 'datetime',
        'action_id': 'int',
        'cycles': 'int',
        'duration': 'int',
        'original_action_date': 'datetime',
        'repeat_cycle_units': 'ConquestApiRepeatCycleUnits',
        'schedule_type': 'ConquestApiActionScheduleType'
    }

    attribute_map = {
        'action_date': 'ActionDate',
        'action_id': 'ActionID',
        'cycles': 'Cycles',
        'duration': 'Duration',
        'original_action_date': 'OriginalActionDate',
        'repeat_cycle_units': 'RepeatCycleUnits',
        'schedule_type': 'ScheduleType'
    }

    def __init__(self, action_date=None, action_id=None, cycles=None, duration=None, original_action_date=None, repeat_cycle_units=None, schedule_type=None):  # noqa: E501
        """ConquestApiActionSchedule - a model defined in Swagger"""  # noqa: E501
        self._action_date = None
        self._action_id = None
        self._cycles = None
        self._duration = None
        self._original_action_date = None
        self._repeat_cycle_units = None
        self._schedule_type = None
        self.discriminator = None
        if action_date is not None:
            self.action_date = action_date
        if action_id is not None:
            self.action_id = action_id
        if cycles is not None:
            self.cycles = cycles
        if duration is not None:
            self.duration = duration
        if original_action_date is not None:
            self.original_action_date = original_action_date
        if repeat_cycle_units is not None:
            self.repeat_cycle_units = repeat_cycle_units
        if schedule_type is not None:
            self.schedule_type = schedule_type

    @property
    def action_date(self):
        """Gets the action_date of this ConquestApiActionSchedule.  # noqa: E501


        :return: The action_date of this ConquestApiActionSchedule.  # noqa: E501
        :rtype: datetime
        """
        return self._action_date

    @action_date.setter
    def action_date(self, action_date):
        """Sets the action_date of this ConquestApiActionSchedule.


        :param action_date: The action_date of this ConquestApiActionSchedule.  # noqa: E501
        :type: datetime
        """

        self._action_date = action_date

    @property
    def action_id(self):
        """Gets the action_id of this ConquestApiActionSchedule.  # noqa: E501


        :return: The action_id of this ConquestApiActionSchedule.  # noqa: E501
        :rtype: int
        """
        return self._action_id

    @action_id.setter
    def action_id(self, action_id):
        """Sets the action_id of this ConquestApiActionSchedule.


        :param action_id: The action_id of this ConquestApiActionSchedule.  # noqa: E501
        :type: int
        """

        self._action_id = action_id

    @property
    def cycles(self):
        """Gets the cycles of this ConquestApiActionSchedule.  # noqa: E501


        :return: The cycles of this ConquestApiActionSchedule.  # noqa: E501
        :rtype: int
        """
        return self._cycles

    @cycles.setter
    def cycles(self, cycles):
        """Sets the cycles of this ConquestApiActionSchedule.


        :param cycles: The cycles of this ConquestApiActionSchedule.  # noqa: E501
        :type: int
        """

        self._cycles = cycles

    @property
    def duration(self):
        """Gets the duration of this ConquestApiActionSchedule.  # noqa: E501


        :return: The duration of this ConquestApiActionSchedule.  # noqa: E501
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this ConquestApiActionSchedule.


        :param duration: The duration of this ConquestApiActionSchedule.  # noqa: E501
        :type: int
        """

        self._duration = duration

    @property
    def original_action_date(self):
        """Gets the original_action_date of this ConquestApiActionSchedule.  # noqa: E501


        :return: The original_action_date of this ConquestApiActionSchedule.  # noqa: E501
        :rtype: datetime
        """
        return self._original_action_date

    @original_action_date.setter
    def original_action_date(self, original_action_date):
        """Sets the original_action_date of this ConquestApiActionSchedule.


        :param original_action_date: The original_action_date of this ConquestApiActionSchedule.  # noqa: E501
        :type: datetime
        """

        self._original_action_date = original_action_date

    @property
    def repeat_cycle_units(self):
        """Gets the repeat_cycle_units of this ConquestApiActionSchedule.  # noqa: E501


        :return: The repeat_cycle_units of this ConquestApiActionSchedule.  # noqa: E501
        :rtype: ConquestApiRepeatCycleUnits
        """
        return self._repeat_cycle_units

    @repeat_cycle_units.setter
    def repeat_cycle_units(self, repeat_cycle_units):
        """Sets the repeat_cycle_units of this ConquestApiActionSchedule.


        :param repeat_cycle_units: The repeat_cycle_units of this ConquestApiActionSchedule.  # noqa: E501
        :type: ConquestApiRepeatCycleUnits
        """

        self._repeat_cycle_units = repeat_cycle_units

    @property
    def schedule_type(self):
        """Gets the schedule_type of this ConquestApiActionSchedule.  # noqa: E501


        :return: The schedule_type of this ConquestApiActionSchedule.  # noqa: E501
        :rtype: ConquestApiActionScheduleType
        """
        return self._schedule_type

    @schedule_type.setter
    def schedule_type(self, schedule_type):
        """Sets the schedule_type of this ConquestApiActionSchedule.


        :param schedule_type: The schedule_type of this ConquestApiActionSchedule.  # noqa: E501
        :type: ConquestApiActionScheduleType
        """

        self._schedule_type = schedule_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConquestApiActionSchedule, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConquestApiActionSchedule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
