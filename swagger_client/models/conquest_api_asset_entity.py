# coding: utf-8

"""
    Conquest API v4

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ConquestApiAssetEntity(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action_permission': 'ConquestApiPermission',
        'adding_date': 'datetime',
        'adding_user': 'str',
        'asset_id': 'int',
        'attribute_id': 'int',
        'defect_permission': 'ConquestApiPermission',
        'document_location': 'str',
        'edit_date': 'datetime',
        'editor': 'str',
        'hyperlinks': 'ConquestApiCustomHyperlinkList',
        'inspection': 'ConquestApiInspectionRecord',
        'inspection_id': 'int',
        'map_style': 'ConquestApiStyle',
        'parent_id': 'int',
        'permission': 'ConquestApiPermission',
        'record': 'ConquestApiAssetRecord',
        'replaced_asset': 'int',
        'retirement_date': 'ConquestApiTimestampValue',
        'retirement_reason': 'str',
        'retirement_user': 'str',
        'split_asset_id': 'int',
        'status': 'str',
        'lock': 'ConquestApiLock'
    }

    attribute_map = {
        'action_permission': 'ActionPermission',
        'adding_date': 'AddingDate',
        'adding_user': 'AddingUser',
        'asset_id': 'AssetID',
        'attribute_id': 'AttributeID',
        'defect_permission': 'DefectPermission',
        'document_location': 'DocumentLocation',
        'edit_date': 'EditDate',
        'editor': 'Editor',
        'hyperlinks': 'Hyperlinks',
        'inspection': 'Inspection',
        'inspection_id': 'InspectionID',
        'map_style': 'MapStyle',
        'parent_id': 'ParentID',
        'permission': 'Permission',
        'record': 'Record',
        'replaced_asset': 'ReplacedAsset',
        'retirement_date': 'RetirementDate',
        'retirement_reason': 'RetirementReason',
        'retirement_user': 'RetirementUser',
        'split_asset_id': 'SplitAssetID',
        'status': 'Status',
        'lock': 'lock'
    }

    def __init__(self, action_permission=None, adding_date=None, adding_user=None, asset_id=None, attribute_id=None, defect_permission=None, document_location=None, edit_date=None, editor=None, hyperlinks=None, inspection=None, inspection_id=None, map_style=None, parent_id=None, permission=None, record=None, replaced_asset=None, retirement_date=None, retirement_reason=None, retirement_user=None, split_asset_id=None, status=None, lock=None):  # noqa: E501
        """ConquestApiAssetEntity - a model defined in Swagger"""  # noqa: E501
        self._action_permission = None
        self._adding_date = None
        self._adding_user = None
        self._asset_id = None
        self._attribute_id = None
        self._defect_permission = None
        self._document_location = None
        self._edit_date = None
        self._editor = None
        self._hyperlinks = None
        self._inspection = None
        self._inspection_id = None
        self._map_style = None
        self._parent_id = None
        self._permission = None
        self._record = None
        self._replaced_asset = None
        self._retirement_date = None
        self._retirement_reason = None
        self._retirement_user = None
        self._split_asset_id = None
        self._status = None
        self._lock = None
        self.discriminator = None
        if action_permission is not None:
            self.action_permission = action_permission
        if adding_date is not None:
            self.adding_date = adding_date
        if adding_user is not None:
            self.adding_user = adding_user
        if asset_id is not None:
            self.asset_id = asset_id
        if attribute_id is not None:
            self.attribute_id = attribute_id
        if defect_permission is not None:
            self.defect_permission = defect_permission
        if document_location is not None:
            self.document_location = document_location
        if edit_date is not None:
            self.edit_date = edit_date
        if editor is not None:
            self.editor = editor
        if hyperlinks is not None:
            self.hyperlinks = hyperlinks
        if inspection is not None:
            self.inspection = inspection
        if inspection_id is not None:
            self.inspection_id = inspection_id
        if map_style is not None:
            self.map_style = map_style
        if parent_id is not None:
            self.parent_id = parent_id
        if permission is not None:
            self.permission = permission
        if record is not None:
            self.record = record
        if replaced_asset is not None:
            self.replaced_asset = replaced_asset
        if retirement_date is not None:
            self.retirement_date = retirement_date
        if retirement_reason is not None:
            self.retirement_reason = retirement_reason
        if retirement_user is not None:
            self.retirement_user = retirement_user
        if split_asset_id is not None:
            self.split_asset_id = split_asset_id
        if status is not None:
            self.status = status
        if lock is not None:
            self.lock = lock

    @property
    def action_permission(self):
        """Gets the action_permission of this ConquestApiAssetEntity.  # noqa: E501


        :return: The action_permission of this ConquestApiAssetEntity.  # noqa: E501
        :rtype: ConquestApiPermission
        """
        return self._action_permission

    @action_permission.setter
    def action_permission(self, action_permission):
        """Sets the action_permission of this ConquestApiAssetEntity.


        :param action_permission: The action_permission of this ConquestApiAssetEntity.  # noqa: E501
        :type: ConquestApiPermission
        """

        self._action_permission = action_permission

    @property
    def adding_date(self):
        """Gets the adding_date of this ConquestApiAssetEntity.  # noqa: E501


        :return: The adding_date of this ConquestApiAssetEntity.  # noqa: E501
        :rtype: datetime
        """
        return self._adding_date

    @adding_date.setter
    def adding_date(self, adding_date):
        """Sets the adding_date of this ConquestApiAssetEntity.


        :param adding_date: The adding_date of this ConquestApiAssetEntity.  # noqa: E501
        :type: datetime
        """

        self._adding_date = adding_date

    @property
    def adding_user(self):
        """Gets the adding_user of this ConquestApiAssetEntity.  # noqa: E501


        :return: The adding_user of this ConquestApiAssetEntity.  # noqa: E501
        :rtype: str
        """
        return self._adding_user

    @adding_user.setter
    def adding_user(self, adding_user):
        """Sets the adding_user of this ConquestApiAssetEntity.


        :param adding_user: The adding_user of this ConquestApiAssetEntity.  # noqa: E501
        :type: str
        """

        self._adding_user = adding_user

    @property
    def asset_id(self):
        """Gets the asset_id of this ConquestApiAssetEntity.  # noqa: E501


        :return: The asset_id of this ConquestApiAssetEntity.  # noqa: E501
        :rtype: int
        """
        return self._asset_id

    @asset_id.setter
    def asset_id(self, asset_id):
        """Sets the asset_id of this ConquestApiAssetEntity.


        :param asset_id: The asset_id of this ConquestApiAssetEntity.  # noqa: E501
        :type: int
        """

        self._asset_id = asset_id

    @property
    def attribute_id(self):
        """Gets the attribute_id of this ConquestApiAssetEntity.  # noqa: E501


        :return: The attribute_id of this ConquestApiAssetEntity.  # noqa: E501
        :rtype: int
        """
        return self._attribute_id

    @attribute_id.setter
    def attribute_id(self, attribute_id):
        """Sets the attribute_id of this ConquestApiAssetEntity.


        :param attribute_id: The attribute_id of this ConquestApiAssetEntity.  # noqa: E501
        :type: int
        """

        self._attribute_id = attribute_id

    @property
    def defect_permission(self):
        """Gets the defect_permission of this ConquestApiAssetEntity.  # noqa: E501


        :return: The defect_permission of this ConquestApiAssetEntity.  # noqa: E501
        :rtype: ConquestApiPermission
        """
        return self._defect_permission

    @defect_permission.setter
    def defect_permission(self, defect_permission):
        """Sets the defect_permission of this ConquestApiAssetEntity.


        :param defect_permission: The defect_permission of this ConquestApiAssetEntity.  # noqa: E501
        :type: ConquestApiPermission
        """

        self._defect_permission = defect_permission

    @property
    def document_location(self):
        """Gets the document_location of this ConquestApiAssetEntity.  # noqa: E501


        :return: The document_location of this ConquestApiAssetEntity.  # noqa: E501
        :rtype: str
        """
        return self._document_location

    @document_location.setter
    def document_location(self, document_location):
        """Sets the document_location of this ConquestApiAssetEntity.


        :param document_location: The document_location of this ConquestApiAssetEntity.  # noqa: E501
        :type: str
        """

        self._document_location = document_location

    @property
    def edit_date(self):
        """Gets the edit_date of this ConquestApiAssetEntity.  # noqa: E501


        :return: The edit_date of this ConquestApiAssetEntity.  # noqa: E501
        :rtype: datetime
        """
        return self._edit_date

    @edit_date.setter
    def edit_date(self, edit_date):
        """Sets the edit_date of this ConquestApiAssetEntity.


        :param edit_date: The edit_date of this ConquestApiAssetEntity.  # noqa: E501
        :type: datetime
        """

        self._edit_date = edit_date

    @property
    def editor(self):
        """Gets the editor of this ConquestApiAssetEntity.  # noqa: E501


        :return: The editor of this ConquestApiAssetEntity.  # noqa: E501
        :rtype: str
        """
        return self._editor

    @editor.setter
    def editor(self, editor):
        """Sets the editor of this ConquestApiAssetEntity.


        :param editor: The editor of this ConquestApiAssetEntity.  # noqa: E501
        :type: str
        """

        self._editor = editor

    @property
    def hyperlinks(self):
        """Gets the hyperlinks of this ConquestApiAssetEntity.  # noqa: E501


        :return: The hyperlinks of this ConquestApiAssetEntity.  # noqa: E501
        :rtype: ConquestApiCustomHyperlinkList
        """
        return self._hyperlinks

    @hyperlinks.setter
    def hyperlinks(self, hyperlinks):
        """Sets the hyperlinks of this ConquestApiAssetEntity.


        :param hyperlinks: The hyperlinks of this ConquestApiAssetEntity.  # noqa: E501
        :type: ConquestApiCustomHyperlinkList
        """

        self._hyperlinks = hyperlinks

    @property
    def inspection(self):
        """Gets the inspection of this ConquestApiAssetEntity.  # noqa: E501


        :return: The inspection of this ConquestApiAssetEntity.  # noqa: E501
        :rtype: ConquestApiInspectionRecord
        """
        return self._inspection

    @inspection.setter
    def inspection(self, inspection):
        """Sets the inspection of this ConquestApiAssetEntity.


        :param inspection: The inspection of this ConquestApiAssetEntity.  # noqa: E501
        :type: ConquestApiInspectionRecord
        """

        self._inspection = inspection

    @property
    def inspection_id(self):
        """Gets the inspection_id of this ConquestApiAssetEntity.  # noqa: E501


        :return: The inspection_id of this ConquestApiAssetEntity.  # noqa: E501
        :rtype: int
        """
        return self._inspection_id

    @inspection_id.setter
    def inspection_id(self, inspection_id):
        """Sets the inspection_id of this ConquestApiAssetEntity.


        :param inspection_id: The inspection_id of this ConquestApiAssetEntity.  # noqa: E501
        :type: int
        """

        self._inspection_id = inspection_id

    @property
    def map_style(self):
        """Gets the map_style of this ConquestApiAssetEntity.  # noqa: E501


        :return: The map_style of this ConquestApiAssetEntity.  # noqa: E501
        :rtype: ConquestApiStyle
        """
        return self._map_style

    @map_style.setter
    def map_style(self, map_style):
        """Sets the map_style of this ConquestApiAssetEntity.


        :param map_style: The map_style of this ConquestApiAssetEntity.  # noqa: E501
        :type: ConquestApiStyle
        """

        self._map_style = map_style

    @property
    def parent_id(self):
        """Gets the parent_id of this ConquestApiAssetEntity.  # noqa: E501


        :return: The parent_id of this ConquestApiAssetEntity.  # noqa: E501
        :rtype: int
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this ConquestApiAssetEntity.


        :param parent_id: The parent_id of this ConquestApiAssetEntity.  # noqa: E501
        :type: int
        """

        self._parent_id = parent_id

    @property
    def permission(self):
        """Gets the permission of this ConquestApiAssetEntity.  # noqa: E501


        :return: The permission of this ConquestApiAssetEntity.  # noqa: E501
        :rtype: ConquestApiPermission
        """
        return self._permission

    @permission.setter
    def permission(self, permission):
        """Sets the permission of this ConquestApiAssetEntity.


        :param permission: The permission of this ConquestApiAssetEntity.  # noqa: E501
        :type: ConquestApiPermission
        """

        self._permission = permission

    @property
    def record(self):
        """Gets the record of this ConquestApiAssetEntity.  # noqa: E501


        :return: The record of this ConquestApiAssetEntity.  # noqa: E501
        :rtype: ConquestApiAssetRecord
        """
        return self._record

    @record.setter
    def record(self, record):
        """Sets the record of this ConquestApiAssetEntity.


        :param record: The record of this ConquestApiAssetEntity.  # noqa: E501
        :type: ConquestApiAssetRecord
        """

        self._record = record

    @property
    def replaced_asset(self):
        """Gets the replaced_asset of this ConquestApiAssetEntity.  # noqa: E501


        :return: The replaced_asset of this ConquestApiAssetEntity.  # noqa: E501
        :rtype: int
        """
        return self._replaced_asset

    @replaced_asset.setter
    def replaced_asset(self, replaced_asset):
        """Sets the replaced_asset of this ConquestApiAssetEntity.


        :param replaced_asset: The replaced_asset of this ConquestApiAssetEntity.  # noqa: E501
        :type: int
        """

        self._replaced_asset = replaced_asset

    @property
    def retirement_date(self):
        """Gets the retirement_date of this ConquestApiAssetEntity.  # noqa: E501


        :return: The retirement_date of this ConquestApiAssetEntity.  # noqa: E501
        :rtype: ConquestApiTimestampValue
        """
        return self._retirement_date

    @retirement_date.setter
    def retirement_date(self, retirement_date):
        """Sets the retirement_date of this ConquestApiAssetEntity.


        :param retirement_date: The retirement_date of this ConquestApiAssetEntity.  # noqa: E501
        :type: ConquestApiTimestampValue
        """

        self._retirement_date = retirement_date

    @property
    def retirement_reason(self):
        """Gets the retirement_reason of this ConquestApiAssetEntity.  # noqa: E501


        :return: The retirement_reason of this ConquestApiAssetEntity.  # noqa: E501
        :rtype: str
        """
        return self._retirement_reason

    @retirement_reason.setter
    def retirement_reason(self, retirement_reason):
        """Sets the retirement_reason of this ConquestApiAssetEntity.


        :param retirement_reason: The retirement_reason of this ConquestApiAssetEntity.  # noqa: E501
        :type: str
        """

        self._retirement_reason = retirement_reason

    @property
    def retirement_user(self):
        """Gets the retirement_user of this ConquestApiAssetEntity.  # noqa: E501


        :return: The retirement_user of this ConquestApiAssetEntity.  # noqa: E501
        :rtype: str
        """
        return self._retirement_user

    @retirement_user.setter
    def retirement_user(self, retirement_user):
        """Sets the retirement_user of this ConquestApiAssetEntity.


        :param retirement_user: The retirement_user of this ConquestApiAssetEntity.  # noqa: E501
        :type: str
        """

        self._retirement_user = retirement_user

    @property
    def split_asset_id(self):
        """Gets the split_asset_id of this ConquestApiAssetEntity.  # noqa: E501


        :return: The split_asset_id of this ConquestApiAssetEntity.  # noqa: E501
        :rtype: int
        """
        return self._split_asset_id

    @split_asset_id.setter
    def split_asset_id(self, split_asset_id):
        """Sets the split_asset_id of this ConquestApiAssetEntity.


        :param split_asset_id: The split_asset_id of this ConquestApiAssetEntity.  # noqa: E501
        :type: int
        """

        self._split_asset_id = split_asset_id

    @property
    def status(self):
        """Gets the status of this ConquestApiAssetEntity.  # noqa: E501


        :return: The status of this ConquestApiAssetEntity.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ConquestApiAssetEntity.


        :param status: The status of this ConquestApiAssetEntity.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def lock(self):
        """Gets the lock of this ConquestApiAssetEntity.  # noqa: E501


        :return: The lock of this ConquestApiAssetEntity.  # noqa: E501
        :rtype: ConquestApiLock
        """
        return self._lock

    @lock.setter
    def lock(self, lock):
        """Sets the lock of this ConquestApiAssetEntity.


        :param lock: The lock of this ConquestApiAssetEntity.  # noqa: E501
        :type: ConquestApiLock
        """

        self._lock = lock

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConquestApiAssetEntity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConquestApiAssetEntity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
