# coding: utf-8

"""
    Conquest API v4

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ConquestApiAddDocumentCommand(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address': 'str',
        'content_length': 'str',
        'content_type': 'str',
        'create_time': 'datetime',
        'document_description': 'str',
        'hashes': 'list[str]',
        'link_existing_document': 'bool',
        'location_prefix': 'str',
        'object_key': 'ConquestApiObjectKey'
    }

    attribute_map = {
        'address': 'Address',
        'content_length': 'ContentLength',
        'content_type': 'ContentType',
        'create_time': 'CreateTime',
        'document_description': 'DocumentDescription',
        'hashes': 'Hashes',
        'link_existing_document': 'LinkExistingDocument',
        'location_prefix': 'LocationPrefix',
        'object_key': 'ObjectKey'
    }

    def __init__(self, address=None, content_length=None, content_type=None, create_time=None, document_description=None, hashes=None, link_existing_document=None, location_prefix=None, object_key=None):  # noqa: E501
        """ConquestApiAddDocumentCommand - a model defined in Swagger"""  # noqa: E501
        self._address = None
        self._content_length = None
        self._content_type = None
        self._create_time = None
        self._document_description = None
        self._hashes = None
        self._link_existing_document = None
        self._location_prefix = None
        self._object_key = None
        self.discriminator = None
        if address is not None:
            self.address = address
        if content_length is not None:
            self.content_length = content_length
        if content_type is not None:
            self.content_type = content_type
        if create_time is not None:
            self.create_time = create_time
        if document_description is not None:
            self.document_description = document_description
        if hashes is not None:
            self.hashes = hashes
        if link_existing_document is not None:
            self.link_existing_document = link_existing_document
        if location_prefix is not None:
            self.location_prefix = location_prefix
        if object_key is not None:
            self.object_key = object_key

    @property
    def address(self):
        """Gets the address of this ConquestApiAddDocumentCommand.  # noqa: E501

        Address is a URI with a supported scheme (blob://, file://, https://, conquest://, trim://).  Addresses tell the server in what location a document should be put. Use ListDocumentLocationsQuery to list available locations.  Locations are pre-defined and are identified by prefixes, which are of the form \"{scheme}://{location-name}\".  The default location, known as the \"System Document Directory\" is  - \"file://conquest_documents/\" for site installations  - \"blob://default/\" for cloud installations (the location name may differ).  When choosing an address, prefix it with a known location, followed by a relative path. For example:       \"blob://default/Assets/1/receipt.txt\"  After a successful upload, reference this document using both the ObjectKey and the returned Document.DocumentID when using the download endpoint. For example:       \"/download/document?object_type=...&object_id=...&document_id=...\"  This endpoint may redirect you to a download (by providing an address in the Location header).  TRIM:  The server identifies that it is TRIM file upload by looking at the Address starting with \"trim://\"  - For new TRIM file, Address - \"trim://new-file\"       While uploading a new TRIM file, the AddDocumentCommand returns with a TRIM blob url location to upload the selected file.  - For existing TRIM file, Address - trim://{RecordNumber}       The existing TRIM file is same as a document link in the database  # noqa: E501

        :return: The address of this ConquestApiAddDocumentCommand.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this ConquestApiAddDocumentCommand.

        Address is a URI with a supported scheme (blob://, file://, https://, conquest://, trim://).  Addresses tell the server in what location a document should be put. Use ListDocumentLocationsQuery to list available locations.  Locations are pre-defined and are identified by prefixes, which are of the form \"{scheme}://{location-name}\".  The default location, known as the \"System Document Directory\" is  - \"file://conquest_documents/\" for site installations  - \"blob://default/\" for cloud installations (the location name may differ).  When choosing an address, prefix it with a known location, followed by a relative path. For example:       \"blob://default/Assets/1/receipt.txt\"  After a successful upload, reference this document using both the ObjectKey and the returned Document.DocumentID when using the download endpoint. For example:       \"/download/document?object_type=...&object_id=...&document_id=...\"  This endpoint may redirect you to a download (by providing an address in the Location header).  TRIM:  The server identifies that it is TRIM file upload by looking at the Address starting with \"trim://\"  - For new TRIM file, Address - \"trim://new-file\"       While uploading a new TRIM file, the AddDocumentCommand returns with a TRIM blob url location to upload the selected file.  - For existing TRIM file, Address - trim://{RecordNumber}       The existing TRIM file is same as a document link in the database  # noqa: E501

        :param address: The address of this ConquestApiAddDocumentCommand.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def content_length(self):
        """Gets the content_length of this ConquestApiAddDocumentCommand.  # noqa: E501


        :return: The content_length of this ConquestApiAddDocumentCommand.  # noqa: E501
        :rtype: str
        """
        return self._content_length

    @content_length.setter
    def content_length(self, content_length):
        """Sets the content_length of this ConquestApiAddDocumentCommand.


        :param content_length: The content_length of this ConquestApiAddDocumentCommand.  # noqa: E501
        :type: str
        """

        self._content_length = content_length

    @property
    def content_type(self):
        """Gets the content_type of this ConquestApiAddDocumentCommand.  # noqa: E501


        :return: The content_type of this ConquestApiAddDocumentCommand.  # noqa: E501
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this ConquestApiAddDocumentCommand.


        :param content_type: The content_type of this ConquestApiAddDocumentCommand.  # noqa: E501
        :type: str
        """

        self._content_type = content_type

    @property
    def create_time(self):
        """Gets the create_time of this ConquestApiAddDocumentCommand.  # noqa: E501

        CreateTime is unique. When adding a document, there is no DocumentID yet, the CreateTime should be used as a key until the DocumentID is retrieved.  # noqa: E501

        :return: The create_time of this ConquestApiAddDocumentCommand.  # noqa: E501
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this ConquestApiAddDocumentCommand.

        CreateTime is unique. When adding a document, there is no DocumentID yet, the CreateTime should be used as a key until the DocumentID is retrieved.  # noqa: E501

        :param create_time: The create_time of this ConquestApiAddDocumentCommand.  # noqa: E501
        :type: datetime
        """

        self._create_time = create_time

    @property
    def document_description(self):
        """Gets the document_description of this ConquestApiAddDocumentCommand.  # noqa: E501


        :return: The document_description of this ConquestApiAddDocumentCommand.  # noqa: E501
        :rtype: str
        """
        return self._document_description

    @document_description.setter
    def document_description(self, document_description):
        """Sets the document_description of this ConquestApiAddDocumentCommand.


        :param document_description: The document_description of this ConquestApiAddDocumentCommand.  # noqa: E501
        :type: str
        """

        self._document_description = document_description

    @property
    def hashes(self):
        """Gets the hashes of this ConquestApiAddDocumentCommand.  # noqa: E501

        A list of calculated hashes / checksum of the file to be uploaded.  # noqa: E501

        :return: The hashes of this ConquestApiAddDocumentCommand.  # noqa: E501
        :rtype: list[str]
        """
        return self._hashes

    @hashes.setter
    def hashes(self, hashes):
        """Sets the hashes of this ConquestApiAddDocumentCommand.

        A list of calculated hashes / checksum of the file to be uploaded.  # noqa: E501

        :param hashes: The hashes of this ConquestApiAddDocumentCommand.  # noqa: E501
        :type: list[str]
        """

        self._hashes = hashes

    @property
    def link_existing_document(self):
        """Gets the link_existing_document of this ConquestApiAddDocumentCommand.  # noqa: E501


        :return: The link_existing_document of this ConquestApiAddDocumentCommand.  # noqa: E501
        :rtype: bool
        """
        return self._link_existing_document

    @link_existing_document.setter
    def link_existing_document(self, link_existing_document):
        """Sets the link_existing_document of this ConquestApiAddDocumentCommand.


        :param link_existing_document: The link_existing_document of this ConquestApiAddDocumentCommand.  # noqa: E501
        :type: bool
        """

        self._link_existing_document = link_existing_document

    @property
    def location_prefix(self):
        """Gets the location_prefix of this ConquestApiAddDocumentCommand.  # noqa: E501

        Locations are pre-defined and are identified by prefixes, which are of the form \"{scheme}://{location-name}\".  Prefixes are chosen by the client in a picker  # noqa: E501

        :return: The location_prefix of this ConquestApiAddDocumentCommand.  # noqa: E501
        :rtype: str
        """
        return self._location_prefix

    @location_prefix.setter
    def location_prefix(self, location_prefix):
        """Sets the location_prefix of this ConquestApiAddDocumentCommand.

        Locations are pre-defined and are identified by prefixes, which are of the form \"{scheme}://{location-name}\".  Prefixes are chosen by the client in a picker  # noqa: E501

        :param location_prefix: The location_prefix of this ConquestApiAddDocumentCommand.  # noqa: E501
        :type: str
        """

        self._location_prefix = location_prefix

    @property
    def object_key(self):
        """Gets the object_key of this ConquestApiAddDocumentCommand.  # noqa: E501


        :return: The object_key of this ConquestApiAddDocumentCommand.  # noqa: E501
        :rtype: ConquestApiObjectKey
        """
        return self._object_key

    @object_key.setter
    def object_key(self, object_key):
        """Sets the object_key of this ConquestApiAddDocumentCommand.


        :param object_key: The object_key of this ConquestApiAddDocumentCommand.  # noqa: E501
        :type: ConquestApiObjectKey
        """

        self._object_key = object_key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConquestApiAddDocumentCommand, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConquestApiAddDocumentCommand):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
