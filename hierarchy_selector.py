# -*- coding: utf-8 -*-
"""
/***************************************************************************
 ConquestGeoDialog
                                 A QGIS plugin
 This plugin connects to your Conquest assets
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2021-12-10
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Conquest Software Pty Ltd.
        email                : support@conquestsoftware.com.au
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

from collections import defaultdict
import os

from qgis.PyQt.QtCore import QSettings
from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from .client import client, settings
# from .conquest_geo_dialog import ConquestGeoDialog
from .vendor.conquest.models.conquest_api_object_type import ConquestApiObjectType
from .hierarchy import HierarchyController, HierarchyItem
from qgis.PyQt.QtGui import QStandardItemModel, QStandardItem

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'hierarchy_selector.ui'))


class HierarchySelector(QtWidgets.QDialog, FORM_CLASS):
    selection = defaultdict(str)
    def __init__(self, type: ConquestApiObjectType, parent=None):
        """Constructor."""
        super(HierarchySelector, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.object_type = type
        self.setupUi(self)
        self.model = QStandardItemModel()
        self.treeView.setModel(self.model)
        self.treeView.setItemsExpandable(True)
        # print(dir(model))
        
        # print(dir(self.treeView))

        # self.treeWidget.setHeaderLabel(type)

        self.ctrl = HierarchyController(type, self.treeView)
        self.treeView.expanded.connect(self.expand_items)
        self.treeView.collapsed.connect(self.collapse_items)
        self.accepted.connect(self._submit_form)

    def expand_items(self, index):
        self._remove_children(index) # force reload children
        parent = self.model.itemFromIndex(index)
        _, items = self.ctrl.load_items(parent)
        # for i in items:
        #     i.appendRows([self.ctrl.dummy_item()])
        parent.appendRows(items)
        
        # names = [QTreeWidgetItem(i.object_name) for i in items]
        # self.treeWidget.insertTopLevelItems(None, items)

    def _remove_children(self, index):
        parent = self.model.itemFromIndex(index)
        parent.removeRows(0, parent.rowCount())

    def _append_dummy(self, index):
        parent = self.model.itemFromIndex(index)
        parent.appendRows([self.ctrl.dummy_item()])

    def collapse_items(self, index):
        # parent = self.model.itemFromIndex(index)
        # parent.removeRows(0, parent.rowCount())
        # parent.appendRows([self.ctrl.dummy_item()])
        self._remove_children(index)
        self._append_dummy(index)

    def _print_api(self):
        print(str(self.url_input.text()))

    def _submit_form(self):
        # as a test it cleans up the connection config
        index = self.treeView.selectedIndexes()
        print(f'selected obj: {str(index)}')
        if not index: return
        item = self.model.itemFromIndex(index[0])
        value = item.cq_obj
        settings.set_setting(self.object_type, value.object_name)
        self.selection[self.object_type] = value
        print(f'selected obj: {str(value)}')
        # self.parent().selection[self.object_type] = value
        
